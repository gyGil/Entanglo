--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.4
-- Dumped by pg_dump version 9.5.3

-- Started on 2017-03-28 10:07:13

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 1 (class 3079 OID 36772)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 3233 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- TOC entry 341 (class 1255 OID 36777)
-- Name: activatepart(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION activatepart(text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	_viewpart RECORD;
	_usrId INTEGER;
	_partActiveHistId INTEGER;
	_message TEXT;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('activatepart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));
	
	SELECT 	part_id,
		part_rev,
		item_id, 
		item_number,
		part_active,
		part_serialnumber, 
		part_sequencenumber,
		part_cust_id,
		loc_number
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	IF _viewpart.part_active THEN
		RETURN true;
	END IF;
	
	UPDATE part SET (part_active) =
			(true)
	WHERE part_id = _viewpart.part_id;

	INSERT INTO partactivehist (	partactivehist_part_id, 
					partactivehist_new_activestate,
					partactivehist_usr_id,
					partactivehist_orig_item_id,
					partactivehist_orig_rev,
					partactivehist_orig_serialnumber)
		VALUES (		_viewpart.part_id, 
					true,
					_usrId,
					_viewpart.item_id,
					_viewpart.part_rev,
					_viewpart.part_serialnumber)
		RETURNING partactivehist_id INTO _partActiveHistId;

	_message := 	pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || ' made Active.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Activated'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Active History'::TEXT,
					_partActiveHistId,
					_message));

	RETURN true;
END;$_$;


ALTER FUNCTION public.activatepart(text, text, text) OWNER TO admin;

--
-- TOC entry 342 (class 1255 OID 36778)
-- Name: activatesummsubass(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION activatesummsubass(text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	_usrId INTEGER;
	_r RECORD;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('activatesummsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));
	
	PERFORM (SELECT activatepart(	pItemNumber,
					pRevision,
					pSerialNumber));
	
	FOR _r IN
		SELECT *
		FROM summsubass(	pItemNumber,
					pRevision,
					pSerialNumber)
	LOOP
		IF _r.c_item_number IS NOT NULL THEN
			PERFORM (SELECT activatepart(	_r.c_item_number,
							_r.c_part_rev,
							_r.c_part_serialnumber));
		END IF;
	END LOOP;
		  
	RETURN true;
END;$_$;


ALTER FUNCTION public.activatesummsubass(text, text, text) OWNER TO admin;

--
-- TOC entry 328 (class 1255 OID 36779)
-- Name: addcustparam(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addcustparam(text, text, text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pType 			ALIAS FOR $1;
	pParam	 		ALIAS FOR $2;
	pDataType		ALIAS FOR $3;
	_custParam 		RECORD;
	_dataTypeId 		INTEGER;
	_custParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addcustparam'));

	IF pParam IS NULL THEN
		RAISE EXCEPTION 'addcustparam: Custom Parameter Name cannot be null.';
	END IF;

	IF pType != 'r' AND pType != 'p' THEN
		RAISE EXCEPTION 'addcustparam: Custom Parameter must be of Type r or p.';
	END IF;
	
	SELECT 	custparam_id,
		custparam_type, 
		custparam_param,
		custparam_datatype_id,
		datatype_type	
	INTO _custParam
	FROM custparam
	LEFT OUTER JOIN datatype
		ON datatype.datatype_id = custparam.custparam_datatype_id
	WHERE custparam_param = pParam 
	AND custparam_type = pType
	AND custparam_void_timestamp IS NULL;

	_dataTypeId := (SELECT getdatatypeid(pDataType));

	IF _custParam.custparam_id IS NOT NULL THEN
		RAISE EXCEPTION 'Custom Parameter % of Type % already exists with Data Type %.',
			pParam,
			pType,
			_custParam.datatype_type;	
	END IF;

	INSERT INTO custparam(	custparam_type,
				custparam_param,
				custparam_datatype_id)
		VALUES (	pType,
				pParam,
				_dataTypeId)
		RETURNING custparam_id INTO _custParamId;
				
	RETURN _custParamId;
END;$_$;


ALTER FUNCTION public.addcustparam(text, text, text) OWNER TO admin;

--
-- TOC entry 344 (class 1255 OID 36780)
-- Name: addcustparamcombo(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addcustparamcombo(text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pType 			ALIAS FOR $1;
	pParam	 		ALIAS FOR $2;
	pValue			ALIAS FOR $3;
	_custParamCombo		RECORD;
	_custParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addcustparamcombo'));

	IF pParam IS NULL THEN
		RAISE EXCEPTION 'addcustparamcombo: Custom Parameter Name cannot be null.';
	END IF;

	IF pType != 'r' AND pType != 'p' THEN
		RAISE EXCEPTION 'addcustparamcombo: Custom Parameter must be of Type r or p.';
	END IF;

	_custParamId := (SELECT getcustparamid(pType, pParam));
	
	SELECT 	custparamcombo_id,
		custparamcombo_custparam_id, 
		custparamcombo_value,
		custparamcombo_active
	INTO _custParamCombo
	FROM custparamcombo
	WHERE custparamcombo_custparam_id = _custParamId
	AND custparamcombo_value = pValue;

	IF _custParamCombo.custparamcombo_id IS NOT NULL AND _custParamCombo.custparamcombo_active = true THEN
		RETURN true;
	ELSIF _custParamCombo.custparamcombo_id IS NOT NULL AND _custParamCombo.custparamcombo_active = false THEN 
		UPDATE custparamcombo 
		SET custparamcombo_active = true 
		WHERE custparamcombo_custparam_id = _custParamId 
		AND custparamcombo_value = pValue;

		RETURN true;
	END IF;

	INSERT INTO custparamcombo(	custparamcombo_custparam_id, 
					custparamcombo_value)
		VALUES (	_custParamId,
				pValue);
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.addcustparamcombo(text, text, text) OWNER TO admin;

--
-- TOC entry 345 (class 1255 OID 36781)
-- Name: addcustparamlinkitem(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addcustparamlinkitem(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pItemNumber			ALIAS FOR $2;
	_itemCustParamLink		RECORD;
	_custParamId		INTEGER;
	_itemId			INTEGER;

  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addcustparamlinkitem'));

	_custParamId := (SELECT getcustparamid('p', pParam));
	
	_itemId := (SELECT getitemid(pItemNumber));

	SELECT 	itemitemcustparamlink_id,
		itemcustparamlink_custparam_id, 
		itemcustparamlink_item_id,
		itemcustparamlink_recordtype_id,
		itemcustparamlink_active
	INTO _itemCustParamLink
	FROM itemcustparamlink
	WHERE itemcustparamlink_custparam_id = _custParamId
	AND itemcustparamlink_item_id = _itemId;

	IF _itemCustParamLink.itemcustparamlink_id IS NOT NULL AND _itemCustParamLink.itemcustparamlink_active = true THEN
		RETURN true;
	ELSIF _itemCustParamLink.itemcustparamlink_id IS NOT NULL AND _itemCustParamLink.itemcustparamlink_active = false THEN
		UPDATE itemcustparamlink 
		SET itemcustparamlink_active = true 
		WHERE itemcustparamlink_custparam_id = _custParamId 
		AND itemcustparamlink_item_id = _itemId;

		RETURN true;
	END IF;

	INSERT INTO itemcustparamlink(	itemcustparamlink_custparam_id, 
					itemcustparamlink_item_id)
	VALUES (	_custParamId,
			_itemId);
					
	RETURN true;
END;$_$;


ALTER FUNCTION public.addcustparamlinkitem(text, text) OWNER TO admin;

--
-- TOC entry 346 (class 1255 OID 36782)
-- Name: addcustparamlinkrecord(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addcustparamlinkrecord(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pRecordType			ALIAS FOR $2;
	_recordcustparamlink		RECORD;
	_custParamId		INTEGER;
	_recordTypeId			INTEGER;

  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addcustparamlinkrecord'));

	_custParamId := (SELECT getcustparamid('r', pParam));

	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	SELECT 	recordcustparamlink_id,
		recordcustparamlink_custparam_id, 
		recordcustparamlink_item_id,
		recordcustparamlink_recordtype_id,
		recordcustparamlink_active
	INTO _recordcustparamlink
	FROM recordcustparamlink
	WHERE recordcustparamlink_custparam_id = _custParamId
	AND recordcustparamlink_recordtype_id = _recordTypeId;

	IF _recordcustparamlink.recordcustparamlink_id IS NOT NULL AND _recordcustparamlink.recordcustparamlink_active = true THEN
		RETURN true;
	ELSIF _recordcustparamlink.recordcustparamlink_id IS NOT NULL AND _recordcustparamlink.recordcustparamlink_active = false THEN
		UPDATE recordcustparamlink 
		SET recordcustparamlink_active = true 
		WHERE recordcustparamlink_custparam_id = _custParamId 
		AND recordcustparamlink_recordtype_id = _recordTypeId;

		RETURN true;
	END IF;

	INSERT INTO recordcustparamlink(	recordcustparamlink_custparam_id, 
					recordcustparamlink_recordtype_id)
	VALUES (	_custParamId,
			_recordTypeId);
					
	RETURN true;
END;$_$;


ALTER FUNCTION public.addcustparamlinkrecord(text, text) OWNER TO admin;

--
-- TOC entry 343 (class 1255 OID 36783)
-- Name: addcustparamvaluepart(text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addcustparamvaluepart(text, text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pItemNumber		ALIAS FOR $2;
	pRevision		ALIAS FOR $3;
	pSerialNumber		ALIAS FOR $4;
	pValue			ALIAS FOR $5;
	_custParamValue		TEXT;
	_partId 		INTEGER;
	_custParamId		INTEGER;
	_r			RECORD;
	_message		TEXT;
	_action			TEXT;
	_partCustParamValueId	INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addcustparamvaluepart'));

	_custParamId := (SELECT getcustparamid('p', pParam));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	_custParamValue := (SELECT getcustparamvaluepart(pParam, pItemNumber, pRevision, pSerialNumber));

	IF _custParamValue = pValue THEN
		RETURN true;
	END IF;

	

	IF pValue IS NULL THEN
		PERFORM (SELECT removecustparamvaluepart(pParam, pItemNumber, pRevision, pSerialNumber));
		RETURN true;
	ELSE
		PERFORM (SELECT removecustparamvaluepart(pParam, pItemNumber, pRevision, pSerialNumber, false));
	END IF;
	
	INSERT INTO partcustparamvalue
		(partcustparamvalue_custparam_id,
		 partcustparamvalue_part_id,
		 partcustparamvalue_value)
	VALUES	(_custParamId,
		 _partId,
		 pValue)
	RETURNING partcustparamvalue_id INTO _partCustParamValueId;

	IF _custParamValue IS NULL THEN
		_message := 'Custom Parameter ' ||
			pParam || ' added with value ' ||
			pValue || ' for ' ||
			pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || '.';
		_action := 'Custom Parameter Added';
		
	ELSE
		_message := 'Custom Parameter ' ||
			pParam || ' value modified from ' ||
			_custParamValue || ' to ' ||
			pValue || ' for ' ||
			pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || '.';
		_action := 'Custom Parameter Modified';
	END IF;

	PERFORM (SELECT enterpartlog(	'Custom Parameter'::TEXT, 
						_action,
						pItemNumber,
						pRevision,
						pSerialNumber,
						'Part Custom Parameter Value History'::TEXT,
						_partCustParamValueId,
						_message));
						
	RETURN true;
END;$_$;


ALTER FUNCTION public.addcustparamvaluepart(text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 349 (class 1255 OID 36784)
-- Name: addcustparamvaluerecord(text, text, integer, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addcustparamvaluerecord(text, text, integer, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pRecordType		ALIAS FOR $2;
	pRecordId		ALIAS FOR $3;
	pValue			ALIAS FOR $4;
	_custParamValue		TEXT;
	_recordTypeId 		INTEGER;
	_custParamId		INTEGER;
	_r			RECORD;
	_message		TEXT;
	_action			TEXT;
	_recordCustParamValueId INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addcustparamvaluerecord'));

	IF pRecordId IS NULL THEN
		RAISE EXCEPTION 'addcustparamvaluerecord: Record ID cannot be null.';
	END IF;	

	_custParamId := (SELECT getcustparamid('r', pParam));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	_custParamValue := (SELECT getcustparamvaluerecord(pParam, pRecordType, pRecordId));

	IF _custParamValue = pValue THEN
		RETURN true;
	END IF;

	IF pValue IS NULL THEN
		PERFORM (SELECT removecustparamvaluerecord(pParam, pRecordType, pRecordId));
		RETURN true;
	ELSE
		PERFORM (SELECT removecustparamvaluerecord(pParam, pRecordType, pRecordId, false));
	END IF;

	INSERT INTO recordcustparamvalue
		(recordcustparamvalue_custparam_id,
		 recordcustparamvalue_recordtype_id,
		 recordcustparamvalue_record_id,
		 recordcustparamvalue_value)
	VALUES	(_custParamId,
		 _recordTypeId,
		 pRecordId,
		 pValue)
	RETURNING recordcustparamvalue_id INTO _recordCustParamValueId;

	IF _custParamValue IS NULL THEN
		_message := 'Custom Parameter ' ||
			pParam || ' added with value ' ||
			pValue || ' for ' ||
			pRecordType || ' with ID ' ||  
			pRecordId || '.';
		_action := 'Custom Parameter Added';
		
	ELSE
		_message := 'Custom Parameter ' ||
			pParam || ' value modified from ' ||
			_custParamValue || ' to ' ||
			pValue || ' for ' ||
			pRecordType || ' with ID ' ||  
			pRecordId || '.';
		_action := 'Custom Parameter Modified';
	END IF;

	PERFORM (SELECT enterrecordlog(	'Custom Parameter'::TEXT, 
						_action,
						pRecordType,
						pRecordId,
						'Record Custom Parameter Value History'::TEXT,
						_recordCustParamValueId,
						_message));
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.addcustparamvaluerecord(text, text, integer, text) OWNER TO admin;

--
-- TOC entry 350 (class 1255 OID 36785)
-- Name: adddoclinkpart(text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION adddoclinkpart(text, text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pDocType 		ALIAS FOR $1;
	pDocNumber		ALIAS FOR $2;
	pItemNumber		ALIAS FOR $3;
	pRevision		ALIAS FOR $4;
	pSerialNumber		ALIAS FOR $5;
	_partId 		INTEGER;
	_docTypeId		INTEGER;
	_message		TEXT;
	_checkPartDocLinkId	INTEGER;
	_partDocLinkId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('adddoclinkpart'));

	_docTypeId := (SELECT getdoctypeid(pDocType));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	_checkPartDocLinkId := (SELECT partdoclink_id
				FROM viewpartdoclink
				WHERE 	doctype_name = pDocType
				AND	partdoclink_docnumber = pDocNumber
				AND 	part_id = _partId
				AND	partdoclink_void_timestamp IS NULL);

	IF _checkPartDocLinkId IS NOT NULL THEN
		RETURN true;
	END IF;
	
	INSERT INTO partdoclink
		(partdoclink_doctype_id,
		 partdoclink_part_id,
		 partdoclink_docnumber)
	VALUES	(_docTypeId,
		 _partId,
		 pDocNumber)
	RETURNING partdoclink_id INTO _partDocLinkId;

	_message := 'Document Link ' ||
		pDocType || ' added with Document Number ' ||
		pDocNumber || ' for ' ||
		pItemNumber || ' ' ||  
		pRevision || ' ' || 
		pSerialNumber || '.';

	PERFORM (SELECT enterpartlog(	'Document Link'::TEXT, 
					'Document Link Added'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Part Document Link History'::TEXT,
					_partDocLinkId,
					_message));
						
	RETURN true;
END;$_$;


ALTER FUNCTION public.adddoclinkpart(text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 355 (class 1255 OID 36786)
-- Name: adddoclinkrecord(text, text, text, integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION adddoclinkrecord(text, text, text, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pDocType 		ALIAS FOR $1;
	pDocNumber		ALIAS FOR $2;
	pRecordType		ALIAS FOR $3;
	pRecordId		ALIAS FOR $4;
	_recordTypeId 		INTEGER;
	_docTypeId		INTEGER;
	_message		TEXT;
	_checkRecordDocLinkId	INTEGER;
	_recordDocLinkId	INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('adddoclinkpart'));

	_docTypeId := (SELECT getdoctypeid(pDocType));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	_checkRecordDocLinkId := (SELECT recorddoclink_id
				FROM viewrecorddoclink
				WHERE 	doctype_name = pDocType
				AND	recorddoclink_docnumber = pDocNumber
				AND 	recordtype_name = pRecordType
				AND 	recorddoclink_record_id = pRecordId
				AND	recorddoclink_void_timestamp IS NULL);

	IF _checkRecordDocLinkId IS NOT NULL THEN
		RETURN true;
	END IF;
	
	INSERT INTO recorddoclink
		(recorddoclink_doctype_id,
		 recorddoclink_recordtype_id,
		 recorddoclink_record_id,
		 recorddoclink_docnumber)
	VALUES	(_docTypeId,
		 _recordTypeId,
		 pRecordId,
		 pDocNumber)
	RETURNING recorddoclink_id INTO _recordDocLinkId;

	_message := 'Document Link ' ||
		pDocType || ' added with Document Number ' ||
		pDocNumber || ' for ' ||
		pRecordType || ' with ID ' ||  
		pRecordId || '.';

	PERFORM (SELECT enterrecordlog(	'Document Link'::TEXT, 
					'Document Link Added'::TEXT,
					pRecordType,
					pRecordId,
					'Record Document Link History'::TEXT,
					_recordDocLinkId,
					_message));
						
	RETURN true;
END;$_$;


ALTER FUNCTION public.adddoclinkrecord(text, text, text, integer) OWNER TO admin;

--
-- TOC entry 356 (class 1255 OID 36787)
-- Name: addfilepart(text, text, text, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addfilepart(text, text, text, text, text, text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
  pItemNumber ALIAS FOR $1;
  pRevision ALIAS FOR $2;
  pSerialNumber ALIAS FOR $3;
  pFileName ALIAS FOR $4;
  pFileType ALIAS FOR $5;
  pHexData	ALIAS FOR $6;
  pHexThumbnail ALIAS FOR $7;
  pCustFileType ALIAS FOR $8;
  _partId	INTEGER;
  _fileTypeId	INTEGER;
  _custFileTypeId	INTEGER;
  _partFileDataId INTEGER;
  _partFileThumbnailId INTEGER;
  _partFileId INTEGER;
  _message TEXT;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addfilepart'));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));
	_fileTypeId := (SELECT getfiletypeid(pFileType));

	IF pCustFileType IS NOT NULL THEN
		_custFileTypeId := (SELECT getcustfiletypeid(pCustFileType));
	ELSE
		_custFileTypeId := null;
	END IF;

	SELECT partfile_id
	INTO _partFileId
	FROM partfile
	WHERE partfile_filename = pFileName
	AND partfile_part_id = _partId
	AND partfile_void_timestamp IS NULL;

	IF _partFileId IS NOT NULL THEN
		RAISE EXCEPTION 'addfilepart: File with Name % and File Type % already exists for Item Number % Revision % Serial Number %.', 
			pFileName,
			pFileType,
			pItemNumber,
			pRevision,
			pSerialNumber;
	END IF;

	INSERT INTO partfiledata
	(partfiledata_data) VALUES (decode(pHexData, $$hex$$))
	RETURNING partfiledata_id INTO _partFileDataId;

	IF pHexThumbnail IS NOT NULL THEN
		INSERT INTO partfilethumbnail
		(partfilethumbnail_data) VALUES (decode(pHexThumbnail, $$hex$$))
		RETURNING partfilethumbnail_id INTO _partFileThumbnailId;
	ELSE
		_partFileThumbnailId := null;
	END IF;

	INSERT INTO partfile
		(partfile_part_id,
		 partfile_filetype_id,
		 partfile_filename,
		 partfile_partfiledata_id,
		 partfile_partfilethumbnail_id,
		 partfile_custfiletype_id)
	VALUES	(_partId,
		 _fileTypeId,
		 pFileName,
		 _partFileDataId,
		 _partFileThumbnailId,
		 _custFileTypeId)
	RETURNING partfile_id INTO _partFileId;

	IF pCustFileType IS NOT NULL THEN
		_message := 	'File ' || 
				pFileName || ' of File Type ' || 
				pFileType || ' with Custom File Type ' || 
				pCustFileType || ' attached to Part ' || 
				pItemNumber || ' ' || 
				pRevision || ' ' || 
				pSerialNumber || '.';
	ELSE
		_message := 	'File ' || 
				pFileName || ' of File Type ' || 
				pFileType || ' attached to Part ' || 
				pItemNumber || ' ' || 
				pRevision || ' ' || 
				pSerialNumber || '.';
	END IF;
	
	PERFORM (SELECT enterpartlog(	'File Attachement'::TEXT, 
					'File Attached'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Part File Attachement History'::TEXT,
					_partFileId,
					_message));

	RETURN true;
END$_$;


ALTER FUNCTION public.addfilepart(text, text, text, text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 357 (class 1255 OID 36788)
-- Name: addfilerecord(text, integer, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addfilerecord(text, integer, text, text, text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
  pRecordType ALIAS FOR $1;
  pRecordId ALIAS FOR $2;
  pFileName ALIAS FOR $3;
  pFileType ALIAS FOR $4;
  pHexData	ALIAS FOR $5;
  pHexThumbnail ALIAS FOR $6;
  pCustFileType ALIAS FOR $7;
  _recordTypeId	INTEGER;
  _fileTypeId	INTEGER;
  _recordFileDataId INTEGER;
  _recordFileThumbnailId INTEGER;
  _recordFileId INTEGER;
  _custFileTypeId	INTEGER;
  _message TEXT;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addfilerecord'));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));
	_fileTypeId := (SELECT getfiletypeid(pFileType));

	IF pCustFileType IS NOT NULL THEN
		_custFileTypeId := (SELECT getcustfiletypeid(pCustFileType));
	ELSE
		_custFileTypeId := null;
	END IF;
	
	SELECT recordfile_id
	INTO _recordFileId
	FROM recordfile
	WHERE recordfile_filename = pFileName
	AND recordfile_recordtype_id = _recordTypeId
	AND recordfile_record_id = pRecordId
	AND recordfile_void_timestamp IS NULL;

	IF _recordFileId IS NOT NULL THEN
		RAISE EXCEPTION 'addfilerecord: File with Name % and File Type % already exists for Record Type % with ID %.', 
			pFileName,
			pFileType,
			pRecordType,
			pRecordId;
	END IF;

	INSERT INTO recordfiledata
	(recordfiledata_data) VALUES (decode(pHexData, $$hex$$))
	RETURNING recordfiledata_id INTO _recordFileDataId;

	IF pHexThumbnail IS NOT NULL THEN
		INSERT INTO recordfilethumbnail
		(recordfilethumbnail_data) VALUES (decode(pHexThumbnail, $$hex$$))
		RETURNING recordfilethumbnail_id INTO _recordFileThumbnailId;
	ELSE
		_recordFileThumbnailId := null;
	END IF;

	INSERT INTO recordfile
		(recordfile_recordtype_id,
		 recordfile_record_id,
		 recordfile_filetype_id,
		 recordfile_filename,
		 recordfile_recordfiledata_id,
		 recordfile_recordfilethumbnail_id,
		 recordfile_custfiletype_id)
	VALUES	(_recordTypeId,
		 pRecordId,
		 _fileTypeId,
		 pFileName,
		 _recordFileDataId,
		 _recordFileThumbnailId,
		 _custFileTypeId)
	RETURNING recordfile_id INTO _recordFileId;

	IF pCustFileType IS NOT NULL THEN
		_message := 	'File ' || 
				pFileName || ' of File Type ' || 
				pFileType || ' with Custom File Type ' || 
				pCustFileType || ' attached to Record Type ' || 
				pRecordType || ' with ID ' || 
				pRecordId || '.';
	ELSE
		_message := 	'File ' || 
				pFileName || ' of File Type ' || 
				pFileType || ' attached to Record Type ' || 
				pRecordType || ' with ID ' || 
				pRecordId || '.';
	END IF;

	PERFORM (SELECT enterrecordlog(	'File Attachement'::TEXT, 
					'File Attached'::TEXT,
					pRecordType,
					pRecordId,
					'Record File Attachement History'::TEXT,
					_recordFileId,
					_message));

	RETURN true;
END$_$;


ALTER FUNCTION public.addfilerecord(text, integer, text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 347 (class 1255 OID 36789)
-- Name: addrolepriv(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addrolepriv(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pPriv 			ALIAS FOR $1;
	pRole 		ALIAS FOR $2;
	_rolePriv 		RECORD;
	_roleId 			INTEGER;
	_privId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addrolepriv'));
	_roleId := (SELECT getroleid(pRole));
	_privId := (SELECT getprivid(pPriv));
	
	SELECT 	rolepriv_id,
		rolepriv_priv_id, 
		rolepriv_role_id 	
	INTO _rolePriv
	FROM rolepriv
	WHERE rolepriv_priv_id = _privId 
	AND rolepriv_role_id = _roleId;

	IF _rolePriv.rolepriv_id IS NOT NULL THEN
		RETURN true;
	END IF;

	INSERT INTO rolepriv (	rolepriv_priv_id,
				rolepriv_role_id)
		VALUES (	_privId,
				_roleId);
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.addrolepriv(text, text) OWNER TO admin;

--
-- TOC entry 348 (class 1255 OID 36790)
-- Name: addroleprivmodule(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addroleprivmodule(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pModule			ALIAS FOR $1;
	pRole 		ALIAS FOR $2;
	_r			RECORD;
	_moduleId 		INTEGER;
	_roleId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addroleprivmodule'));
	_moduleId := (SELECT getmoduleid(pModule));
	_roleId := (SELECT getroleid(pRole));

	FOR _r IN
		SELECT priv_name
		FROM priv
		WHERE priv_module_id = _moduleId
	LOOP
		IF _r.priv_name IS NOT NULL THEN
			PERFORM (SELECT addrolepriv(	_r.priv_name,
							pRole));
		END IF;
	END LOOP;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.addroleprivmodule(text, text) OWNER TO admin;

--
-- TOC entry 362 (class 1255 OID 36791)
-- Name: addusrpriv(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addusrpriv(text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pPriv 			ALIAS FOR $1;
	pUserName 		ALIAS FOR $2;
	_usrPriv 		RECORD;
	_usrId 			INTEGER;
	_privId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addusrpriv'));
	_usrId := (SELECT getusrid(pUserName));
	_privId := (SELECT getprivid(pPriv));
	
	SELECT 	usrpriv_id,
		usrpriv_priv_id, 
		usrpriv_usr_id 	
	INTO _usrPriv
	FROM usrpriv
	WHERE usrpriv_priv_id = _privId 
	AND usrpriv_usr_id = _usrId;

	IF _usrPriv.usrpriv_id IS NOT NULL THEN
		RETURN true;
	END IF;

	INSERT INTO usrpriv (	usrpriv_priv_id,
				usrpriv_usr_id)
		VALUES (	_privId,
				_usrId);
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.addusrpriv(text, text) OWNER TO admin;

--
-- TOC entry 363 (class 1255 OID 36792)
-- Name: addusrprivmodule(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addusrprivmodule(text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pModule			ALIAS FOR $1;
	pUserName 		ALIAS FOR $2;
	_r			RECORD;
	_moduleId 		INTEGER;
	_usrId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addusrprivmodule'));
	_moduleId := (SELECT getmoduleid(pModule));
	_usrId := (SELECT getusrid(pUserName));

	FOR _r IN
		SELECT priv_name
		FROM priv
		WHERE priv_module_id = _moduleId
	LOOP
		IF _r.priv_name IS NOT NULL THEN
			PERFORM (SELECT addusrpriv(	_r.priv_name,
							pUserName));
		END IF;
	END LOOP;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.addusrprivmodule(text, text) OWNER TO admin;

--
-- TOC entry 364 (class 1255 OID 36793)
-- Name: addusrrole(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addusrrole(text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pRole			ALIAS FOR $1;
	pUserName 		ALIAS FOR $2;
	_usrRole 		RECORD;
	_roleId 		INTEGER;
	_usrId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('addusrrole'));
	_roleId := (SELECT getroleid(pRole));
	_usrId := (SELECT getusrid(pUserName));
	
	SELECT 	usrrole_id,
		usrrole_usr_id, 
		usrrole_role_id 	
	INTO _usrRole
	FROM usrrole
	WHERE usrrole_usr_id = _usrId 
	AND usrrole_role_id = _roleId;

	IF _usrRole.usrrole_id IS NOT NULL THEN
		RETURN true;
	END IF;

	INSERT INTO usrrole (	usrrole_usr_id,
				usrrole_role_id)
		VALUES (	_usrId,
				_roleId);
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.addusrrole(text, text) OWNER TO admin;

--
-- TOC entry 365 (class 1255 OID 36794)
-- Name: addwatcherpart(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addwatcherpart(text, text, text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber		ALIAS FOR $1;
	pRevision		ALIAS FOR $2;
	pSerialNumber		ALIAS FOR $3;
	pUser			ALIAS FOR $4;
	_partId 		INTEGER;
	_usrId			INTEGER;
	_partWatcherId		INTEGER;
  
BEGIN
	_usrId := (SELECT getusrid(pUser));
	
	PERFORM (SELECT checkpriv('addwatcherpart'));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	_partWatcherId := 	(SELECT partwatcher_id 
				 FROM partwatcher
				 WHERE partwatcher_part_id = _partId
				 AND partwatcher_usr_id = _usrId);

	IF _partWatcherId IS NOT NULL THEN
		RETURN true;
	END IF;
	
	INSERT INTO partwatcher
		(partwatcher_part_id,
		 partwatcher_usr_id)
	VALUES	(_partId,
		 _usrId);
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.addwatcherpart(text, text, text, text) OWNER TO admin;

--
-- TOC entry 368 (class 1255 OID 36795)
-- Name: addwatcherrecord(text, integer, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION addwatcherrecord(text, integer, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pRecordType		ALIAS FOR $1;
	pRecordId		ALIAS FOR $2;
	pUser			ALIAS FOR $3;
	_recordTypeId 		INTEGER;
	_usrId			INTEGER;
	_recordWatcherId		INTEGER;
  
BEGIN
	_usrId := (SELECT getusrid(pUser));
	
	PERFORM (SELECT checkpriv('addwatcherrecord'));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	_recordWatcherId := 	(SELECT recordwatcher_id 
				 FROM recordwatcher
				 WHERE recordwatcher_recordtype_id = _recordTypeId
				 AND recordwatcher_record_id = pRecordId
				 AND recordwatcher_usr_id = _usrId);

	IF _recordWatcherId IS NOT NULL THEN
		RETURN true;
	END IF;
	
	INSERT INTO recordwatcher
		(recordwatcher_recordtype_id, 
		 recordwatcher_record_id, 
		 recordwatcher_usr_id)
	VALUES 	(_recordTypeId,
		 pRecordId, 
		 _usrId);
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.addwatcherrecord(text, integer, text) OWNER TO admin;

--
-- TOC entry 369 (class 1255 OID 36796)
-- Name: allocpart(text, text, text, text, text, text, text, integer, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION allocpart(text, text, text, text, text, text, text DEFAULT 'AMDA007'::text, integer DEFAULT 0, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParentItemNumber ALIAS FOR $1;
	pParentRevision ALIAS FOR $2;
	pParentSerialNumber ALIAS FOR $3;
	pItemNumber ALIAS FOR $4;
	pRevision ALIAS FOR $5;
	pSerialNumber ALIAS FOR $6;
	pAllocCode ALIAS FOR $7;	
	pAllocPos ALIAS FOR $8;
	pLine	ALIAS FOR $9;
	pStation ALIAS FOR $10;
	_parentviewpart RECORD;
	_viewpart RECORD;
	_allocCheck RECORD;
	_locationId INTEGER;
	_partStateId INTEGER;
	_deallocCheck BOOLEAN;
	_usrId INTEGER;
	_partAllocHistId INTEGER;
	_message TEXT;
	_r RECORD;
	_lineId INTEGER;
	_stationId	INTEGER;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('allocpart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, 'Child'));
	PERFORM (SELECT validatepart(pParentItemNumber, pParentRevision, pParentSerialNumber, 'Parent'));

	IF pStation IS NULL THEN
		_stationId := null;
	ELSE
		_stationId := (SELECT getstationid(pStation));
	END IF;

	IF pLine IS NULL THEN
		_lineId := null;
	ELSE
		_lineId := (SELECT getstationid(pStation));
	END IF;

	--Ensure Child is Valid
	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_rev,
		part_serialnumber, 
		part_sequencenumber,
		parent_part_id,
		parent_item_number,
		parent_part_rev,
		parent_part_serialnumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	--Ensure Parent is Valid
	SELECT 	part_id, 
		item_id, 
		item_number,
		cust_number,
		loc_number,
		partstate_name,
		part_rev,
		part_serialnumber, 
		part_sequencenumber,
		parent_part_id
	INTO _parentviewpart
	FROM viewpart
	WHERE item_number = pParentItemNumber 
	AND part_serialnumber = pParentSerialNumber 
	AND part_rev = pParentRevision;
	
	IF _parentviewpart.part_id = _viewpart.part_id THEN
		RAISE EXCEPTION 'allocpart: Parent Item Number % Revision % Serial Number % cannot be allocated to itself.', 
			pParentItemNumber, 
			pParentRevision, 
			pParentSerialNumber;
	END IF;

	SELECT *
	INTO _r
	FROM summsubass(	pItemNumber,
				pRevision,
				pSerialNumber)
	WHERE c_item_number = pParentItemNumber
	AND c_part_rev = pParentRevision
	AND c_part_serialnumber = pParentSerialNumber;

	IF _r.t_item_number IS NOT NULL THEN
		RAISE EXCEPTION 'allocpart: Parent Item Number % Revision % Serial Number % exists within Child Item Number % Revision % Serial Number % summarized subassembly.', 
			pParentItemNumber, 
			pParentRevision, 
			pParentSerialNumber,
			pItemNumber,
			pRevision,
			pSerialNumber;
	END IF;

	SELECT *
	INTO _allocCheck
	FROM checkalloc(pParentItemNumber, pParentRevision, pParentSerialNumber, pItemNumber, pRevision, pSerialNumber, pAllocPos);

	IF _allocCheck.oCode != pAllocCode THEN
		RAISE EXCEPTION 'allocpart: Allocation Code % returned by checkalloc does not match expected Allocation Code %.',
			_allocCheck.oCode,
			pAllocCode;
	END IF;

	IF (_allocCheck.oCode = pAllocCode) AND (pAllocCode = 'AMDA001') THEN
		_deallocCheck := (SELECT deallocpart(_viewpart.parent_item_number, _viewpart.parent_part_rev, _viewpart.parent_part_serialnumber, pItemNumber, pRevision, pSerialNumber, 'AMDD002', pLine, pStation));
		IF _deallocCheck = false THEN
			RAISE EXCEPTION 'allocpart: Could not deallocated Child Item Number % Revision % Serial Number % from its Parent Item Number % Revision % Serial Number %.',
				pItemNumber, 
				pRevision, 
				pSerialNumber, 
				_viewpart.parent_item_number, 
				_viewpart.parent_part_rev, 
				_viewpart.parent_part_serialnumber;
		END IF;
	ELSIF (_allocCheck.oCode = pAllocCode) AND (pAllocCode = 'AMDA002') THEN
		RETURN true; 
	ELSIF (_allocCheck.oCode = pAllocCode) AND (pAllocCode = 'AMDA003') THEN
		-- Log as allocation exception with code.
	ELSIF (_allocCheck.oCode = pAllocCode) AND (pAllocCode = 'AMDA004') THEN
		-- Log as allocation exception with code.
	ELSIF (_allocCheck.oCode = pAllocCode) AND (pAllocCode = 'AMDA005') THEN
		-- Log as allocation exception with code.
	ELSIF (_allocCheck.oCode = pAllocCode) AND (pAllocCode = 'AMDA006') THEN
		-- Log as allocation exception with code.
	END IF;

	UPDATE 	part
	SET 	(part_parent_part_id,
		 part_allocpos) =
		(_parentviewpart.part_id,
		 pAllocPos)
	WHERE part_id = _viewpart.part_id;

	IF _parentviewpart.loc_number IS NOT NULL THEN
		PERFORM (SELECT changelocsummsubass(pItemNumber, pRevision, pSerialNumber, _parentviewpart.loc_number));
	END IF;
	
	--IF _parentviewpart.cust_number IS NOT NULL THEN
		--PERFORM (SELECT changecustpart(pItemNumber, pRevision, pSerialNumber, _parentviewpart.cust_number));
	--END IF;
	
	INSERT INTO partallochist
		(partallochist_parent_part_id,
		 partallochist_child_part_id,
		 partallochist_allocpos,
		 partallochist_alloctype,
		 partallochist_alloccode,
		 partallochist_usr_id,
		 partallochist_parent_orig_item_id,
		 partallochist_parent_orig_rev,
		 partallochist_parent_orig_serialnumber,
		 partallochist_child_orig_item_id,
		 partallochist_child_orig_rev,
		 partallochist_child_orig_serialnumber,
		 partallochist_line_id,
		 partallochist_station_id)
	VALUES	(_parentviewpart.part_id,
		 _viewpart.part_id,
		 pAllocPos,
		 'a',
		 pAllocCode,
		 _usrId,
		 _parentviewpart.item_id,
		 _parentviewpart.part_rev,
		 _parentviewpart.part_serialnumber,
		 _viewpart.item_id,
		 _viewpart.part_rev,
		 _viewpart.part_serialnumber,
		 _lineId,
		 _stationId)
	RETURNING partallochist_id INTO _partAllocHistId;
	
	_message := 	pItemNumber || ' ' || 
			pRevision || ' ' || 
			pSerialNumber || ' allocated to ' || 
			pParentItemNumber || ' ' || 
			pParentRevision || ' ' || 
			pParentSerialNumber || ' with allocation code ' ||
			pAllocCode || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Allocated'::TEXT,
					pParentItemNumber,
					pParentRevision,
					pParentSerialNumber,
					'Allocation History'::TEXT,
					_partAllocHistId,
					_message,
					null,
					null,
					pLine,
					pStation));

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Allocated'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Allocation History'::TEXT,
					_partAllocHistId,
					_message,
					null,
					null,
					pLine,
					pStation));

	PERFORM (SELECT changestatesummsubass(pItemNumber, pRevision, pSerialNumber, _parentviewpart.partstate_name, true, true));

	RETURN true;
END;$_$;


ALTER FUNCTION public.allocpart(text, text, text, text, text, text, text, integer, text, text) OWNER TO admin;

--
-- TOC entry 370 (class 1255 OID 36799)
-- Name: changecustparam(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION changecustparam(text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pType 			ALIAS FOR $1;
	pParam	 		ALIAS FOR $2;
	pNewParam		ALIAS FOR $3;
	pNewDataType		ALIAS FOR $4;
	_dataTypeId		INTEGER;
	_custParam 		RECORD;
	_newCustParam 		RECORD;
	_custParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('changecustparam'));

	IF pParam IS NULL THEN
		RAISE EXCEPTION 'changecustparam: Custom Parameter Name cannot be null.';
	END IF;

	IF pType != 'r' AND pType != 'p' THEN
		RAISE EXCEPTION 'changecustparam: Custom Parameter must be of Type r or p.';
	END IF;
	
	SELECT 	custparam_id,
		custparam_type, 
		custparam_param,
		custparam_datatype_id,
		datatype_type 	
	INTO _custParam
	FROM custparam
	LEFT OUTER JOIN datatype
		ON datatype.datatype_id = custparam.custparam_datatype_id
	WHERE custparam_param = pParam 
	AND custparam_type = pType
	AND custparam_void_timestamp IS NULL;

	IF _custParam.custparam_id IS NULL THEN
		RAISE EXCEPTION 'Custom Parameter % of Type % does not exist.',
			pParam,
			pType;
	END IF;

	SELECT 	custparam_id,
		custparam_type, 
		custparam_param,
		custparam_datatype_id,
		datatype_type 	
	INTO _newCustParam
	FROM custparam
	LEFT OUTER JOIN datatype
		ON datatype.datatype_id = custparam.custparam_datatype_id
	WHERE custparam_param = pNewParam 
	AND custparam_type = pType
	AND custparam_void_timestamp IS NULL;

	IF _newCustParam.custparam_id IS NOT NULL THEN
		RAISE EXCEPTION 'New Custom Parameter % of Type % already exists.',
			pParam,
			pType;
	END IF;

	IF pParam != pNewParam THEN
		UPDATE 	custparam
		SET 	(custparam_param)
		= 	(pNewParam)
		WHERE 	custparam_id = _custParam.custparam_id;
	END IF;
	
	IF pNewDataType != _custParam.datatype_type THEN
		PERFORM (SELECT removecustparam(pType, pNewParam));
		_custParamId := (SELECT addcustparam(pType, pNewParam, pNewDataType));
		PERFORM (SELECT transfercustparamlink(_custParam.custparam_id, _custParamId));
		PERFORM (SELECT transfercustparamcombo(_custParam.custparam_id, _custParamId));
	END IF;
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.changecustparam(text, text, text, text) OWNER TO admin;

--
-- TOC entry 371 (class 1255 OID 36800)
-- Name: changecustpart(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION changecustpart(text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	pCustNumber ALIAS FOR $4;
	_viewpart RECORD;
	_item RECORD;
	_partId INTEGER;
	_usrId INTEGER;
	_custId INTEGER;
	_custHistId INTEGER;
	_message TEXT;
	_r RECORD;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('changecustpart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));

	SELECT 	part_id, 
		item_id, 
		item_number,
		part_rev, 
		part_serialnumber, 
		part_sequencenumber,
		part_cust_id,
		cust_number,
		loc_number
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	IF pCustNumber IS NOT NULL THEN
		_custId := (SELECT getcustid(pCustNumber));
	ELSE
		_custId := null;
	END IF;

	IF _custId = _viewpart.part_cust_id THEN
		RETURN true;
	ELSIF _custId IS NULL AND _viewpart.part_cust_id IS NULL THEN
		RETURN true;
	END IF;

	UPDATE part SET (part_cust_id) =
			(_custId)
	WHERE part_id = _viewpart.part_id;

	INSERT INTO custhist (	custhist_part_id, 
				 custhist_start_cust_id, 
				 custhist_end_cust_id,
				 custhist_usr_id,
				 custhist_orig_item_id,
				 custhist_orig_rev,
				 custhist_orig_serialnumber)
		VALUES (	_viewpart.part_id, 
				_viewpart.part_cust_id, 
				_custId,
				_usrId,
				_viewpart.item_id,
				_viewpart.part_rev,
				_viewpart.part_serialnumber)
		RETURNING custhist_id INTO _custHistId;

	IF _viewpart.cust_number IS NULL THEN
		_message := 	pItemNumber || ' ' ||  
				pRevision || ' ' || 
				pSerialNumber || ' Customer changed from <null> to ' ||
				pCustNumber || '.';
	ELSIF _custId IS NULL THEN
		_message := 	pItemNumber || ' ' ||  
				pRevision || ' ' || 
				pSerialNumber || ' Customer changed from ' || 
				_viewpart.cust_number || ' to <null>.';
	ELSE
		_message := 	pItemNumber || ' ' ||  
				pRevision || ' ' || 
				pSerialNumber || ' Customer changed from ' ||
				_viewpart.cust_number || ' to ' ||
				pCustNumber || '.';
	END IF;

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Customer Changed'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Customer History'::TEXT,
					_custHistId,
					_message));
		  
	RETURN true;
END;$_$;


ALTER FUNCTION public.changecustpart(text, text, text, text) OWNER TO admin;

--
-- TOC entry 372 (class 1255 OID 36801)
-- Name: changecustsummsubass(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION changecustsummsubass(text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	pCustNumber ALIAS FOR $4;
	_usrId INTEGER;
	_r RECORD;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('changecustsummsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));

	PERFORM (SELECT changecustpart(	pItemNumber,
					pRevision,
					pSerialNumber,
					pCustNumber));
	
	FOR _r IN
		SELECT *
		FROM summsubass(	pItemNumber,
					pRevision,
					pSerialNumber)
	LOOP
		IF _r.c_item_number IS NOT NULL THEN
			PERFORM (SELECT changecustpart(	_r.c_item_number,
							_r.c_part_rev,
							_r.c_part_serialnumber,
							pCustNumber));
		END IF;
	END LOOP;
		  
	RETURN true;
END;$_$;


ALTER FUNCTION public.changecustsummsubass(text, text, text, text) OWNER TO admin;

--
-- TOC entry 373 (class 1255 OID 36802)
-- Name: changelocpart(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION changelocpart(text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	pLocNumber ALIAS FOR $4;
	_viewpart RECORD;
	_item RECORD;
	_partId INTEGER;
	_usrId INTEGER;
	_locId INTEGER;
	_locHistId INTEGER;
	_message TEXT;
	_r RECORD;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('changelocpart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));
	
	SELECT 	part_id, 
		item_id, 
		item_number,
		part_rev, 
		part_serialnumber, 
		part_sequencenumber,
		part_loc_id,
		loc_number
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;
	
	_locId := (SELECT getlocid(pLocNumber));

	IF _locId = _viewpart.part_loc_id THEN
		RETURN true;
	END IF;

	UPDATE part SET (part_loc_id) =
			(_locId)
	WHERE part_id = _viewpart.part_id;

	INSERT INTO lochist (	lochist_part_id, 
				lochist_start_loc_id, 
				lochist_end_loc_id,
				lochist_usr_id,
				lochist_orig_item_id,
				lochist_orig_rev,
				lochist_orig_serialnumber)
		VALUES (	_viewpart.part_id, 
				_viewpart.part_loc_id, 
				_locId,
				_usrId,
				_viewpart.item_id,
				_viewpart.part_rev,
				_viewpart.part_serialnumber)
		RETURNING lochist_id INTO _locHistId;

	_message := 	pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || ' Location changed from ' ||
			_viewpart.loc_number || ' to ' ||
			pLocNumber || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Location Changed'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Location History'::TEXT,
					_locHistId,
					_message));
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.changelocpart(text, text, text, text) OWNER TO admin;

--
-- TOC entry 374 (class 1255 OID 36803)
-- Name: changelocsummsubass(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION changelocsummsubass(text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	pLocNumber ALIAS FOR $4;
	_usrId INTEGER;
	_r RECORD;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('changelocsummsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));
	
	PERFORM (SELECT changelocpart(	pItemNumber,
					pRevision,
					pSerialNumber,
					pLocNumber));
	
	FOR _r IN
		SELECT *
		FROM summsubass(	pItemNumber,
					pRevision,
					pSerialNumber)
	LOOP
		IF _r.c_item_number IS NOT NULL THEN
			PERFORM (SELECT changelocpart(	_r.c_item_number,
							_r.c_part_rev,
							_r.c_part_serialnumber,
							pLocNumber));
		END IF;
	END LOOP;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.changelocsummsubass(text, text, text, text) OWNER TO admin;

--
-- TOC entry 375 (class 1255 OID 36804)
-- Name: changerevpart(text, text, text, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION changerevpart(text, text, text, text, text, text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS TABLE(_partnumber text, _revision text, _serialnumber text, _sequencenumber integer, _itemfreqcode text, _partrevhistid integer)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pCurrentRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	pDocNumber ALIAS FOR $4;
	pDocType ALIAS FOR $5;
	pTargetRevision ALIAS FOR $6;
	pLine ALIAS FOR $7;
	pStation ALIAS FOR $8;
	_viewpart RECORD;
	_item RECORD;
	_docTypeId INTEGER;
	_partid INTEGER;
	_usrId INTEGER;
	_lineId	INTEGER;
	_stationId INTEGER;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('changerevpart'));
	PERFORM (SELECT validatepart(pItemNumber, pCurrentRevision, pSerialNumber));

	SELECT 	part_id, 
		item_id, 
		item_number,
		part_rev,
		part_serialnumber, 
		part_sequencenumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber AND part_serialnumber = pSerialNumber AND part_rev = pCurrentRevision;

	SELECT 	item_id, 
		item_serialstream_id, 
		serialprefix_prefix, 
		serialpattern_pattern, 
		itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'Item Number % not found in AeryonMES', pItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev = pTargetRevision) IS NULL THEN
		RAISE EXCEPTION 'Target Revision % of Selected Item % Not Found in AeryonMES', pTargetRevision, pItemNumber;
	END IF;

	_docTypeId := (SELECT getdoctypeid(pDocType));

	IF pStation IS NULL THEN
		_stationId := null;
	ELSE
		_stationId := (SELECT getstationid(pStation));
	END IF;

	IF pLine IS NULL THEN
		_lineId := null;
	ELSE
		_lineId := (SELECT getstationid(pStation));
	END IF;

	UPDATE part SET (  
				part_rev
				)
			= (
				pTargetRevision
				)
			WHERE part_id = _viewpart.part_id;

	INSERT INTO partrevhist (partrevhist_part_id, 
				 partrevhist_start_rev, 
				 partrevhist_end_rev,
				 partrevhist_usr_id,
				 partrevhist_orig_item_id,
				 partrevhist_orig_rev,
				 partrevhist_orig_serialnumber,
				 partrevhist_doctype_id,
				 partrevhist_docnumber,
				 partrevhist_line_id,
				 partrevhist_station_id)
		VALUES (_viewpart.part_id, 
			pCurrentRevision, 
			pTargetRevision,
			_usrId,
			_viewpart.item_id,
			_viewpart.part_rev,
			_viewpart.part_serialnumber,
			_docTypeId,
			pDocNumber,
			_lineId,
			_stationId)
		RETURNING partrevhist_id INTO _partRevHistId;
		  
	_partnumber := pItemNumber;
	_serialnumber := pSerialNumber;
	_revision := pTargetRevision;
	_itemfreqcode := _item.itemfreqcode_freqcode;
	_sequencenumber := _viewpart.part_sequencenumber;
	
	RETURN NEXT;
	RETURN;
END;$_$;


ALTER FUNCTION public.changerevpart(text, text, text, text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 378 (class 1255 OID 36805)
-- Name: changestatepart(text, text, text, text, boolean, boolean); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION changestatepart(text, text, text, text, boolean DEFAULT false, boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 		ALIAS FOR $1;
	pRevision 		ALIAS FOR $2;
	pSerialNumber 		ALIAS FOR $3;
	pTargetState 		ALIAS FOR $4;
	pOverride		ALIAS FOR $5;
	pForce			ALIAS FOR $6;
	_viewpart 		RECORD;
	_currentPartStateId	INTEGER;
	_targetPartStateId 	INTEGER;
	_partStateHistId	INTEGER;
	_usrId 			INTEGER;
	_message		TEXT;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('changestatepart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));

	SELECT 	part_id, 
		item_id, 
		item_number,
		part_rev,
		part_serialnumber, 
		part_sequencenumber,
		partstate_name
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber AND part_serialnumber = pSerialNumber AND part_rev = pRevision;

	IF _viewpart.partstate_name = pTargetState THEN
		RETURN true;
	END IF;

	IF (NOT pForce) THEN
		PERFORM (SELECT checkpartstateflow(_viewpart.partstate_name, pTargetState, pOverride));
	ELSE
		pOverride := true;
	END IF;

	_currentPartStateId := (SELECT getpartstateid(_viewpart.partstate_name));
	_targetPartStateId := (SELECT getpartstateid(pTargetState));
	
	UPDATE part SET (  
				part_partstate_id
				)
			= (
				_targetPartStateId
				)
		WHERE part_id = _viewpart.part_id;

	INSERT INTO partstatehist (partstatehist_part_id, 
				 partstatehist_start_partstate_id, 
				 partstatehist_end_partstate_id,
				 partstatehist_usr_id,
				 partstatehist_orig_item_id,
				 partstatehist_orig_rev,
				 partstatehist_orig_serialnumber,
				 partstatehist_overridden)
		VALUES (_viewpart.part_id, 
			_currentPartStateId, 
			_targetPartStateId,
			_usrId,
			_viewpart.item_id,
			_viewpart.part_rev,
			_viewpart.part_serialnumber,
			pOverride)
		RETURNING partstatehist_id INTO _partStateHistId;

	_message := 	pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || ' part state changed from ' ||
			_viewpart.partstate_name || ' to ' ||
			pTargetState || '.';
	
	PERFORM (SELECT enterpartlog(	'Part State Control'::TEXT, 
					'Part State Changed'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Part State History'::TEXT,
					_partStateHistId,
					_message));
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.changestatepart(text, text, text, text, boolean, boolean) OWNER TO admin;

--
-- TOC entry 379 (class 1255 OID 36806)
-- Name: changestatesummsubass(text, text, text, text, boolean, boolean); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION changestatesummsubass(text, text, text, text, boolean DEFAULT false, boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	pTargetPartState ALIAS FOR $4;
	pOverride ALIAS FOR $5;
	pForce ALIAS FOR $6;
	_usrId INTEGER;
	_r RECORD;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('changestatesummsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));
	
	PERFORM (SELECT changestatepart(pItemNumber,
					pRevision,
					pSerialNumber,
					pTargetPartState,
					pOverride,
					pForce));
	
	FOR _r IN
		SELECT *
		FROM summsubass(	pItemNumber,
					pRevision,
					pSerialNumber)
	LOOP
		IF _r.c_item_number IS NOT NULL THEN
			PERFORM (SELECT changestatepart(_r.c_item_number,
							_r.c_part_rev,
							_r.c_part_serialnumber,
							pTargetPartState,
							pOverride,
							pForce));
		END IF;
	END LOOP;
		  
	RETURN true;
END;$_$;


ALTER FUNCTION public.changestatesummsubass(text, text, text, text, boolean, boolean) OWNER TO admin;

--
-- TOC entry 380 (class 1255 OID 36807)
-- Name: checkalloc(text, text, text, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION checkalloc(text, text, text, text, text, text, integer DEFAULT 1) RETURNS TABLE(ocode text, omessage text)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParentItemNumber ALIAS FOR $1;
	pParentRevision ALIAS FOR $2;
	pParentSerialNumber ALIAS FOR $3;
	pItemNumber ALIAS FOR $4;
	pRevision ALIAS FOR $5;
	pSerialNumber ALIAS FOR $6;
	pAllocPos ALIAS FOR $7;
	_parentviewpart RECORD;
	_viewpart RECORD;
	_qtyPerCurrent INTEGER;
	_qtyAllocCurrent INTEGER;
	_qtyPerAny INTEGER;
	_qtyAllocAny INTEGER;
	_locationId INTEGER;
	_partStateId INTEGER;
	_r RECORD;
	_error BOOLEAN;
  
BEGIN
	PERFORM (SELECT checkpriv('checkalloc'));
	BEGIN
		PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, 'Child'));
	EXCEPTION
		WHEN raise_exception THEN
			oCode := 	'AMDA008';
			oMessage := 	'Child Item Number ' || pItemNumber || 
					' Revision ' || pRevision || 
					' Serial Number ' || pSerialNumber || 
					' does not exist.';
			RETURN NEXT;
			RETURN;
			
	END;
	PERFORM (SELECT validatepart(pParentItemNumber, pParentRevision, pParentSerialNumber, 'Parent'));

	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_serialnumber, 
		part_sequencenumber,
		part_allocpos,
		parent_part_id,
		parent_item_number,
		parent_part_rev,
		parent_part_serialnumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_serialnumber, 
		part_sequencenumber
		parent_part_id
	INTO _parentviewpart
	FROM viewpart
	WHERE item_number = pParentItemNumber 
	AND part_serialnumber = pParentSerialNumber 
	AND part_rev = pParentRevision;

	_error := false;

	IF _viewpart.parent_part_id = _parentviewpart.part_id AND _viewpart.part_allocpos = pAllocPos THEN
		oCode := 	'AMDA002';
		oMessage := 	'Child Item Number ' || pItemNumber || 
				' Revision ' || pRevision || 
				' Serial Number ' || pSerialNumber || 
				' is already allocated to Parent Item Number ' || pParentItemNumber || 
				' Revision ' || pParentRevision || 
				' Serial Number ' || pParentSerialNumber || 
				'.';
		RETURN NEXT;
		RETURN;
	END IF;

	IF _viewpart.parent_part_id IS NOT NULL THEN
		oCode := 	'AMDA001';
		oMessage := 	'Child Item Number ' || pItemNumber || 
				' Revision ' || pRevision || 
				' Serial Number ' || pSerialNumber || 
				' is allocated to Parent Item Number ' || _viewpart.parent_item_number || 
				' Revision ' || _viewpart.parent_part_rev || 
				' Serial Number ' || _viewpart.parent_part_serialnumber || 
				' in allocation position ' || _viewpart.part_allocpos || 
				'.';
		RETURN NEXT;
		_error = true;
	END IF;

	_qtyPerCurrent := (SELECT checkserialbom(pParentItemNumber, pParentRevision, pItemNumber, pRevision));
	_qtyPerAny := (SELECT checkserialbom(pParentItemNumber, pParentRevision, pItemNumber, null));

	IF _qtyPerAny <= 0 THEN
		oCode := 	'AMDA003';
		oMessage := 	'Child Item Number ' || pItemNumber || 
				' Revision ANY Serial Number ' || pSerialNumber || 
				' not found in BOM of Parent Item Number  ' || pParentItemNumber || 
				' Revision ' || pParentRevision || 
				' Serial Number ' || pParentSerialNumber || 
				'.'; 
		RETURN NEXT;
		_error = true;
	ELSIF _qtyPerCurrent <= 0 THEN
		oCode := 	'AMDA004';
		oMessage := 	'Child Item Number ' || pItemNumber || 
				' Revision ' || pRevision || 
				' Serial Number ' || pSerialNumber || 
				' not found in BOM of Parent Item Number ' || pParentItemNumber || 
				' Revision ' || pParentRevision || 
				' Serial Number ' || pParentSerialNumber || 
				'.';
		RETURN NEXT;
		_error = true;
	END IF;

	_qtyAllocCurrent := 	(SELECT COUNT(c_item_number) 
				FROM serialsubass(pParentItemNumber, pParentRevision, pParentSerialNumber) 
				WHERE p_item_number = pParentItemNumber 
				AND c_item_number = pItemNumber
				AND c_part_rev = pRevision);
	_qtyAllocAny	:= 	(SELECT COUNT(c_item_number) 
				FROM serialsubass(pParentItemNumber, pParentRevision, pParentSerialNumber) 
				WHERE p_item_number = pParentItemNumber 
				AND c_item_number = pItemNumber);

	IF (_qtyPerCurrent > 0 AND _qtyAllocCurrent >= _qtyPerCurrent) THEN
		oCode := 	'AMDA005';
		oMessage := 	'Qty ' || _qtyAllocCurrent || 
				' of Item Number ' || pItemNumber || 
				' Revision ' || pRevision || 
				' already allocted to Parent Item Number ' || pParentItemNumber || 
				' Revision ' || pParentRevision || 
				' Serial Number ' || pParentSerialNumber || 
				'. Only ' || _qtyPerCurrent || 
				' may be allocated as per BOM Qty Per.';
		RETURN NEXT;
		_error = true;
	ELSIF (_qtyPerAny > 0 AND _qtyAllocAny >= _qtyPerAny) THEN
		oCode := 	'AMDA006';
		oMessage := 	'Qty ' || _qtyAllocAny || 
				' of Item Number ' || pItemNumber || 
				' Revision ANY already allocted to Parent Item Number ' || pParentItemNumber || 
				' Revision ' || pParentRevision || 
				' Serial Number ' || pParentSerialNumber || 
				'. Only ' || _qtyPerAny || 
				' may be allocated as per BOM Qty Per.';
		RETURN NEXT;
		_error = true;
	END IF;

	IF (NOT _error) THEN
		oCode := 	'AMDA007';
		oMessage := 	'Child Item Number ' || pItemNumber || 
				' Revision ' || pRevision || 
				' Serial Number ' || pSerialNumber || 
				' can be allocated to Parent Item Number ' || pParentItemNumber || 
				' Revision ' || pParentRevision || 
				' Serial Number ' || pParentSerialNumber || 
				'.';
		RETURN NEXT;
	END IF;

	RETURN;
END;$_$;


ALTER FUNCTION public.checkalloc(text, text, text, text, text, text, integer) OWNER TO admin;

--
-- TOC entry 381 (class 1255 OID 36808)
-- Name: checkpartstateflow(text, text, boolean); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION checkpartstateflow(text, text, boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pCurrentState	ALIAS FOR $1;
	pTargetState	ALIAS FOR $2;
	pOverride	ALIAS FOR $3;
	_stateInfo	RECORD;
BEGIN
	PERFORM (SELECT checkpriv('checkpartstateflow'));
	PERFORM (SELECT getpartstateid(pCurrentState));
	PERFORM (SELECT getpartstateid(pTargetState));

	IF pCurrentState = pTargetState THEN
		RETURN true;
	END IF;
		
	SELECT 	start_partstate_id,
		start_partstate_name,
		start_partstate_active,
		end_partstate_id,
		end_partstate_name,
		end_partstate_active,
		partstateflow_id,
		partstateflow_active,
		partstateflow_overridereq
	INTO _stateInfo
	FROM viewpartstateflow
	WHERE start_partstate_name = pCurrentState
	AND end_partstate_name = pTargetState;

	IF _stateInfo.partstateflow_id IS NULL THEN
		RAISE EXCEPTION 'checkpartstateflow: Part State Flow does not exist for Current State % to Target State %.', 
			pCurrentState,
			pTargetState;
	ELSIF _stateInfo.partstateflow_active = false THEN
		RAISE EXCEPTION 'checkpartstateflow: Part State Flow is not active for Current State % to Target State %.', 
			pCurrentState,
			pTargetState;
	ELSIF _stateInfo.end_partstate_active = false THEN
		RAISE EXCEPTION 'checkpartstateflow: Target Part State % is not active.', 
			pTargetState;
	ELSIF _stateInfo.partstateflow_overridereq = true AND pOverride = false THEN
		RAISE EXCEPTION 'checkpartstateflow: Part State Flow requires override for Current State % to Target State %.', 
			pCurrentState,
			pTargetState;
	ELSIF _stateInfo.partstateflow_overridereq = true AND pOverride = true THEN
		PERFORM (SELECT checkpriv('checkpartstateflowoverride'));
	END IF;

	RETURN true;
END;
$_$;


ALTER FUNCTION public.checkpartstateflow(text, text, boolean) OWNER TO admin;

--
-- TOC entry 351 (class 1255 OID 36809)
-- Name: checkpriv(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION checkpriv(text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pPriv 		ALIAS FOR $1;
	pUserName	ALIAS FOR $2;
	_privGranted 	RECORD;
	_usrId		INTEGER;
BEGIN		
	SELECT usr_username, priv_name
	INTO _privGranted
	FROM viewprivgranted
	WHERE usr_username = pUserName
	AND priv_name = pPriv;

	IF _privGranted.usr_username IS NULL 
	OR (_privGranted.usr_username != pUserName) 
	OR (_privGranted.priv_name != pPriv) THEN
		RAISE EXCEPTION 'checkpriv: User Name % does not have Privilege %.', 
			pUserName,
			pPriv;
	END IF;

	RETURN true;
END;
$_$;


ALTER FUNCTION public.checkpriv(text, text) OWNER TO admin;

--
-- TOC entry 352 (class 1255 OID 36810)
-- Name: checkserialbom(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION checkserialbom(text, text, text, text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParentItemNumber ALIAS FOR $1;
	pParentRevision ALIAS FOR $2;
	pItemNumber ALIAS FOR $3;
	pRevision ALIAS FOR $4;
	_parentitem RECORD;
	_item RECORD;
	_serialbom RECORD;
  
BEGIN
	PERFORM (SELECT checkpriv('checkserialbom'));
	
	IF pRevision IS NULL THEN
		pRevision = '%';
	END IF;

	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _parentitem
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pParentItemNumber 
	AND item_active = true;

	IF _parentitem.item_id IS NULL THEN
		RAISE EXCEPTION 'checkserialbom: Parent Item Number % not found in AeryonMES', pParentItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _parentitem.item_id
	    AND itemrev_rev = pParentRevision) IS NULL THEN
		RAISE EXCEPTION 'checkserialbom: Parent Revision % of Selected Parent Item % Not Found in AeryonMES', pParentRevision, pParentItemNumber;
	END IF;

	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'checkserialbom: Item Number % not found in AeryonMES', pItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev LIKE pRevision LIMIT 1) IS NULL THEN
		RAISE EXCEPTION 'checkserialbom: Revision % of Selected Item % Not Found in AeryonMES', pRevision, pItemNumber;
	END IF;

	SELECT *
	INTO _serialbom
	FROM serialbom(pParentItemNumber, pParentRevision)
	WHERE c_item_number = pItemNumber
	AND c_bom_itemrev LIKE pRevision;


	IF _serialbom.c_item_number IS NULL THEN
		RETURN 0; 
	END IF;
	
	RETURN _serialbom.c_bom_qtyper;
END;$_$;


ALTER FUNCTION public.checkserialbom(text, text, text, text) OWNER TO admin;

--
-- TOC entry 353 (class 1255 OID 36811)
-- Name: checksummbom(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION checksummbom(text, text, text, text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParentItemNumber ALIAS FOR $1;
	pParentRevision ALIAS FOR $2;
	pItemNumber ALIAS FOR $3;
	pRevision ALIAS FOR $4;
	_parentitem RECORD;
	_item RECORD;
	_summbom RECORD;
  
BEGIN
	PERFORM (SELECT checkpriv('checksummbom'));

	IF pRevision IS NULL THEN
		pRevision = '%';
	END IF;

	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _parentitem
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pParentItemNumber 
	AND item_active = true;

	IF _parentitem.item_id IS NULL THEN
		RAISE EXCEPTION 'checksummbom: Parent Item Number % not found in AeryonMES', pParentItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _parentitem.item_id
	    AND itemrev_rev = pParentRevision) IS NULL THEN
		RAISE EXCEPTION 'checksummbom: Parent Revision % of Selected Parent Item % Not Found in AeryonMES', pParentRevision, pParentItemNumber;
	END IF;

	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'checksummbom: Item Number % not found in AeryonMES', pItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev LIKE pRevision LIMIT 1) IS NULL THEN
		RAISE EXCEPTION 'checksummbom: Revision % of Selected Item % Not Found in AeryonMES', pRevision, pItemNumber;
	END IF;

	SELECT *
	INTO _summbom
	FROM summbom(pParentItemNumber, pParentRevision)
	WHERE c_item_number = pItemNumber
	AND c_bom_itemrev LIKE pRevision;


	IF _summbom.c_item_number IS NULL THEN
		RETURN 0; 
	END IF;
	
	RETURN _summbom.c_bom_qtyper;
END;$_$;


ALTER FUNCTION public.checksummbom(text, text, text, text) OWNER TO admin;

--
-- TOC entry 382 (class 1255 OID 36812)
-- Name: deactivatepart(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION deactivatepart(text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	_viewpart RECORD;
	_usrId INTEGER;
	_partActiveHistId INTEGER;
	_message TEXT;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('deactivatepart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));

	SELECT 	part_id, 
		item_id, 
		item_number,
		part_active,
		part_rev,
		part_serialnumber, 
		part_sequencenumber,
		part_cust_id,
		loc_number
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	IF _viewpart.part_active IS false THEN
		RETURN true;
	END IF;
	
	UPDATE part SET (part_active) =
			(false)
	WHERE part_id = _viewpart.part_id;

	INSERT INTO partactivehist (	partactivehist_part_id, 
					partactivehist_new_activestate,
					partactivehist_usr_id,
					partactivehist_orig_item_id,
					partactivehist_orig_rev,
					partactivehist_orig_serialnumber)
		VALUES (		_viewpart.part_id, 
					false,
					_usrId,
					_viewpart.item_id,
					_viewpart.part_rev,
					_viewpart.part_serialnumber)
		RETURNING partactivehist_id INTO _partActiveHistId;

	_message := 	pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || ' made Inactive.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Deactivated'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Active History'::TEXT,
					_partActiveHistId,
					_message));

	RETURN true;
END;$_$;


ALTER FUNCTION public.deactivatepart(text, text, text) OWNER TO admin;

--
-- TOC entry 383 (class 1255 OID 36813)
-- Name: deactivatesummsubass(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION deactivatesummsubass(text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	_usrId INTEGER;
	_r RECORD;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('deactivatesummsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));
	
	PERFORM (SELECT deactivatepart(	pItemNumber,
					pRevision,
					pSerialNumber));
	
	FOR _r IN
		SELECT *
		FROM summsubass(	pItemNumber,
					pRevision,
					pSerialNumber)
	LOOP
		IF _r.c_item_number IS NOT NULL THEN
			PERFORM (SELECT deactivatepart(	_r.c_item_number,
							_r.c_part_rev,
							_r.c_part_serialnumber));
		END IF;
	END LOOP;
		  
	RETURN true;
END;$_$;


ALTER FUNCTION public.deactivatesummsubass(text, text, text) OWNER TO admin;

--
-- TOC entry 384 (class 1255 OID 36814)
-- Name: deallocpart(text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION deallocpart(text, text, text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 		ALIAS FOR $1;
	pRevision 		ALIAS FOR $2;
	pSerialNumber 		ALIAS FOR $3;	
	pLine			ALIAS FOR $4;
	pStation		ALIAS FOR $5;
	_parentviewpart 	RECORD;
	_viewpart 		RECORD;
	_allocCheck 		RECORD;
	_locationId 		INTEGER;
	_partStateId 		INTEGER;
	_usrId 			INTEGER;
	_message 		TEXT;
	_partAllocHistId 	INTEGER;
	_stationId		INTEGER;
	_lineId			INTEGER;
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('deallocpart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, 'Child', true));
	
	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_rev,
		part_serialnumber, 
		part_sequencenumber,
		part_allocpos,
		parent_part_id,
		parent_item_number,
		parent_part_rev,
		parent_part_serialnumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	IF _viewpart.parent_part_id IS NOT NULL THEN
		RETURN deallocpart(_viewpart.parent_item_number, _viewpart.parent_part_rev, _viewpart.parent_part_serialnumber, pItemNumber, pRevision, pSerialNumber, 'AMDD001', pLine, pStation);
	ELSE
		RAISE EXCEPTION 'Parent does not exists for Child Item Number % Revision % Serial Number % and cannot be deallocated.', 
			pItemNumber, 
			pRevision, 
			pSerialNumber;
	END IF;
END;$_$;


ALTER FUNCTION public.deallocpart(text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 386 (class 1255 OID 36815)
-- Name: deallocpart(text, text, text, text, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION deallocpart(text, text, text, text, text, text, text DEFAULT 'AMDD001'::text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParentItemNumber 	ALIAS FOR $1;
	pParentRevision 	ALIAS FOR $2;
	pParentSerialNumber 	ALIAS FOR $3;
	pItemNumber 		ALIAS FOR $4;
	pRevision 		ALIAS FOR $5;
	pSerialNumber 		ALIAS FOR $6;	
	pDeallocCode 		ALIAS FOR $7;
	pLine			ALIAS FOR $8;
	pStation		ALIAS FOR $9;
	_parentviewpart 	RECORD;
	_viewpart 		RECORD;
	_allocCheck 		RECORD;
	_locationId 		INTEGER;
	_partStateId 		INTEGER;
	_usrId 			INTEGER;
	_message 		TEXT;
	_partAllocHistId 	INTEGER;
	_stationId		INTEGER;
	_lineId			INTEGER;
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('deallocpart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, 'Child', true));
	PERFORM (SELECT validatepart(pParentItemNumber, pParentRevision, pParentSerialNumber, 'Parent', true));

	IF pStation IS NULL THEN
		_stationId := null;
	ELSE
		_stationId := (SELECT getstationid(pStation));
	END IF;

	IF pLine IS NULL THEN
		_lineId := null;
	ELSE
		_lineId := (SELECT getstationid(pStation));
	END IF;
	
	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_rev,
		part_serialnumber, 
		part_sequencenumber,
		part_allocpos,
		parent_part_id,
		parent_item_number,
		parent_part_rev,
		parent_part_serialnumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_rev,
		part_serialnumber, 
		part_sequencenumber
		parent_part_id
	INTO _parentviewpart
	FROM viewpart
	WHERE item_number = pParentItemNumber 
	AND part_serialnumber = pParentSerialNumber 
	AND part_rev = pParentRevision;

	IF _viewpart.parent_part_id != _parentviewpart.part_id THEN
		RAISE EXCEPTION 'Child Item Number % Revision % Serial Number % is not allocated to Parent Item Number % Revision % Serial Number % and cannot be deallocated.', 
			pItemNumber, 
			pRevision, 
			pSerialNumber,
			pParentItemNumber,
			pParentRevision,
			pParentSerialNumber;
	END IF;

	UPDATE 	part
	SET 	(part_parent_part_id,
		 part_allocpos) =
		(null,
		 null)
	WHERE part_id = _viewpart.part_id;

	INSERT INTO partallochist
		(partallochist_parent_part_id,
		 partallochist_child_part_id,
		 partallochist_allocpos,
		 partallochist_alloctype,
		 partallochist_alloccode,
		 partallochist_usr_id,
		 partallochist_parent_orig_item_id,
		 partallochist_parent_orig_rev,
		 partallochist_parent_orig_serialnumber,
		 partallochist_child_orig_item_id,
		 partallochist_child_orig_rev,
		 partallochist_child_orig_serialnumber,
		 partallochist_line_id,
		 partallochist_station_id)
	VALUES	(_parentviewpart.part_id,
		 _viewpart.part_id,
		 _viewpart.part_allocpos,
		 'd',
		 pDeallocCode,
		 _usrId,
		 _parentviewpart.item_id,
		 _parentviewpart.part_rev,
		 _parentviewpart.part_serialnumber,
		 _viewpart.item_id,
		 _viewpart.part_rev,
		 _viewpart.part_serialnumber,
		 _lineId,
		 _stationId)
	RETURNING partallochist_id INTO _partAllocHistId;

	_message := 	pItemNumber || ' ' || 
			pRevision || ' ' || 
			pSerialNumber || ' deallocated from ' || 
			pParentItemNumber || ' ' || 
			pParentRevision || ' ' || 
			pParentSerialNumber || ' with deallocation code ' ||
			pDeallocCode || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Deallocated'::TEXT,
					pParentItemNumber,
					pParentRevision,
					pParentSerialNumber,
					'Allocation History'::TEXT,
					_partAllocHistId,
					_message,
					null,
					null,
					pLine,
					pStation));

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Deallocated'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Allocation History'::TEXT,
					_partAllocHistId,
					_message,
					null,
					null,
					pLine,
					pStation));
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.deallocpart(text, text, text, text, text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 387 (class 1255 OID 36816)
-- Name: enterbackflush(text, text, text, integer, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION enterbackflush(text, text, text, integer, text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 	ALIAS FOR $1;
	pRevision 	ALIAS FOR $2;
	pSerialNumber 	ALIAS FOR $3;
	pQty 		ALIAS FOR $4;
	pDocType 	ALIAS FOR $5;
	pDocNumber 	ALIAS FOR $6;
	pLine		ALIAS FOR $7;
	pStation	ALIAS FOR $8;
	_itemId		INTEGER;
	_viewpart 	RECORD;
	_docTypeId	INTEGER;
	_usrId 		INTEGER;
	_backflushId 	INTEGER;
	_message 	TEXT;
	_stationId	INTEGER;
	_lineId		INTEGER;
  
BEGIN
	_usrId := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('enterbackflush'));

	IF pQty <= 0 THEN
		RAISE EXCEPTION 'enterbackflush: Backflush Qty cannot be equal to or less than 0.';
	END IF;

	_itemId := (SELECT getitemid(pItemNumber));
	_docTypeId := (SELECT getdoctypeid(pDocType));
	_lineId := (SELECT getlineid(pLine));
	_stationId := (SELECT getstationid(pStation));
	
	IF pSerialNumber IS NOT NULL THEN
		PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));
		pQty := 1;
	END IF;
	
	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_serialnumber, 
		part_sequencenumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	IF 	pSerialNumber IS NOT NULL 
		AND 	(SELECT backflush_id
			FROM backflush
			WHERE backflush_void_timestamp IS NULL
			AND backflush_part_id = _viewpart.part_id) IS NOT NULL THEN
		RAISE EXCEPTION 'enterbackflush: Serialized part % % % has already been backflushed.',
			pItemNumber,
			pRevision,
			pSerialNumber;
	END IF;
	
	INSERT INTO backflush
		(backflush_orig_item_id,
		 backflush_orig_rev,
		 backflush_orig_serialnumber,
		 backflush_part_id,
		 backflush_qty,
		 backflush_doctype_id,
		 backflush_docnumber,
		 backflush_create_usr_id,
		 backflush_line_id,
		 backflush_station_id)
	VALUES	(_itemId,
		 pRevision,
		 pSerialNumber,
		 _viewpart.part_id,
		 pQty,
		 _docTypeId,
		 pDocNumber,
		 _usrId,
		 _lineId,
		 _stationId)
	RETURNING backflush_id INTO _backflushId;

	UPDATE part
	SET (part_backflushed) = (true)
	WHERE part_id = _viewpart.part_id;
	
	_message := 	pItemNumber || ' ' || 
			pRevision || ' ' || 
			pSerialNumber || ' qty ' || 
			pQty || ' entered for backflush on ' || 
			pDocType || ' ' || 
			pDocNumber || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Enter Backflush'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Backflush ID'::TEXT,
					_backflushId,
					_message,
					pDocType,
					pDocNumber,
					pLine,
					pStation
					));

	RETURN true;
END;$_$;


ALTER FUNCTION public.enterbackflush(text, text, text, integer, text, text, text, text) OWNER TO postgres;

--
-- TOC entry 388 (class 1255 OID 36817)
-- Name: enterpart(text, text, text, text, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION enterpart(text, text, text, text, text, text, text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS TABLE(_partnumber text, _revision text, _serialnumber text, _sequencenumber integer, _itemfreqcode text)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	pDocNumber ALIAS FOR $4;
	pDocType ALIAS FOR $5;
	pLocation ALIAS FOR $6;
	pPartState ALIAS FOR $7;
	pLine ALIAS FOR $8;
	pStation ALIAS FOR $9;
	_viewpart RECORD;
	_item RECORD;
	_docTypeId INTEGER;
	_locationId INTEGER;
	_partStateId INTEGER;
	_prefix TEXT;
	_serialPattern TEXT;
	_r RECORD;
	_partId INTEGER;
	_message TEXT;
	_usrId	INTEGER;
	_partActiveHistId INTEGER;
  
BEGIN
	PERFORM (SELECT checkpriv('enterpart'));
	_usrId := (SELECT getusrid());

	IF ((pSerialNumber = '') OR (pSerialNumber IS NULL)) THEN
		RAISE EXCEPTION 'enterpart: Serial Number cannot be blank or null.';
	END IF;

	SELECT item_number, part_rev
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber AND part_serialNumber = pSerialNumber;

	IF _viewpart.item_number IS NOT NULL THEN
		RAISE EXCEPTION 'enterpart: Item Number % and Serial Number % already exists in AeryonMES at Revision %', pItemNumber, pSerialNumber, _viewpart.part_rev;
	END IF;
	
	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'enterpart: Item Number % Not Found in AeryonMES', pItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev = pRevision) IS NULL THEN
		RAISE EXCEPTION 'enterpart: Revision % of Selected Item % Not Found in AeryonMES', pRevision, pItemNumber;
	END IF;

	_docTypeId := (SELECT getdoctypeid(pDocType));
	_locationId := (SELECT getlocid(pLocation));
	_partStateId := (SELECT getpartstateid(pPartState));

	IF _item.item_serialstream_id IS NULL THEN
		_sequenceNumber := (SELECT MAX(part_sequencenumber) + 1
			FROM part
			WHERE part_item_id = _item.item_id);
	ELSE
		_sequenceNumber := (SELECT MAX(part_sequencenumber) + 1
			FROM part
			WHERE part_item_id IN (SELECT item_id FROM item WHERE item_serialstream_id = _item.item_serialstream_id));	
	END IF;

	IF _sequenceNumber IS NULL THEN
		_sequenceNumber := 1;
	END IF;
	
	_serialNumber := pSerialNumber;

	INSERT INTO part (part_item_id,
			  part_rev,
			  part_sequencenumber,
			  part_serialnumber,
			  part_loc_id,
			  part_create_doctype_id,
			  part_create_docnumber,
			  part_partstate_id)
		VALUES	 (_item.item_id,
			  pRevision,
			  _sequenceNumber,
			  _serialNumber,
			  _locationId,
			  _docTypeId,
			  pDocNumber,
			  _partStateId)
		RETURNING part_id INTO _partId;

	_message := 	pItemNumber || ' ' || 
			pRevision || ' ' || 
			pSerialNumber || ' entered into location ' ||
			pLocation || ' with part state ' ||
			pPartState || ' on ' ||
			pDocType || ' ' ||
			pDocNumber || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Entered'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Part Record'::TEXT,
					_partId,
					_message,
					pDocType,
					pDocNumber,
					pLine,
					pStation));

	INSERT INTO partactivehist (	partactivehist_part_id, 
					partactivehist_new_activestate,
					partactivehist_usr_id,
					partactivehist_orig_item_id,
					partactivehist_orig_rev,
					partactivehist_orig_serialnumber)
		VALUES (		_partId, 
					true,
					_usrId,
					_item.item_id,
					pRevision,
					_serialNumber
					)
		RETURNING partactivehist_id INTO _partActiveHistId;

	_message := 	pItemNumber || ' ' ||  
			pRevision || ' ' || 
			_serialNumber || ' made Active.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Activated'::TEXT,
					pItemNumber,
					pRevision,
					_serialNumber,
					'Active History'::TEXT,
					_partActiveHistId,
					_message,
					pDocType,
					pDocNumber,
					pLine,
					pStation));
		  
	_partnumber := pItemNumber;
	_revision := pRevision;
	_itemfreqcode := _item.itemfreqcode_freqcode;
	RETURN NEXT;
	RETURN;
END;$_$;


ALTER FUNCTION public.enterpart(text, text, text, text, text, text, text, text, text) OWNER TO postgres;

--
-- TOC entry 389 (class 1255 OID 36818)
-- Name: enterpartlog(text, text, text, text, text, text, integer, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION enterpartlog(text, text, text, text, text, text, integer, text, text DEFAULT NULL::text, text DEFAULT NULL::text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pModule 	ALIAS FOR $1;
	pAction 	ALIAS FOR $2;
	pItemNumber 	ALIAS FOR $3;
	pRevision 	ALIAS FOR $4;
	pSerialNumber 	ALIAS FOR $5;
	pRecordType 	ALIAS FOR $6;
	pRecordId 	ALIAS FOR $7;
	pMessage	ALIAS FOR $8;
	pDocType	ALIAS FOR $9;
	pDocNumber	ALIAS FOR $10;
	pLine		ALIAS FOR $11;
	pStation	ALIAS FOR $12;
	_viewpart	RECORD;
	_moduleId	INTEGER;
	_actionId	INTEGER;
	_usrId		INTEGER;
	_recordTypeId	INTEGER;
	_docTypeId	INTEGER;
	_stationId	INTEGER;
	_lineID		INTEGER;

BEGIN
	PERFORM (SELECT checkpriv('enterpartlog'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));

	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_serialnumber, 
		part_sequencenumber,
		parent_part_id,
		parent_item_number,
		parent_part_rev,
		parent_part_serialnumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	_moduleId := (SELECT getmoduleid(pModule));
	_actionId := (SELECT getpartlogactionid(pAction));
	_usrId := (SELECT getusrid());
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	IF pDocType IS NOT NULL THEN
		_docTypeId := (SELECT getdoctypeid(pDocType));
	ELSIF pDocType IS NULL AND pDocNumber IS NOT NULL THEN
		RAISE EXCEPTION 'enterpartlog: DocType is null, but DocNumber is not null. Log could not be submitted.';
	ELSE
		_docTypeId := null;
	END IF;

	IF pStation IS NULL THEN
		_stationId := null;
	ELSE
		_stationId := (SELECT getstationid(pStation));
	END IF;

	IF pLine IS NULL THEN
		_lineId := null;
	ELSE
		_lineId := (SELECT getstationid(pStation));
	END IF;
	
	INSERT INTO partlog (	partlog_module_id,
				partlog_partlogaction_id,
				partlog_part_id,
				partlog_recordtype_id,
				partlog_record_id,
				partlog_doctype_id,
				partlog_docnumber,
				partlog_message,
				partlog_usr_id,
				partlog_orig_item_id,
				partlog_orig_rev,
				partlog_orig_serialnumber,
				partlog_line_id,
				partlog_station_id
				)
		VALUES (	_moduleId,
				_actionId,
				_viewpart.part_id,
				_recordTypeId,
				pRecordId,
				_docTypeId,
				pDocNumber,
				pMessage,
				_usrId,
				_viewpart.item_id,
				pRevision,
				pSerialNumber,
				_lineId,
				_stationId
				);
	
	RETURN true;
END;
$_$;


ALTER FUNCTION public.enterpartlog(text, text, text, text, text, text, integer, text, text, text, text, text) OWNER TO postgres;

--
-- TOC entry 376 (class 1255 OID 36819)
-- Name: enterrecordlog(text, text, text, integer, text, integer, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION enterrecordlog(text, text, text, integer, text, integer, text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pModule 		ALIAS FOR $1;
	pAction 		ALIAS FOR $2;
	pRecordType 		ALIAS FOR $3;
	pRecordId 		ALIAS FOR $4;
	pSecRecordType		ALIAS FOR $5;
	pSecRecordId		ALIAS FOR $6;
	pMessage		ALIAS FOR $7;
	pDocType		ALIAS FOR $8;
	pDocNumber		ALIAS FOR $9;
	_moduleId		INTEGER;
	_actionId		INTEGER;
	_usrId			INTEGER;
	_recordTypeId		INTEGER;
	_secRecordTypeId	INTEGER;
	_docTypeId		INTEGER;

BEGIN
	PERFORM (SELECT checkpriv('enterrecordlog'));

	_moduleId := (SELECT getmoduleid(pModule));
	_actionId := (SELECT getrecordlogactionid(pAction));
	_usrId := (SELECT getusrid());
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));
	_secRecordTypeId := (SELECT getrecordtypeid(pSecRecordType, true));

	IF _secRecordTypeId IS NULL THEN
		pSecRecordId := null;
	END IF;
	
	IF pDocType IS NOT NULL THEN
		_docTypeId := (SELECT getdoctypeid(pDocType));
	ELSIF pDocType IS NULL AND pDocNumber IS NOT NULL THEN
		RAISE EXCEPTION 'enterrecordlog: DocType is null, but DocNumber is not null. Log could not be submitted.';
	ELSE
		_docTypeId := null;
	END IF;

	INSERT INTO recordlog (	recordlog_module_id,
				recordlog_recordlogaction_id,
				recordlog_recordtype_id,
				recordlog_record_id,
				recordlog_doctype_id,
				recordlog_docnumber,
				recordlog_message,
				recordlog_usr_id,
				recordlog_secondary_recordtype_id,
				recordlog_secondary_record_id
				)
		VALUES (	_moduleId,
				_actionId,
				_recordTypeId,
				pRecordId,
				_docTypeId,
				pDocNumber,
				pMessage,
				_usrId,
				_secRecordTypeId,
				pSecRecordId
				);
	
	RETURN true;
END;
$_$;


ALTER FUNCTION public.enterrecordlog(text, text, text, integer, text, integer, text, text, text) OWNER TO postgres;

--
-- TOC entry 390 (class 1255 OID 36820)
-- Name: generatepart(text, text, text, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION generatepart(text, text, text, text, text, text, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS TABLE(_partnumber text, _revision text, _serialnumber text, _sequencenumber integer, _itemfreqcode text)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pDocNumber ALIAS FOR $3;
	pDocType ALIAS FOR $4;
	pLocation ALIAS FOR $5;
	pPartState ALIAS FOR $6;
	pLine	ALIAS FOR $7;
	pStation ALIAS FOR $8;
	_item RECORD;
	_docTypeId INTEGER;
	_locationId INTEGER;
	_partStateId INTEGER;
	_prefix TEXT;
	_serialPattern TEXT;
	_r RECORD;
	_message TEXT;
	_partId INTEGER;
	_usrId	INTEGER;
	_partActiveHistId	INTEGER;
  
BEGIN
	PERFORM (SELECT checkpriv('generatepart'));	
	_usrId := (SELECT getusrid());
	
	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'generatepart: Item Number % Not Found in AeryonMES', pItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev = pRevision) IS NULL THEN
		RAISE EXCEPTION 'generatepart: Revision % of Selected Item % Not Found in AeryonMES', pRevision, pItemNumber;
	END IF;

	_docTypeId := (SELECT getdoctypeid(pDocType));
	_locationId := (SELECT getlocid(pLocation));
	_partStateId := (SELECT getpartstateid(pPartState));

	_prefix := COALESCE(_item.serialprefix_prefix, 'SN');
	_serialPattern := COALESCE(_item.serialpattern_pattern, 'XXXXXX');

	IF _item.item_serialstream_id IS NULL THEN
		_sequencenumber := (	SELECT MAX(part_sequencenumber) + 1
					FROM part
					WHERE part_item_id = _item.item_id);
	ELSE
		_sequencenumber := (	SELECT MAX(part_sequencenumber) + 1
					FROM part
					WHERE part_item_id IN (SELECT item_id FROM item WHERE item_serialstream_id = _item.item_serialstream_id));	
	END IF;

	IF _sequencenumber IS NULL THEN
		_sequencenumber := 1;
	END IF;
	
	_serialnumber := (SELECT generateserial(_prefix, _sequenceNumber, _serialPattern));

	INSERT INTO part (part_item_id,
			  part_rev,
			  part_sequencenumber,
			  part_serialnumber,
			  part_loc_id,
			  part_create_doctype_id,
			  part_create_docnumber,
			  part_partstate_id)
		VALUES	 (_item.item_id,
			  pRevision,
			  _sequenceNumber,
			  _serialNumber,
			  _locationId,
			  _docTypeId,
			  pDocNumber,
			  _partStateId)
		RETURNING part_id INTO _partId;

	_message := 	pItemNumber || ' ' || 
			pRevision || ' ' || 
			_serialnumber || ' generated into location ' ||
			pLocation || ' with part state ' ||
			pPartState || ' on ' ||
			pDocType || ' ' ||
			pDocNumber || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Generated'::TEXT,
					pItemNumber,
					pRevision,
					_serialnumber,
					'Part Record'::TEXT,
					_partId,
					_message,
					pDocType,
					pDocNumber,
					pLine,
					pStation));

	INSERT INTO partactivehist (	partactivehist_part_id, 
					partactivehist_new_activestate,
					partactivehist_usr_id,
					partactivehist_orig_item_id,
					partactivehist_orig_rev,
					partactivehist_orig_serialnumber)
		VALUES (		_partId, 
					true,
					_usrId,
					_item.item_id,
					pRevision,
					_serialNumber
					)
		RETURNING partactivehist_id INTO _partActiveHistId;

	_message := 	pItemNumber || ' ' ||  
			pRevision || ' ' || 
			_serialnumber || ' made Active.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Activated'::TEXT,
					pItemNumber,
					pRevision,
					_serialnumber,
					'Active History'::TEXT,
					_partActiveHistId,
					_message,
					pDocType,
					pDocNumber,
					pLine,
					pStation));
		  
	_partnumber := pItemNumber;
	_revision := pRevision;
	_itemfreqcode := _item.itemfreqcode_freqcode;
	RETURN NEXT;
	RETURN;
END;$_$;


ALTER FUNCTION public.generatepart(text, text, text, text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 391 (class 1255 OID 36821)
-- Name: generateparts(text, text, text, text, text, text, integer, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION generateparts(text, text, text, text, text, text, integer, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS TABLE(_partnumber text, _revision text, _serialnumber text, _sequencenumber integer, _itemfreqcode text)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pDocNumber ALIAS FOR $3;
	pDocType ALIAS FOR $4;
	pLocation ALIAS FOR $5;
	pPartState ALIAS FOR $6;
	pQty ALIAS FOR $7;
	pLine ALIAS FOR $8;
	pStation ALIAS FOR $9;
	i INTEGER;
  
BEGIN
	PERFORM (SELECT checkpriv('generateparts'));
	
	FOR i IN 1..pQty LOOP
		RETURN QUERY (SELECT * FROM generatepart(pItemNumber, pRevision, pDocNumber, pDocType, pLocation, pPartState, pLine, pStation));
	END LOOP;
	
	RETURN;
END;$_$;


ALTER FUNCTION public.generateparts(text, text, text, text, text, text, integer, text, text) OWNER TO admin;

--
-- TOC entry 392 (class 1255 OID 36822)
-- Name: generateserial(text, integer, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION generateserial(text, integer, text) RETURNS text
    LANGUAGE plpgsql
    AS $_$DECLARE
	pPrefix ALIAS FOR $1;
	pSequenceNumber ALIAS FOR $2;
	pSerialPattern ALIAS FOR $3;
	_serialNumber TEXT;
	_serialPatternArray TEXT[];
	_sequenceLength INTEGER;
	_sequenceNumberPadded TEXT;
	_p TEXT;
	_i INTEGER;
	_c INTEGER;
	  
BEGIN
	PERFORM (SELECT checkpriv('generateserial'));
	
	SELECT string_to_array(pSerialPattern, '-') INTO _serialPatternArray;

	_serialNumber := pPrefix;
	
	_sequenceLength := (SELECT length(pSerialPattern) - length(regexp_replace(pSerialPattern, 'X', '', 'g')));
	_sequenceNumberPadded := (SELECT lpad(pSequenceNumber::TEXT, _sequenceLength, '0'));
	
	_c = 1;

	FOREACH _p IN ARRAY _serialPatternArray
	LOOP
		CASE 	WHEN _p LIKE 'Y%' THEN
				FOR _i IN 1..(SELECT length(_p)) 
				LOOP
					_serialNumber := _serialNumber || (SELECT FLOOR(RANDOM() * 10));
				END LOOP;
			WHEN _p LIKE 'X%' THEN
				_serialNumber := _serialNumber || (SELECT substr(_sequenceNumberPadded, _c, (SELECT length(_p))));
				_c := _c + length(_p);	
			ELSE
				_serialNumber := _serialNumber;
		END CASE;
	END LOOP;

	return _serialNumber;
END;$_$;


ALTER FUNCTION public.generateserial(text, integer, text) OWNER TO admin;

--
-- TOC entry 393 (class 1255 OID 36823)
-- Name: getcustfiletypeid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getcustfiletypeid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pcustFileType 	ALIAS FOR $1;
	_custFileTypeId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getcustfiletypeid'));

	IF pcustFileType IS NULL THEN
		RETURN null;
	END IF;

	SELECT custfiletype_id
	INTO _custFileTypeId
	FROM custfiletype
	WHERE custfiletype_name = pcustFileType;

	IF _custFileTypeId IS NULL THEN
		RAISE EXCEPTION 'getcustfiletypeid: file Type % not found.', 
			pcustFileType;
	END IF;

	RETURN _custFileTypeId;
END;
$_$;


ALTER FUNCTION public.getcustfiletypeid(text) OWNER TO admin;

--
-- TOC entry 394 (class 1255 OID 36824)
-- Name: getcustid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getcustid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pCust 	ALIAS FOR $1;
	_custId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getcustid'));

	SELECT cust_id
	INTO _custId
	FROM cust
	WHERE cust_number = pCust;

	IF _custId IS NULL THEN
		RAISE EXCEPTION 'getcustid: Customer % Not Found in AeryonMES', 
			pCust;
	END IF;

	RETURN _custId;
END;
$_$;


ALTER FUNCTION public.getcustid(text) OWNER TO admin;

--
-- TOC entry 385 (class 1255 OID 36825)
-- Name: getcustparamid(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getcustparamid(text, text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pType 			ALIAS FOR $1;
	pParam			ALIAS FOR $2;
	_custParam		RECORD;
BEGIN
	PERFORM (SELECT checkpriv('getcustparamid'));

	IF pParam IS NULL THEN
		RAISE EXCEPTION 'getcustparamid: Custom Parameter Name cannot be null.';
	END IF;

	IF pType != 'r' AND pType != 'p' THEN
		RAISE EXCEPTION 'getcustparamid: Custom Parameter Type must be r or p.';
	END IF;

	SELECT 	custparam_id
	INTO _custParam
	FROM custparam
	WHERE custparam_param = pParam
	AND custparam_type = pType
	AND custparam_void_timestamp IS NULL;

	IF _custParam.custparam_id IS NULL THEN
		RAISE EXCEPTION 'getcustparamid: Custom Parameter % of Type % not found or is inactive', 
			pParam,
			pType;
	END IF;

	RETURN _custParam.custparam_id;
END;
$_$;


ALTER FUNCTION public.getcustparamid(text, text) OWNER TO admin;

--
-- TOC entry 354 (class 1255 OID 36826)
-- Name: getcustparamvaluepart(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getcustparamvaluepart(text, text, text, text) RETURNS text
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pItemNumber		ALIAS FOR $2;
	pRevision		ALIAS FOR $3;
	pSerialNumber		ALIAS FOR $4;
	_custParamValue		TEXT;
	_partId 		INTEGER;
	_custParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('getcustparamvaluepart'));

	_custParamId := (SELECT getcustparamid('p', pParam));
		
	_partId = (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	_custParamValue := (	SELECT 	partcustparamvalue_value
				FROM viewpartcustparamvalue
				WHERE custparam_id = _custParamId
				AND part_id = _partId
				AND partcustparamvalue_void_timestamp IS NULL
				ORDER BY partcustparamvalue_submit_timestamp DESC
				LIMIT 1);

	RETURN _custParamValue;
END;$_$;


ALTER FUNCTION public.getcustparamvaluepart(text, text, text, text) OWNER TO admin;

--
-- TOC entry 395 (class 1255 OID 36827)
-- Name: getcustparamvaluerecord(text, text, integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getcustparamvaluerecord(text, text, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pRecordType		ALIAS FOR $2;
	pRecordId		ALIAS FOR $3;
	_custParamValue		TEXT;
	_recordTypeId 		INTEGER;
	_custParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('getcustparamvaluerecord'));

	IF pRecordId IS NULL THEN
		RAISE EXCEPTION 'getcustparamvaluerecord: Record ID cannot be null.';
	END IF;	

	_custParamId := (SELECT getcustparamid('r', pParam));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	_custParamValue := (	SELECT 	recordcustparamvalue_value
				FROM viewrecordcustparamvalue
				WHERE custparam_id = _custParamId
				AND recordtype_id = _recordTypeId
				AND recordcustparamvalue_record_id = pRecordId
				AND recordcustparamvalue_void_timestamp IS NULL
				ORDER BY recordcustparamvalue_submit_timestamp DESC
				LIMIT 1);

	RETURN _custParamValue;
END;$_$;


ALTER FUNCTION public.getcustparamvaluerecord(text, text, integer) OWNER TO admin;

--
-- TOC entry 396 (class 1255 OID 36828)
-- Name: getdatatypeid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getdatatypeid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pDataType 		ALIAS FOR $1;
	_dataType		RECORD;
BEGIN
	PERFORM (SELECT checkpriv('getdatatypeid'));

	SELECT 	datatype_id,
		datatype_active
	INTO _dataType
	FROM datatype
	WHERE datatype_type = lower(pDataType);

	IF _dataType.datatype_id IS NULL THEN
		RAISE EXCEPTION 'getdatatypeid: Data Type % Not Found in AeryonMES', 
			pDataType;
	ELSIF _dataType.datatype_active = false THEN
		RAISE EXCEPTION 'getdatatypeid: Data Type % is inactive', 
			pDataType;
	END IF;

	RETURN _dataType.datatype_id;
END;
$_$;


ALTER FUNCTION public.getdatatypeid(text) OWNER TO admin;

--
-- TOC entry 397 (class 1255 OID 36829)
-- Name: getdoctypeid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getdoctypeid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pDocType 	ALIAS FOR $1;
	_docTypeId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getdoctypeid'));

	SELECT doctype_id
	INTO _docTypeId
	FROM doctype
	WHERE doctype_name = pDocType;

	IF _docTypeId IS NULL THEN
		RAISE EXCEPTION 'getdoctypeid:  Doc Type % Not Found in AeryonMES', 
			pDocType;
	END IF;

	RETURN _docTypeId;
END;
$_$;


ALTER FUNCTION public.getdoctypeid(text) OWNER TO admin;

--
-- TOC entry 398 (class 1255 OID 36830)
-- Name: getfilepart(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getfilepart(text, text, text, text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
  pItemNumber ALIAS FOR $1;
  pRevision ALIAS FOR $2;
  pSerialNumber ALIAS FOR $3;
  pFileName ALIAS FOR $4;
  _partId	INTEGER;
  _partFile RECORD;
  _hexData TEXT;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('getfilepart'));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	SELECT 	partfile_id,
		partfile_partfiledata_id
	INTO _partFile
	FROM partfile
	WHERE partfile_filename = pFileName
	AND partfile_part_id = _partId
	AND partfile_void_timestamp IS NULL;

	IF _partFile.partfile_id IS NULL THEN
		RAISE EXCEPTION 'getfilepart: File with Name % does not exist for Item Number % Revision % Serial Number %.', 
			pFileName,
			pItemNumber,
			pRevision,
			pSerialNumber;
	END IF;

	SELECT encode(partfiledata_data, $$hex$$)
	INTO _hexData
	FROM partfiledata
	WHERE partfiledata_id = _partFile.partfile_partfiledata_id;

	RETURN _hexData;
END$_$;


ALTER FUNCTION public.getfilepart(text, text, text, text) OWNER TO admin;

--
-- TOC entry 399 (class 1255 OID 36831)
-- Name: getfilerecord(text, integer, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getfilerecord(text, integer, text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
  pRecordType ALIAS FOR $1;
  pRecordId ALIAS FOR $2;
  pFileName ALIAS FOR $3;
  _recordTypeId	INTEGER;
    _recordFile RECORD;
  _hexData	TEXT;

  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('getfilerecord'));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));
	
	SELECT recordfile_id,
		recordfile_recordfiledata_id
	INTO _recordFile
	FROM recordfile
	WHERE recordfile_filename = pFileName
	AND recordfile_recordtype_id = _recordTypeId
	AND recordfile_record_id = pRecordId
	AND recordfile_void_timestamp IS NULL;

	IF _recordFile.recordfile_id IS NULL THEN
		RAISE EXCEPTION 'getfilerecord: File with Name % and File Type % does not exist for Record Type % with ID %.', 
			pFileName,
			pFileType,
			pRecordType,
			pRecordId;
	END IF;

	SELECT encode(recordfiledata_data, $$hex$$)
	INTO _hexData
	FROM recordfiledata
	WHERE recordfiledata_id = _recordFile.recordfile_recordfiledata_id;

	RETURN _hexData;
END$_$;


ALTER FUNCTION public.getfilerecord(text, integer, text) OWNER TO admin;

--
-- TOC entry 400 (class 1255 OID 36832)
-- Name: getfiletypeid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getfiletypeid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pFileType 	ALIAS FOR $1;
	_fileTypeId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getfiletypeid'));

	IF pfileType IS NULL THEN
		RETURN null;
	END IF;

	SELECT filetype_id
	INTO _fileTypeId
	FROM filetype
	WHERE filetype_mediatypename = pFileType;

	IF _fileTypeId IS NULL THEN
		RAISE EXCEPTION 'getfiletypeid: file Type % not found.', 
			pfileType;
	END IF;

	RETURN _fileTypeId;
END;
$_$;


ALTER FUNCTION public.getfiletypeid(text) OWNER TO admin;

--
-- TOC entry 401 (class 1255 OID 36833)
-- Name: getitemid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getitemid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 	ALIAS FOR $1;
	_itemId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getitemid'));

	SELECT item_id
	INTO _itemId
	FROM item
	WHERE item_number = pItemNumber;

	IF _itemId IS NULL THEN
		RAISE EXCEPTION 'getitemid: Item Number % Not Found in AeryonMES', 
			pItemNumber;
	END IF;

	RETURN _itemId;
END;

	$_$;


ALTER FUNCTION public.getitemid(text) OWNER TO admin;

--
-- TOC entry 402 (class 1255 OID 36834)
-- Name: getlineid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getlineid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pLine 	ALIAS FOR $1;
	_lineId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getlineid'));

	SELECT line_id
	INTO _lineId
	FROM line
	WHERE line_name = pLine;

	IF _lineId IS NULL THEN
		RAISE EXCEPTION 'getlineid: line % Not Found in AeryonMES.', 
			pLine;
	END IF;

	RETURN _lineId;
END;
$_$;


ALTER FUNCTION public.getlineid(text) OWNER TO admin;

--
-- TOC entry 403 (class 1255 OID 36835)
-- Name: getlocid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getlocid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pLoc 	ALIAS FOR $1;
	_locId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getlocid'));

	SELECT loc_id
	INTO _locId
	FROM loc
	WHERE loc_number = pLoc;

	IF _locId IS NULL THEN
		RAISE EXCEPTION 'getlocid: Location % Not Found in AeryonMES', 
			pLoc;
	END IF;

	RETURN _locId;
END;
$_$;


ALTER FUNCTION public.getlocid(text) OWNER TO admin;

--
-- TOC entry 404 (class 1255 OID 36836)
-- Name: getmoduleid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getmoduleid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pModule 	ALIAS FOR $1;
	_moduleId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getmoduleid'));

	SELECT module_id
	INTO _moduleId
	FROM module
	WHERE module_name = pModule;

	IF _moduleId IS NULL THEN
		RAISE EXCEPTION 'getmoduleid: Module % Not Found in AeryonMES', 
			pModule;
	END IF;

	RETURN _moduleId;
END;
$_$;


ALTER FUNCTION public.getmoduleid(text) OWNER TO admin;

--
-- TOC entry 405 (class 1255 OID 36837)
-- Name: getpartid(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getpartid(text, text, text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 	ALIAS FOR $1;
	pRevision 	ALIAS FOR $2;
	pSerialNumber 	ALIAS FOR $3;
	_partid 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getpartid'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));

	SELECT part_id
	INTO _partid
	FROM part
	WHERE part_item_id = getitemid(pItemNumber) 
	AND part_rev = pRevision 
	AND part_serialnumber = pSerialNumber;

	RETURN _partid;
END;

	$_$;


ALTER FUNCTION public.getpartid(text, text, text) OWNER TO admin;

--
-- TOC entry 406 (class 1255 OID 36838)
-- Name: getpartlogactionid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getpartlogactionid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pPartLogAction 		ALIAS FOR $1;
	_partLogActionId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getpartlogactionid'));

	SELECT partlogaction_id
	INTO _partLogActionId
	FROM partlogaction
	WHERE partlogaction_name = pPartLogAction;

	IF _partLogActionId IS NULL THEN
		RAISE EXCEPTION 'getpartlogactionid: Part Log Action % Not Found in AeryonMES', 
			_partLogActionId;
	END IF;

	RETURN _partLogActionId;
END;
$_$;


ALTER FUNCTION public.getpartlogactionid(text) OWNER TO admin;

--
-- TOC entry 407 (class 1255 OID 36839)
-- Name: getpartscrapcodeid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getpartscrapcodeid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pPartScrapCode 	ALIAS FOR $1;
	_partScrapCodeId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getpartscrapcodeid'));

	SELECT partscrapcode_id
	INTO _partScrapCodeId
	FROM partscrapcode
	WHERE partscrapcode_code = pPartScrapCode;

	IF _partScrapCodeId IS NULL THEN
		RAISE EXCEPTION 'getpartscrapcodeid: Part Scrap Code % Not Found in AeryonMES', 
			pPartScrapCode;
	END IF;

	RETURN _partScrapCodeId;
END;
$_$;


ALTER FUNCTION public.getpartscrapcodeid(text) OWNER TO admin;

--
-- TOC entry 408 (class 1255 OID 36840)
-- Name: getpartstateid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getpartstateid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pPartState	ALIAS FOR $1;
	_partStateId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getpartstateid'));

	SELECT partstate_id 
	INTO _partStateId
	FROM partstate
	WHERE partstate_name = pPartState;

	IF _partStateId IS NULL THEN
		RAISE EXCEPTION 'getpartstateid: Part State % Not Found in AeryonMES', 
		pPartState;
	END IF;

	RETURN _partStateId;
END;
$_$;


ALTER FUNCTION public.getpartstateid(text) OWNER TO admin;

--
-- TOC entry 358 (class 1255 OID 36841)
-- Name: getprivid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getprivid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pPriv 		ALIAS FOR $1;
	_privId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getprivid'));

	SELECT priv_id
	INTO _privId
	FROM priv
	WHERE priv_name = pPriv;

	IF _privId IS NULL THEN
		RAISE EXCEPTION 'getprivid: Privilege % Not Found in AeryonMES', 
			pPriv;
	END IF;

	RETURN _privId;
END;
$_$;


ALTER FUNCTION public.getprivid(text) OWNER TO admin;

--
-- TOC entry 359 (class 1255 OID 36842)
-- Name: getrecordlogactionid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getrecordlogactionid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	precordlogAction 		ALIAS FOR $1;
	_recordlogActionId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getrecordlogactionid'));

	SELECT recordlogaction_id
	INTO _recordlogActionId
	FROM recordlogaction
	WHERE recordlogaction_name = precordlogAction;

	IF _recordlogActionId IS NULL THEN
		RAISE EXCEPTION 'getrecordlogactionid: Part Log Action % Not Found in AeryonMES', 
			_recordlogActionId;
	END IF;

	RETURN _recordlogActionId;
END;
$_$;


ALTER FUNCTION public.getrecordlogactionid(text) OWNER TO admin;

--
-- TOC entry 360 (class 1255 OID 36843)
-- Name: getrecordtypeid(text, boolean); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getrecordtypeid(text, boolean DEFAULT false) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pRecordType 	ALIAS FOR $1;
	pAllowNull	ALIAS FOR $2;
	_recordTypeId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getrecordtypeid'));

	IF pRecordType IS NULL AND pAllowNull = true THEN
		RETURN null;
	END IF;

	SELECT recordtype_id
	INTO _recordTypeId
	FROM recordtype
	WHERE recordtype_name = pRecordType;

	IF _recordTypeId IS NULL THEN
		RAISE EXCEPTION 'getrecordtypeid: Record Type % Not Found in AeryonMES', 
			pRecordType;
	END IF;

	RETURN _recordTypeId;
END;
$_$;


ALTER FUNCTION public.getrecordtypeid(text, boolean) OWNER TO admin;

--
-- TOC entry 361 (class 1255 OID 36844)
-- Name: getroleid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getroleid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pRole 		ALIAS FOR $1;
	_roleId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getroleid'));

	SELECT role_id
	INTO _roleId
	FROM role
	WHERE role_name = pRole;

	IF _roleId IS NULL THEN
		RAISE EXCEPTION 'getroleid: Role % Not Found in AeryonMES', 
			pRole;
	END IF;

	RETURN _roleId;
END;
$_$;


ALTER FUNCTION public.getroleid(text) OWNER TO admin;

--
-- TOC entry 366 (class 1255 OID 36845)
-- Name: getstationid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getstationid(text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
	pStation 	ALIAS FOR $1;
	_stationId 	INTEGER;
BEGIN
	PERFORM (SELECT checkpriv('getstationid'));

	SELECT station_id
	INTO _stationId
	FROM station
	WHERE station_name = pStation;

	IF _stationId IS NULL THEN
		RAISE EXCEPTION 'getstationid: Station % Not Found in AeryonMES.', 
			pStation;
	END IF;

	RETURN _stationId;
END;
$_$;


ALTER FUNCTION public.getstationid(text) OWNER TO admin;

--
-- TOC entry 367 (class 1255 OID 36846)
-- Name: getusrid(text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION getusrid(text DEFAULT "current_user"()) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
	pUserName 	ALIAS FOR $1;
	_usrInfo 	RECORD;
BEGIN
	PERFORM (SELECT checkpriv('getusrid'));
	SELECT usr_id, usr_active
	INTO _usrInfo
	FROM usr
	WHERE usr_username = pUserName;

	IF _usrInfo.usr_id IS NULL THEN
		RAISE EXCEPTION 'getusrid: User % does not exist.', 
			pUserName;
	ELSIF _usrInfo.usr_active = false THEN
		RAISE EXCEPTION 'getusrid: User % is inactive.', 
			pUserName;
	END IF;
	
	RETURN _usrInfo.usr_id;
END;
	$_$;


ALTER FUNCTION public.getusrid(text) OWNER TO admin;

--
-- TOC entry 377 (class 1255 OID 36847)
-- Name: postbackflush(integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION postbackflush(integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pBackflushId	ALIAS FOR $1;
	_backflushCheck	RECORD;
	_usrId 		INTEGER;
	_message 	TEXT;
  
BEGIN
	_usrId := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('postbackflush'));

	SELECT 	backflush_id, 
		backflush_part_id,
		item_number, 
		backflush_orig_item_id, 
		backflush_orig_rev, 
		backflush_orig_serialnumber, 
		backflush_qty, 
		doctype_name, 
		backflush_docnumber,
		backflush_void_timestamp, 
		backflush_complete_timestamp
	INTO _backflushCheck
	FROM backflush 
	LEFT OUTER JOIN item ON item_id = backflush_orig_item_id
	LEFT OUTER JOIN doctype ON doctype_id = backflush_doctype_id
	WHERE backflush_id = pBackflushId;
	
	IF _backflushCheck.backflush_id IS NULL THEN
		RAISE EXCEPTION 'postbackflush: Backflush ID % does not exist.',
			pBackflushId;
	ELSIF _backflushCheck.backflush_void_timestamp IS NOT NULL THEN
		RAISE EXCEPTION 'postbackflush: Backflush ID % is VOID and cannot be posted.',
			pBackflushId;
	ELSIF _backflushCheck.backflush_complete_timestamp IS NOT NULL THEN
		RAISE EXCEPTION 'postbackflush: Backflush ID % is COMPLETE and cannot be posted.',
			pBackflushId;
	END IF;

	
	UPDATE backflush
	SET	(backflush_complete_usr_id,
		 backflush_complete_timestamp)
	=	(_usrId,
		 now())
	WHERE backflush_id = pBackflushId;
	
	_message := 	'Backflush ID ' ||
			pBackflushID || ' posted: ' ||
			_backflushCheck.item_number || ' ' || 
			_backflushCheck.backflush_orig_rev || ' ' || 
			_backflushCheck.backflush_orig_serialnumber || ' qty ' || 
			_backflushCheck.backflush_qty || ' on ' || 
			_backflushCheck.doctype_name || ' ' || 
			_backflushCheck.backflush_docnumber || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Post Backflush'::TEXT,
					_backflushCheck.item_number,
					_backflushCheck.backflush_orig_rev,
					_backflushCheck.backflush_orig_serialnumber,
					'Backflush ID'::TEXT,
					pBackflushId,
					_message,
					_backflushCheck.doctype_name, 
					_backflushCheck.backflush_docnumber));

	RETURN true;
END;$_$;


ALTER FUNCTION public.postbackflush(integer) OWNER TO admin;

--
-- TOC entry 409 (class 1255 OID 36848)
-- Name: refurbpart(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION refurbpart(text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	_viewpart RECORD;
	_usrId INTEGER;
	_partRefurbHistId INTEGER;
	_message TEXT;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('refurbpart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));
	
	SELECT 	part_id, 
		item_id,
		part_rev,
		item_number,
		part_active,
		part_refurb,
		part_serialnumber, 
		part_sequencenumber,
		part_cust_id,
		loc_number
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	IF _viewpart.part_refurb THEN
		RETURN true;
	END IF;
	
	UPDATE part SET (part_refurb) =
			(true)
	WHERE part_id = _viewpart.part_id;

	INSERT INTO partrefurbhist (	partrefurbhist_part_id, 
					partrefurbhist_refurb,
					partrefurbhist_usr_id,
					partrefurbhist_orig_item_id,
					partrefurbhist_orig_rev,
					partrefurbhist_orig_serialnumber)
		VALUES (		_viewpart.part_id, 
					true,
					_usrId,
					_viewpart.item_id,
					_viewpart.part_rev,
					_viewpart.part_serialnumber)
		RETURNING partrefurbhist_id INTO _partRefurbHistId;

	_message := 	pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || ' Refurbed.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Refurbed'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Refurb History'::TEXT,
					_partRefurbHistId,
					_message));

	PERFORM (SELECT activatepart(pItemNumber, pRevision, pSerialNumber));

	RETURN true;
END;$_$;


ALTER FUNCTION public.refurbpart(text, text, text) OWNER TO admin;

--
-- TOC entry 410 (class 1255 OID 36849)
-- Name: refurbsummsubass(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION refurbsummsubass(text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	_usrId INTEGER;
	_r RECORD;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('refurbsummsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));
	
	PERFORM (SELECT refurbpart(	pItemNumber,
					pRevision,
					pSerialNumber));
	
	FOR _r IN
		SELECT *
		FROM summsubass(	pItemNumber,
					pRevision,
					pSerialNumber)
	LOOP
		IF _r.c_item_number IS NOT NULL THEN
			PERFORM (SELECT refurbpart(	_r.c_item_number,
							_r.c_part_rev,
							_r.c_part_serialnumber));
		END IF;
	END LOOP;
		  
	RETURN true;
END;$_$;


ALTER FUNCTION public.refurbsummsubass(text, text, text) OWNER TO admin;

--
-- TOC entry 411 (class 1255 OID 36850)
-- Name: removecustparam(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removecustparam(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pType 			ALIAS FOR $1;
	pParam	 		ALIAS FOR $2;
	_custParam 		RECORD;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removecustparam'));

	IF pParam IS NULL THEN
		RAISE EXCEPTION 'removecustparam: Custom Parameter Name cannot be null.';
	END IF;

	IF pType != 'r' AND pType != 'p' THEN
		RAISE EXCEPTION 'removecustparam: Custom Parameter must be of Type r or p.';
	END IF;
	
	SELECT 	custparam_id,
		custparam_type, 
		custparam_param,
		custparam_datatype_id,
		datatype_type 	
	INTO _custParam
	FROM custparam
	LEFT OUTER JOIN datatype
		ON datatype.datatype_id = custparam.custparam_datatype_id
	WHERE custparam_param = pParam 
	AND custparam_type = pType
	AND custparam_void_timestamp IS NULL;

	IF _custParam.custparam_id IS NULL THEN
		RETURN true;
	END IF;

	UPDATE 	custparam 
	SET 	(custparam_void_timestamp)
	= 	(now())
	WHERE 	custparam_param = pParam
	AND	custparam_type = pType
	AND	custparam_void_timestamp IS NULL;
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.removecustparam(text, text) OWNER TO admin;

--
-- TOC entry 412 (class 1255 OID 36851)
-- Name: removecustparamcombo(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removecustparamcombo(text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pType 			ALIAS FOR $1;
	pParam	 		ALIAS FOR $2;
	pValue			ALIAS FOR $3;
	_custParamCombo		RECORD;
	_custParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removecustparamcombo'));

	IF pParam IS NULL THEN
		RAISE EXCEPTION 'removecustparamcombo: Custom Parameter Name cannot be null.';
	END IF;

	IF pType != 'r' AND pType != 'p' THEN
		RAISE EXCEPTION 'removecustparamcombo: Custom Parameter must be of Type r or p.';
	END IF;

	_custParamId := (SELECT getcustparamid(pType, pParam));
	
	SELECT 	custparamcombo_id,
		custparamcombo_custparam_id, 
		custparamcombo_value,
		custparamcombo_active
	INTO _custParamCombo
	FROM custparamcombo
	WHERE custparamcombo_custparam_id = _custParamId
	AND custparamcombo_value = pValue
	AND custparamcombo_active = true;

	IF _custParamCombo.custparamcombo_id IS NULL THEN
		RETURN true;
	END IF;

	UPDATE custparamcombo 
	SET custparamcombo_active = false 
	WHERE custparamcombo_custparam_id = _custParamId 
	AND custparamcombo_value = pValue;
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.removecustparamcombo(text, text, text) OWNER TO admin;

--
-- TOC entry 413 (class 1255 OID 36852)
-- Name: removecustparamlinkitem(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removecustparamlinkitem(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pItemNumber			ALIAS FOR $2;
	_itemCustParamLink		RECORD;
	_custParamId		INTEGER;
	_itemId			INTEGER;

  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removecustparamlinkitem'));

	_custParamId := (SELECT getcustparamid('p', pParam));

	_itemId := (SELECT getitemid(pItemNumber));

	SELECT 	itemcustparamlink_id,
		itemcustparamlink_custparam_id, 
		itemcustparamlink_item_id,
		itemcustparamlink_active
	INTO _itemCustParamLink
	FROM itemcustparamlink
	WHERE itemcustparamlink_custparam_id = _custParamId
	AND itemcustparamlink_item_id = _itemId
	AND itemcustparamlink_active = true;

	IF _itemCustParamLink.itemcustparamlink_id IS NULL THEN
		RETURN true;
	ELSIF _itemCustParamLink.itemcustparamlink_id IS NOT NULL AND _itemCustParamLink.itemcustparamlink_active = true THEN
		UPDATE itemcustparamlink 
		SET itemcustparamlink_active = false
		WHERE itemcustparamlink_custparam_id = _custParamId 
		AND itemcustparamlink_item_id = _itemId;
	END IF;
					
	RETURN true;
END;$_$;


ALTER FUNCTION public.removecustparamlinkitem(text, text) OWNER TO admin;

--
-- TOC entry 414 (class 1255 OID 36853)
-- Name: removecustparamlinkrecord(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removecustparamlinkrecord(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pRecordType			ALIAS FOR $2;
	_recordCustParamLink		RECORD;
	_custParamId		INTEGER;
	_recordTypeid			INTEGER;

  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removecustparamlinkrecord'));

	_custParamId := (SELECT getcustparamid('r', pParam));

	_recordTypeid := (SELECT getrecordtypeid(pRecordType));

	SELECT 	recordcustparamlink_id,
		recordcustparamlink_custparam_id, 
		recordcustparamlink_recordtype_id,
		recordcustparamlink_active
	INTO _recordCustParamLink
	FROM recordcustparamlink
	WHERE recordcustparamlink_custparam_id = _custParamId
	AND recordcustparamlink_recordtype_id = _recordTypeid
	AND recordcustparamlink_active = true;

	IF _recordCustParamLink.recordcustparamlink_id IS NULL THEN
		RETURN true;
	ELSIF _recordCustParamLink.recordcustparamlink_id IS NOT NULL AND _recordCustParamLink.recordcustparamlink_active = true THEN
		UPDATE recordcustparamlink 
		SET recordcustparamlink_active = false 
		WHERE recordcustparamlink_custparam_id = _custParamId 
		AND recordcustparamlink_recordtype_id = _recordTypeid;
	END IF;
					
	RETURN true;
END;$_$;


ALTER FUNCTION public.removecustparamlinkrecord(text, text) OWNER TO admin;

--
-- TOC entry 415 (class 1255 OID 36854)
-- Name: removecustparamvaluepart(text, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION removecustparamvaluepart(text, text, text, text, boolean DEFAULT true) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pItemNumber		ALIAS FOR $2;
	pRevision		ALIAS FOR $3;
	pSerialNumber		ALIAS FOR $4;
	pLog			ALIAS FOR $5;
	_partId 		INTEGER;
	_custParamId		INTEGER;
	_r			RECORD;
	_message		TEXT;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removecustparamvaluepart'));

	_custParamId := (SELECT getcustparamid('p', pParam));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	FOR _r IN
		SELECT custparam_id
		FROM custparam
		WHERE custparam_param = pParam
		AND custparam_type = 'p'
	LOOP
		IF _r.custparam_id IS NOT NULL THEN
			UPDATE partcustparamvalue
			SET partcustparamvalue_void_timestamp = now()
			WHERE partcustparamvalue_custparam_id = _r.custparam_id
			AND partcustparamvalue_part_id = _partId
			AND partcustparamvalue_void_timestamp IS NULL;
		END IF;
	END LOOP;

	IF pLog = true THEN
		_message := 'Custom Parameter ' ||
			pParam || ' removed for ' ||
			pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || '.';

		PERFORM (SELECT enterpartlog(	'Custom Parameter'::TEXT, 
						'Custom Parameter Removed',
						pItemNumber,
						pRevision,
						pSerialNumber,
						'Part Custom Parameter Value History'::TEXT,
						null,
						_message));
	END IF;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.removecustparamvaluepart(text, text, text, text, boolean) OWNER TO postgres;

--
-- TOC entry 416 (class 1255 OID 36855)
-- Name: removecustparamvaluerecord(text, text, integer, boolean); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removecustparamvaluerecord(text, text, integer, boolean DEFAULT true) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pParam	 		ALIAS FOR $1;
	pRecordType		ALIAS FOR $2;
	pRecordId		ALIAS FOR $3;
	pLog			ALIAS FOR $4;
	_recordTypeId 		INTEGER;
	_custParamId		INTEGER;
	_r			RECORD;
	_message		TEXT;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removecustparamvaluerecord'));

	IF pRecordId IS NULL THEN
		RAISE EXCEPTION 'removecustparamvaluerecord: Record ID cannot be null.';
	END IF;	

	_custParamId := (SELECT getcustparamid('r', pParam));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	FOR _r IN
		SELECT custparam_id
		FROM custparam
		WHERE custparam_param = pParam
		AND custparam_type = 'r'
	LOOP
		IF _r.custparam_id IS NOT NULL THEN
			UPDATE recordcustparamvalue
			SET recordcustparamvalue_void_timestamp = now()
			WHERE recordcustparamvalue_custparam_id = _r.custparam_id
			AND recordcustparamvalue_recordtype_id = _recordTypeId
			AND recordcustparamvalue_record_id = pRecordId
			AND recordcustparamvalue_void_timestamp IS NULL;
		END IF;
	END LOOP;

	IF pLog = true THEN
		_message := 'Custom Parameter ' ||
			pParam || ' removed for ' ||
			pRecordType || ' with ID ' ||  
			pRecordId || '.';

		PERFORM (SELECT enterrecordlog(	'Custom Parameter'::TEXT, 
						'Custom Parameter Removed',
						pRecordType,
						pRecordId,
						'Record Custom Parameter Value History'::TEXT,
						null,
						_message));
	END IF;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.removecustparamvaluerecord(text, text, integer, boolean) OWNER TO admin;

--
-- TOC entry 417 (class 1255 OID 36856)
-- Name: removedoclinkpart(text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removedoclinkpart(text, text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pDocType 		ALIAS FOR $1;
	pDocNumber		ALIAS FOR $2;
	pItemNumber		ALIAS FOR $3;
	pRevision		ALIAS FOR $4;
	pSerialNumber		ALIAS FOR $5;
	_partId 		INTEGER;
	_docTypeId		INTEGER;
	_message		TEXT;
	_checkPartDocLinkId	INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removedoclinkpart'));

	_docTypeId := (SELECT getdoctypeid(pDocType));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	_checkPartDocLinkId := (SELECT partdoclink_id
				FROM viewpartdoclink
				WHERE 	doctype_name = pDocType
				AND	partdoclink_docnumber = pDocNumber
				AND 	part_id = _partId
				AND	partdoclink_void_timestamp IS NULL);

	IF _checkPartDocLinkId IS NULL THEN
		RETURN true;
	END IF;
	
	UPDATE partdoclink
	SET partdoclink_void_timestamp = now()
	WHERE partdoclink_doctype_id = _docTypeId
	AND partdoclink_part_id = _partId
	AND partdoclink_docnumber = pDocNumber
	AND partdoclink_void_timestamp IS NULL;

	_message := 'Document Link ' ||
		pDocType || ' removed with Document Number ' ||
		pDocNumber || ' from ' ||
		pItemNumber || ' ' ||  
		pRevision || ' ' || 
		pSerialNumber || '.';

	PERFORM (SELECT enterpartlog(	'Document Link'::TEXT, 
					'Document Link Removed'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Part Document Link History'::TEXT,
					_checkPartDocLinkId,
					_message));
						
	RETURN true;
END;$_$;


ALTER FUNCTION public.removedoclinkpart(text, text, text, text, text) OWNER TO admin;

--
-- TOC entry 418 (class 1255 OID 36857)
-- Name: removedoclinkrecord(text, text, text, integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removedoclinkrecord(text, text, text, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pDocType 		ALIAS FOR $1;
	pDocNumber		ALIAS FOR $2;
	pRecordType		ALIAS FOR $3;
	pRecordId		ALIAS FOR $4;
	_recordTypeId 		INTEGER;
	_docTypeId		INTEGER;
	_message		TEXT;
	_checkRecordDocLinkId	INTEGER;
	_recordDocLinkId	INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('adddoclinkpart'));

	_docTypeId := (SELECT getdoctypeid(pDocType));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	_checkRecordDocLinkId := (SELECT recorddoclink_id
				FROM viewrecorddoclink
				WHERE 	doctype_name = pDocType
				AND	recorddoclink_docnumber = pDocNumber
				AND 	recordtype_name = pRecordType
				AND 	recorddoclink_record_id = pRecordId
				AND	recorddoclink_void_timestamp IS NULL);

	IF _checkRecordDocLinkId IS NULL THEN
		RETURN true;
	END IF;
	
	UPDATE recorddoclink
	SET recorddoclink_void_timestamp = now()
	WHERE recorddoclink_doctype_id = _docTypeId
	AND recorddoclink_recordtype_id = _recordTypeId
	AND recorddoclink_record_id = pRecordId
	AND recorddoclink_docnumber = pDocNumber
	AND recorddoclink_void_timestamp IS NULL;
	
	_message := 'Document Link ' ||
		pDocType || ' removed with Document Number ' ||
		pDocNumber || ' from ' ||
		pRecordType || ' with ID ' ||  
		pRecordId || '.';

	PERFORM (SELECT enterrecordlog(	'Document Link'::TEXT, 
					'Document Link Removed'::TEXT,
					pRecordType,
					pRecordId,
					'Record Document Link History'::TEXT,
					_checkRecordDocLinkId,
					_message));
						
	RETURN true;
END;$_$;


ALTER FUNCTION public.removedoclinkrecord(text, text, text, integer) OWNER TO admin;

--
-- TOC entry 421 (class 1255 OID 36858)
-- Name: removefilepart(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removefilepart(text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
  pItemNumber ALIAS FOR $1;
  pRevision ALIAS FOR $2;
  pSerialNumber ALIAS FOR $3;
  pFileName ALIAS FOR $4;
  _partId	INTEGER;
  _partFileId INTEGER;
  _message TEXT;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removefilepart'));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	SELECT partfile_id
	INTO _partFileId
	FROM partfile
	WHERE partfile_filename = pFileName
	AND partfile_part_id = _partId
	AND partfile_void_timestamp IS NULL;

	IF _partFileId IS NULL THEN
		RETURN true;
	END IF;

	UPDATE partfile
	SET	partfile_void_timestamp = now()
	WHERE partfile_filename = pFileName
	AND partfile_part_id = _partId
	AND partfile_void_timestamp IS NULL;

	_message := 	'File ' || 
			pFileName || ' removed from Part ' || 
			pItemNumber || ' ' || 
			pRevision || ' ' || 
			pSerialNumber || '.';
	
	PERFORM (SELECT enterpartlog(	'File Attachement'::TEXT, 
					'File Removed'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Part File Attachement History'::TEXT,
					_partFileId,
					_message));

	RETURN true;
END$_$;


ALTER FUNCTION public.removefilepart(text, text, text, text) OWNER TO admin;

--
-- TOC entry 422 (class 1255 OID 36859)
-- Name: removefilerecord(text, integer, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removefilerecord(text, integer, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
  pRecordType ALIAS FOR $1;
  pRecordId ALIAS FOR $2;
  pFileName ALIAS FOR $3;
  _recordTypeId	INTEGER;
  _recordFileId INTEGER;
  _message TEXT;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removefilerecord'));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));
	
	SELECT recordfile_id
	INTO _recordFileId
	FROM recordfile
	WHERE recordfile_filename = pFileName
	AND recordfile_recordtype_id = _recordTypeId
	AND recordfile_record_id = pRecordId
	AND recordfile_void_timestamp IS NULL;

	IF _recordFileId IS NULL THEN
		RETURN true;
	END IF;

	UPDATE recordfile
	SET recordfile_void_timestamp = now()
	WHERE recordfile_filename = pFileName
	AND recordfile_recordtype_id = _recordTypeId
	AND recordfile_record_id = pRecordId
	AND recordfile_void_timestamp IS NULL;

	_message := 	'File ' || 
			pFileName || ' removed fromo Record Type ' || 
			pRecordType || ' with ID ' || 
			pRecordId || '.';

	PERFORM (SELECT enterrecordlog(	'File Attachement'::TEXT, 
					'File Removed'::TEXT,
					pRecordType,
					pRecordId,
					'Record File Attachement History'::TEXT,
					_recordFileId,
					_message));

	RETURN true;
END$_$;


ALTER FUNCTION public.removefilerecord(text, integer, text) OWNER TO admin;

--
-- TOC entry 423 (class 1255 OID 36860)
-- Name: removerolepriv(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removerolepriv(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pPriv 			ALIAS FOR $1;
	pRole 		ALIAS FOR $2;
	_rolePriv 		RECORD;
	_roleId 			INTEGER;
	_privId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removerolepriv'));
	_roleId := (SELECT getroleid(pRole));
	_privId := (SELECT getprivid(pPriv));
	
	SELECT 	rolepriv_id,
		rolepriv_priv_id, 
		rolepriv_role_id 	
	INTO _rolePriv
	FROM rolepriv
	WHERE rolepriv_priv_id = _privId 
	AND rolepriv_role_id = _roleId;

	IF _rolePriv.rolepriv_id IS NULL THEN
		RETURN true;
	END IF;

	DELETE 
	FROM rolepriv
	WHERE rolepriv_priv_id = _privId
	AND rolepriv_role_id = _roleId;
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.removerolepriv(text, text) OWNER TO admin;

--
-- TOC entry 424 (class 1255 OID 36861)
-- Name: removeroleprivmodule(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removeroleprivmodule(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pModule			ALIAS FOR $1;
	pRole 		ALIAS FOR $2;
	_r			RECORD;
	_moduleId 		INTEGER;
	_roleId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removeroleprivmodule'));
	_moduleId := (SELECT getmoduleid(pModule));
	_roleId := (SELECT getroleid(pRole));

	FOR _r IN
		SELECT priv_name
		FROM priv
		WHERE priv_module_id = _moduleId
	LOOP
		IF _r.priv_name IS NOT NULL THEN
			PERFORM (SELECT removerolepriv(	_r.priv_name,
							pRole));
		END IF;
	END LOOP;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.removeroleprivmodule(text, text) OWNER TO admin;

--
-- TOC entry 425 (class 1255 OID 36862)
-- Name: removeusrpriv(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removeusrpriv(text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pPriv 			ALIAS FOR $1;
	pUserName 		ALIAS FOR $2;
	_usrPriv 		RECORD;
	_usrId 			INTEGER;
	_privId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removeusrpriv'));
	_usrId := (SELECT getusrid(pUserName));
	_privId := (SELECT getprivid(pPriv));
	
	SELECT 	usrpriv_id,
		usrpriv_priv_id, 
		usrpriv_usr_id 	
	INTO _usrPriv
	FROM usrpriv
	WHERE usrpriv_priv_id = _privId 
	AND usrpriv_usr_id = _usrId;

	IF _usrPriv.usrpriv_id IS NULL THEN
		RETURN true;
	END IF;

	DELETE 
	FROM usrpriv 
	WHERE usrpriv_priv_id =	_privId
	AND usrpriv_usr_id = _usrId;
				
	RETURN true;
END;$_$;


ALTER FUNCTION public.removeusrpriv(text, text) OWNER TO admin;

--
-- TOC entry 419 (class 1255 OID 36863)
-- Name: removeusrprivmodule(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removeusrprivmodule(text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pModule			ALIAS FOR $1;
	pUserName 		ALIAS FOR $2;
	_r			RECORD;
	_moduleId 		INTEGER;
	_usrId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removeusrprivmodule'));
	_moduleId := (SELECT getmoduleid(pModule));
	_usrId := (SELECT getusrid(pUserName));

	FOR _r IN
		SELECT priv_name
		FROM priv
		WHERE priv_module_id = _moduleId
	LOOP
		IF _r.priv_name IS NOT NULL THEN
			PERFORM (SELECT removeusrpriv(	_r.priv_name,
							pUserName));
		END IF;
	END LOOP;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.removeusrprivmodule(text, text) OWNER TO admin;

--
-- TOC entry 420 (class 1255 OID 36864)
-- Name: removeusrrole(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removeusrrole(text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pRole			ALIAS FOR $1;
	pUserName 		ALIAS FOR $2;
	_usrRole 		RECORD;
	_roleId 		INTEGER;
	_usrId			INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('removeusrrole'));
	_roleId := (SELECT getroleid(pRole));
	_usrId := (SELECT getusrid(pUserName));
	
	SELECT 	usrrole_id,
		usrrole_usr_id, 
		usrrole_role_id 	
	INTO _usrRole
	FROM usrrole
	WHERE usrrole_usr_id = _usrId 
	AND usrrole_role_id = _roleId;

	IF _usrRole.usrrole_id IS NULL THEN
		RETURN true;
	END IF;

	DELETE 
	FROM usrrole
	WHERE usrrole_usr_id = _usrId
	AND usrrole_role_id = _roleId;
		
	RETURN true;
END;$_$;


ALTER FUNCTION public.removeusrrole(text, text) OWNER TO admin;

--
-- TOC entry 426 (class 1255 OID 36865)
-- Name: removewatcherpart(text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removewatcherpart(text, text, text, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber		ALIAS FOR $1;
	pRevision		ALIAS FOR $2;
	pSerialNumber		ALIAS FOR $3;
	pUser			ALIAS FOR $4;
	_partId 		INTEGER;
	_usrId			INTEGER;
	_partWatcherId		INTEGER;
  
BEGIN
	_usrId := (SELECT getusrid(pUser));
	
	PERFORM (SELECT checkpriv('removewatcherpart'));
		
	_partId := (SELECT getpartid(pItemNumber, pRevision, pSerialNumber));

	_partWatcherId := 	(SELECT partwatcher_id 
				 FROM partwatcher
				 WHERE partwatcher_part_id = _partId
				 AND partwatcher_usr_id = _usrId);

	IF _partWatcherId IS NULL THEN
		RETURN true;
	END IF;
	
	DELETE
	FROM partwatcher
	WHERE partwatcher_part_id = _partId
	AND partwatcher_usr_id = _usrId;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.removewatcherpart(text, text, text, text) OWNER TO admin;

--
-- TOC entry 427 (class 1255 OID 36866)
-- Name: removewatcherrecord(text, integer, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION removewatcherrecord(text, integer, text DEFAULT "current_user"()) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pRecordType		ALIAS FOR $1;
	pRecordId		ALIAS FOR $2;
	pUser			ALIAS FOR $3;
	_recordTypeId 		INTEGER;
	_usrId			INTEGER;
	_recordWatcherId		INTEGER;
  
BEGIN
	_usrId := (SELECT getusrid(pUser));
	
	PERFORM (SELECT checkpriv('removewatcherrecord'));
		
	_recordTypeId := (SELECT getrecordtypeid(pRecordType));

	_recordWatcherId := 	(SELECT recordwatcher_id 
				 FROM recordwatcher
				 WHERE recordwatcher_recordtype_id = _recordTypeId
				 AND recordwatcher_record_id = pRecordId
				 AND recordwatcher_usr_id = _usrId);

	IF _recordWatcherId IS NULL THEN
		RETURN true;
	END IF;
	
	DELETE
	FROM recordwatcher
	WHERE recordwatcher_recordtype_id = _recordTypeId
	AND recordwatcher_record_id = pRecordId
	AND recordwatcher_usr_id = _usrId;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.removewatcherrecord(text, integer, text) OWNER TO admin;

--
-- TOC entry 430 (class 1255 OID 36867)
-- Name: revdownpart(text, text, text, text, text, boolean, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION revdownpart(text, text, text, text, text, boolean DEFAULT false, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS TABLE(_partnumber text, _revision text, _serialnumber text, _sequencenumber integer, _itemfreqcode text)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 		ALIAS FOR $1;
	pCurrentRevision 	ALIAS FOR $2;
	pSerialNumber 		ALIAS FOR $3;
	pDocNumber 		ALIAS FOR $4;
	pDocType 		ALIAS FOR $5;
	pNpi 			ALIAS FOR $6;
	pLine			ALIAS FOR $7;
	pStation		ALIAS FOR $8;
	_viewpart 		RECORD;
	_item 			RECORD;
	_docTypeId 		INTEGER;
	_locationId 		INTEGER;
	_partStateId 		INTEGER;
	_prefix 		TEXT;
	_serialPattern 		TEXT;
	_targetRevision 	TEXT;
	_npiRevision 		BOOLEAN;
	_r 			RECORD;
	_message 		TEXT;
	_changeRevPart 		RECORD;
  
BEGIN
	PERFORM (SELECT checkpriv('revdownpart'));
	PERFORM (SELECT validatepart(pItemNumber, pCurrentRevision, pSerialNumber));

	SELECT item_number, part_serialnumber, part_sequencenumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber AND part_serialnumber = pSerialNumber AND part_rev = pCurrentRevision;
	
	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'revdownpart: Item Number % not found in AeryonMES', pItemNumber;
	END IF;

	_docTypeId := (SELECT getdoctypeid(pDocType));
	_npiRevision := pNpi;
	
	IF _npiRevision = false THEN
		SELECT itemrev_npi
		INTO _npiRevision
		FROM itemrev
		WHERE itemrev_item_id = _item.item_id
			AND itemrev_rev = pCurrentRevision;
	END IF;
		
	SELECT itemrevflow_start_rev
	INTO _targetRevision
	FROM itemrevflow
	WHERE itemrevflow_item_id = _item.item_id
		AND itemrevflow_end_rev = pCurrentRevision
		AND itemrevflow_npi = _npiRevision;

	IF pCurrentRevision = '00' THEN
		RAISE EXCEPTION 'revdownpart: Cannot RevDown Part at Revision 00';
	ElSIF _targetRevision IS NULL THEN
		_targetRevision := lpad((pCurrentRevision::INTEGER - 1)::TEXT, 2, '0');
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev = _targetRevision) IS NULL THEN
		RAISE EXCEPTION 'revdownpart: Target Revision % of Selected Item % Not Found in AeryonMES', _targetRevision, pItemNumber;
	END IF;

	SELECT * 
	INTO _changeRevPart
	FROM changerevpart(	pItemNumber, 
				pCurrentRevision, 
				pSerialNumber, 
				pDocNumber, 
				pDocType, 
				_targetRevision,
				pLine,
				pStation);

	_message := 	pItemNumber || ' down reved from ' ||  
			pCurrentRevision || ' to ' || 
			_targetRevision || ' for ' ||
			pSerialNumber || ' on ' ||
			pDocType || ' ' ||
			pDocNumber || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Down Reved'::TEXT,
					pItemNumber,
					_targetRevision,
					pSerialNumber,
					'Revision History'::TEXT,
					_changeRevPart._partrevhistid,
					_message,
					pDocType,
					pDocNumber));
		  
	_partnumber := pItemNumber;
	_serialnumber := pSerialNumber;
	_revision := _targetRevision;
	_itemfreqcode := _item.itemfreqcode_freqcode;
	_sequencenumber := _viewpart.part_sequencenumber;
	
	RETURN NEXT;
	RETURN;
END;$_$;


ALTER FUNCTION public.revdownpart(text, text, text, text, text, boolean, text, text) OWNER TO admin;

--
-- TOC entry 431 (class 1255 OID 36868)
-- Name: reversebackflush(integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION reversebackflush(integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pBackflushId	ALIAS FOR $1;
	_backflushCheck	RECORD;
	_usrId 		INTEGER;
	_message 	TEXT;
  
BEGIN
	_usrId := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('reversebackflush'));

	SELECT 	backflush_id, 
		backflush_part_id,
		item_number, 
		backflush_item_id, 
		backflush_rev, 
		backflush_serialnumber, 
		backflush_qty, 
		doctype_name, 
		backflush_docnumber,
		backflush_void_timestamp, 
		backflush_complete_timestamp
	INTO _backflushCheck
	FROM backflush 
	LEFT OUTER JOIN item ON item_id = backflush_item_id
	LEFT OUTER JOIN doctype ON doctype_id = backflush_doctype_id
	WHERE backflush_id = pBackflushId;
	
	IF _backflushCheck.backflush_id IS NULL THEN
		RAISE EXCEPTION 'reversebackflush: Backflush ID % does not exist.',
			pBackflushId;
	ELSIF _backflushCheck.backflush_void_timestamp IS NOT NULL THEN
		RAISE EXCEPTION 'reversebackflush: Backflush ID % is VOID and cannot be reversed.',
			pBackflushId;
	ELSIF _backflushCheck.backflush_complete_timestamp IS NULL THEN
		RAISE EXCEPTION 'reversebackflush: Backflush ID % is NOT COMPLETE and cannot be reversed.',
			pBackflushId;
	END IF;

	
	UPDATE backflush
	SET	(backflush_complete_usr_id,
		 backflush_complete_timestamp)
	=	(null,
		 null)
	WHERE backflush_id = pBackflushId;
	
	_message := 	'Backflush ID ' ||
			pBackflushID || ' reversed: ' ||
			_backflushCheck.item_number || ' ' || 
			_backflushCheck.backflush_rev || ' ' || 
			_backflushCheck.backflush_serialnumber || ' qty ' || 
			_backflushCheck.backflush_qty || ' on ' || 
			_backflushCheck.doctype_name || ' ' || 
			_backflushCheck.backflush_docnumber || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Reverse Backflush'::TEXT,
					_backflushCheck.item_number,
					_backflushCheck.backflush_rev,
					_backflushCheck.backflush_serialnumber,
					'Backflush ID'::TEXT,
					pBackflushId,
					_message, 
					_backflushCheck.doctype_name, 
					_backflushCheck.backflush_docnumber));

	RETURN true;
END;$_$;


ALTER FUNCTION public.reversebackflush(integer) OWNER TO admin;

--
-- TOC entry 432 (class 1255 OID 36869)
-- Name: revuppart(text, text, text, text, text, boolean, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION revuppart(text, text, text, text, text, boolean DEFAULT false, text DEFAULT NULL::text, text DEFAULT NULL::text) RETURNS TABLE(_partnumber text, _revision text, _serialnumber text, _sequencenumber integer, _itemfreqcode text)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pCurrentRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	pDocNumber ALIAS FOR $4;
	pDocType ALIAS FOR $5;
	pNpi ALIAS FOR $6;
	pLine ALIAS FOR $7;
	pStation ALIAS FOR $8;
	_viewpart RECORD;
	_item RECORD;
	_docTypeId INTEGER;
	_locationId INTEGER;
	_partStateId INTEGER;
	_prefix TEXT;
	_serialPattern TEXT;
	_targetRevision TEXT;
	_npiRevision boolean;
	_changeRevPart RECORD;
	_message TEXT;
  
BEGIN
	PERFORM (SELECT checkpriv('revuppart'));
	PERFORM (SELECT validatepart(pItemNumber, pCurrentRevision, pSerialNumber));
	
	SELECT item_number, part_serialnumber, part_sequencenumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber AND part_serialnumber = pSerialNumber AND part_rev = pCurrentRevision;
	
	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'revuppart: Item Number % not found in AeryonMES', pItemNumber;
	END IF;

	_docTypeId := (SELECT getdoctypeid(pDocType));
	_npiRevision := pNpi;
	
	IF _npiRevision = false THEN
		SELECT itemrev_npi
		INTO _npiRevision
		FROM itemrev
		WHERE itemrev_item_id = _item.item_id
			AND itemrev_rev = pCurrentRevision;
	END IF;
		
	SELECT itemrevflow_end_rev
	INTO _targetRevision
	FROM itemrevflow
	WHERE itemrevflow_item_id = _item.item_id
		AND itemrevflow_start_rev = pCurrentRevision
		AND itemrevflow_npi = _npiRevision;

	IF _targetRevision IS NULL THEN
		_targetRevision := lpad((pCurrentRevision::INTEGER + 1)::TEXT, 2, '0');
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev = _targetRevision) IS NULL THEN
		RAISE EXCEPTION 'revuppart: Target Revision % of Selected Item % Not Found in AeryonMES', _targetRevision, pItemNumber;
	END IF;

	SELECT * 
	INTO _changeRevPart
	FROM changerevpart(	pItemNumber, 
				pCurrentRevision, 
				pSerialNumber, 
				pDocNumber, 
				pDocType, 
				_targetRevision,
				pLine,
				pStation);

	

	_message := 	pItemNumber || ' up reved from ' ||  
			pCurrentRevision || ' to ' || 
			_targetRevision || ' for ' ||
			pSerialNumber || ' on ' ||
			pDocType || ' ' ||
			pDocNumber || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Up Reved'::TEXT,
					pItemNumber,
					_targetRevision,
					pSerialNumber,
					'Revision History'::TEXT,
					_changeRevPart._partrevhistid,
					_message,
					pDocType,
					pDocNumber));
		  
	_partnumber := pItemNumber;
	_serialnumber := pSerialNumber;
	_revision := _targetRevision;
	_itemfreqcode := _item.itemfreqcode_freqcode;
	_sequencenumber := _viewpart.part_sequencenumber;
	
	RETURN NEXT;
	RETURN;
END;$_$;


ALTER FUNCTION public.revuppart(text, text, text, text, text, boolean, text, text) OWNER TO admin;

--
-- TOC entry 433 (class 1255 OID 36870)
-- Name: scrappart(text, text, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION scrappart(text, text, text, text, text, boolean DEFAULT true) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 		ALIAS FOR $1;
	pRevision 		ALIAS FOR $2;
	pSerialNumber 		ALIAS FOR $3;
	pPartScrapCode 		ALIAS FOR $4;
	pPartScrapDescription 	ALIAS FOR $5;
	pDeAllocFirst		ALIAS FOR $6;
	_viewpart 		RECORD;
	_usrId 			INTEGER;
	_partScrapCodeId	INTEGER;
	_partScrapHistId 	INTEGER;
	_message 		TEXT;
  
BEGIN
	_usrID := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('scrappart'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));

	SELECT 	part_id, 
		item_id, 
		item_number,
		part_rev,
		part_serialnumber, 
		part_sequencenumber,
		part_cust_id,
		loc_number,
		parent_item_number,
		parent_part_rev,
		parent_part_serialnumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	IF pDeAllocFirst = true AND _viewpart.parent_item_number IS NOT NULL THEN
		PERFORM (SELECT deallocpart(	_viewpart.parent_item_number, 
						_viewpart.parent_part_rev, 
						_viewpart.parent_part_serialnumber, 
						pItemNumber, 
						pRevision, 
						pSerialNumber, 
						'AMDD003'));
	END IF;

	_partScrapCodeId := (SELECT getpartscrapcodeid(pPartScrapCode));

	PERFORM (SELECT deactivatepart(pItemNumber, pRevision, pSerialNumber));

	INSERT INTO partscraphist (	partscraphist_part_id, 
					partscraphist_partscrapcode_id,
					partscraphist_description,
					partscraphist_usr_id,
					partscraphist_orig_item_id,
					partscraphist_orig_rev,
					partscraphist_orig_serialnumber)
		VALUES (		_viewpart.part_id,
					_partScrapCodeId,
					pPartScrapDescription,
					_usrId,
					_viewpart.item_id,
					_viewpart.part_rev,
					_viewpart.part_serialnumber)
		RETURNING partscraphist_id INTO _partScrapHistId;

	_message := 	pItemNumber || ' ' ||  
			pRevision || ' ' || 
			pSerialNumber || ' scrapped with code ' ||
			pPartScrapcode || ' with description ' ||
			pPartScrapDescription || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Scrapped'::TEXT,
					pItemNumber,
					pRevision,
					pSerialNumber,
					'Scrap History'::TEXT,
					_partScrapHistId,
					_message));

	RETURN true;
END;$_$;


ALTER FUNCTION public.scrappart(text, text, text, text, text, boolean) OWNER TO admin;

--
-- TOC entry 434 (class 1255 OID 36871)
-- Name: scrapsummsubass(text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION scrapsummsubass(text, text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 		ALIAS FOR $1;
	pRevision 		ALIAS FOR $2;
	pSerialNumber 		ALIAS FOR $3;
	pPartScrapCode 		ALIAS FOR $4;
	pPartScrapDescription 	ALIAS FOR $5;
	_viewpart 		RECORD;
	_usrId 			INTEGER;
	_r			RECORD;
  
BEGIN
	_usrID := (SELECT getusrid());  
	PERFORM (SELECT checkpriv('scrapsummsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));

	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_serialnumber, 
		part_sequencenumber,
		part_cust_id,
		loc_number
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;
	
	PERFORM (SELECT scrappart(	pItemNumber, 
					pRevision,
					pSerialNumber,
					pPartScrapCode,
					pPartScrapDescription));

	FOR _r IN
		SELECT *
		FROM summsubass(	pItemNumber,
					pRevision,
					pSerialNumber)
	LOOP
		IF _r.c_item_number IS NOT NULL THEN
			PERFORM (SELECT scrappart(	_r.c_item_number,
							_r.c_part_rev,
							_r.c_part_serialnumber,
							pPartScrapCode,
							pPartScrapDescription,
							false));
		END IF;
	END LOOP;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.scrapsummsubass(text, text, text, text, text) OWNER TO postgres;

--
-- TOC entry 436 (class 1255 OID 36872)
-- Name: serialbom(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION serialbom(text, text) RETURNS TABLE(t_item_number text, t_bom_itemrev text, t_bom_qtyper numeric, p_item_number text, p_bom_itemrev text, p_bom_qtyper numeric, c_item_number text, c_bom_itemrev text, c_bom_qtyper numeric)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	_item RECORD;
  
BEGIN
	PERFORM (SELECT checkpriv('serialbom'));

	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'serialbom: Item Number % not found in AeryonMES', pItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev = pRevision) IS NULL THEN
		RAISE EXCEPTION 'serialbom: Revision % of Selected Item % Not Found in AeryonMES', pRevision, pItemNumber;
	END IF;

	RETURN QUERY (WITH RECURSIVE b(	t_bom_item_id, 
					t_bom_itemrev,
					t_bom_qtyper,
					p_bom_item_id, 
					p_bom_itemrev, 
					p_bom_qtyper,
					p_item_phantom,
					c_bom_item_id, 
					c_bom_itemrev,
					c_bom_qtyper,
					c_item_phantom) 
			AS(	SELECT	p.bom_parent_item_id 	AS t_bom_item_id,
					p.bom_parent_itemrev 	AS t_bom_itemrev,
					1::NUMERIC(20, 8)	AS t_bom_qtyper,
					p.bom_parent_item_id 	AS p_bom_item_id,
					p.bom_parent_itemrev 	AS p_bom_itemrev,
					1::NUMERIC(20, 8)	AS p_bom_qtyper,
					i2.item_phantom		AS p_item_phantom,
					p.bom_item_id		AS c_bom_item_id,
					p.bom_itemrev		AS c_bom_itemrev,
					p.bom_qtyper		AS c_bom_qtyper,
					i3.item_phantom		AS c_item_phantom
				FROM	bom p
				LEFT OUTER JOIN item i2
					ON i2.item_id = bom_parent_item_id
				LEFT OUTER JOIN item i3
					ON i3.item_id = p.bom_item_id
				WHERE 	p.bom_parent_item_id = _item.item_id
				AND 	p.bom_parent_itemrev = pRevision
				AND 	COALESCE(p.bom_effective, now()) <= now()
				AND 	COALESCE(p.bom_expires, now()) >= now()
			UNION ALL
				SELECT 	b.t_bom_item_id 	AS t_bom_item_id,
					b.t_bom_itemrev 	AS t_bom_itemrev,
					b.t_bom_qtyper		AS t_bom_qtyper,
					b.c_bom_item_id 	AS p_bom_item_id,
					b.c_bom_itemrev 	AS p_bom_itemrev,
					b.c_bom_qtyper 		AS p_bom_qtyper,
					b.c_item_phantom	AS p_item_phantom,
					c.bom_item_id		AS c_bom_item_id,
					c.bom_itemrev		AS c_bom_itemrev,
					(c.bom_qtyper * b.c_bom_qtyper)::NUMERIC(20, 8)
								AS c_bom_qtyper,
					i3.item_phantom		AS c_item_phantom
				FROM 	b
				LEFT OUTER JOIN bom c
					ON c.bom_parent_item_id = b.c_bom_item_id
				LEFT OUTER JOIN item i3
					ON i3.item_id = c.bom_item_id
				WHERE 	c.bom_parent_item_id = b.c_bom_item_id
				AND 	c.bom_parent_itemrev = b.c_bom_itemrev
				AND 	COALESCE(c.bom_effective, now()) <= now()
				AND 	COALESCE(c.bom_expires, now()) >= now()
				AND	b.c_item_phantom = true
			)
		SELECT 	i1.item_number AS t_item_number, 
			b.t_bom_itemrev, 
			b.t_bom_qtyper, 
			i2.item_number AS p_item_number, 
			b.p_bom_itemrev, 
			b.p_bom_qtyper, 
			i3.item_number AS c_item_number, 
			b.c_bom_itemrev, 
			b.c_bom_qtyper
		FROM 	b
		LEFT OUTER JOIN item i1
			ON b.t_bom_item_id = i1.item_id
		LEFT OUTER JOIN item i2
			ON b.p_bom_item_id = i2.item_id
		LEFT OUTER JOIN item i3
			ON b.c_bom_item_id = i3.item_id
		WHERE i3.item_serialized = true
		AND b.c_item_phantom = false);
		  
	RETURN;
END;$_$;


ALTER FUNCTION public.serialbom(text, text) OWNER TO admin;

--
-- TOC entry 437 (class 1255 OID 36873)
-- Name: serialsubass(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION serialsubass(text, text, text) RETURNS TABLE(t_item_number text, t_part_rev text, t_part_serialnumber text, t_part_sequencenumber integer, t_part_parent_allocorder integer, p_item_number text, p_part_rev text, p_part_serialnumber text, p_part_sequencenumber integer, p_part_parent_allocorder integer, c_item_number text, c_part_rev text, c_part_serialnumber text, c_part_sequencenumber integer, c_part_parent_allocorder integer)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	_viewpart RECORD;
  
BEGIN
	PERFORM (SELECT checkpriv('serialsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));

	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_serialnumber, 
		part_sequencenumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	RETURN QUERY (WITH a(		t_part_id,
					t_part_item_id,
					t_part_rev,
					t_part_serialnumber,
					t_part_sequencenumber,
					t_part_parent_part_id,
					t_part_allocpos,
					p_part_id,
					p_part_item_id,
					p_part_rev,
					p_part_serialnumber,
					p_part_sequencenumber,
					p_part_parent_part_id,
					p_part_allocpos,
					p_item_phantom,
					c_part_id,
					c_part_item_id,
					c_part_rev,
					c_part_serialnumber,
					c_part_sequencenumber,
					c_part_parent_part_id,
					c_part_allocpos,
					c_item_phantom) 
			AS(	SELECT	p.part_id			AS t_part_id,
					p.part_item_id			AS t_part_item_id,
					p.part_rev			AS t_part_rev,
					p.part_serialnumber		AS t_part_serialnumber,
					p.part_sequencenumber		AS t_part_sequencenumber,
					p.part_parent_part_id		AS t_part_parent_part_id,
					p.part_allocpos			AS t_part_allocpos,
					p.part_id			AS p_part_id,
					p.part_item_id			AS p_part_item_id,
					p.part_rev			AS p_part_rev,
					p.part_serialnumber		AS p_part_serialnumber,
					p.part_sequencenumber		AS p_part_sequencenumber,
					p.part_parent_part_id		AS p_part_parent_part_id,
					p.part_allocpos			AS p_part_allocpos,
					i2.item_phantom			AS p_item_phantom,
					c.part_id			AS c_part_id,
					c.part_item_id			AS c_part_item_id,
					c.part_rev			AS c_part_rev,
					c.part_serialnumber		AS c_part_serialnumber,
					c.part_sequencenumber		AS c_part_sequencenumber,
					c.part_parent_part_id		AS c_part_parent_part_id,
					c.part_allocpos			AS c_part_allocpos,
					i3.item_phantom			AS c_item_phantom
				FROM	part p
				LEFT OUTER JOIN part c
					ON p.part_id = c.part_parent_part_id
				LEFT OUTER JOIN item i2
					ON i2.item_id = p.part_item_id
				LEFT OUTER JOIN item i3
					ON i3.item_id = c.part_item_id
				WHERE 	p.part_id = _viewpart.part_id
			-- UNION ALL
-- 				SELECT	p.part_id			AS t_part_id,
-- 					p.part_item_id			AS t_part_item_id,
-- 					p.part_rev			AS t_part_rev,
-- 					p.part_serialnumber		AS t_part_serialnumber,
-- 					p.part_sequencenumber		AS t_part_sequencenumber,
-- 					p.part_parent_part_id		AS t_part_parent_part_id,
-- 					p.part_allocpos			AS t_part_allocpos,
-- 					p.part_id			AS p_part_id,
-- 					p.part_item_id			AS p_part_item_id,
-- 					p.part_rev			AS p_part_rev,
-- 					p.part_serialnumber		AS p_part_serialnumber,
-- 					p.part_sequencenumber		AS p_part_sequencenumber,
-- 					p.part_parent_part_id		AS p_part_parent_part_id,
-- 					p.part_allocpos			AS p_part_allocpos,
-- 					i2.item_phantom			AS p_item_phantom,
-- 					c.part_id			AS c_part_id,
-- 					c.part_item_id			AS c_part_item_id,
-- 					c.part_rev			AS c_part_rev,
-- 					c.part_serialnumber		AS c_part_serialnumber,
-- 					c.part_sequencenumber		AS c_part_sequencenumber,
-- 					c.part_parent_part_id		AS c_part_parent_part_id,
-- 					c.part_allocpos			AS c_part_allocpos,
-- 					i3.item_phantom			AS c_item_phantom
-- 				FROM	part p
-- 				LEFT OUTER JOIN part c
-- 					ON p.part_id = c.part_parent_part_id
-- 				LEFT OUTER JOIN item i2
-- 					ON i2.item_id = a.p_part_item_id
-- 				LEFT OUTER JOIN item i3
-- 					ON i3.item_id = c.part_item_id
-- 				WHERE 	p.part_id = _viewpart.part_id
-- 				AND	a.c_item_phantom = true
			)
		SELECT 	i1.item_number AS t_item_number, 
			a.t_part_rev,
			a.t_part_serialnumber,
			a.t_part_sequencenumber,
			a.t_part_allocpos,
			i2.item_number AS p_item_number, 
			a.p_part_rev,
			a.p_part_serialnumber,
			a.p_part_sequencenumber,
			a.p_part_allocpos,
			i3.item_number AS c_item_number, 
			a.c_part_rev,
			a.c_part_serialnumber,
			a.c_part_sequencenumber,
			a.c_part_allocpos 
		FROM 	a
		LEFT OUTER JOIN item i1
			ON a.t_part_item_id = i1.item_id
		LEFT OUTER JOIN item i2
			ON a.p_part_item_id = i2.item_id
		LEFT OUTER JOIN item i3
			ON a.c_part_item_id = i3.item_id);
		  
	RETURN;
END;$_$;


ALTER FUNCTION public.serialsubass(text, text, text) OWNER TO admin;

--
-- TOC entry 438 (class 1255 OID 36874)
-- Name: summbom(text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION summbom(text, text) RETURNS TABLE(t_item_number text, t_bom_itemrev text, t_bom_qtyper numeric, p_item_number text, p_bom_itemrev text, p_bom_qtyper numeric, c_item_number text, c_bom_itemrev text, c_bom_qtyper numeric)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	_item RECORD;
  
BEGIN
	PERFORM (SELECT checkpriv('summbom'));

	SELECT item_id, item_serialstream_id, serialprefix_prefix, serialpattern_pattern, itemfreqcode_freqcode
	INTO _item
	FROM item 
	LEFT OUTER JOIN serialstream ON item_serialstream_id = serialstream_id
	LEFT OUTER JOIN serialprefix ON item_serialprefix_id = serialprefix_id
	LEFT OUTER JOIN serialpattern ON serialprefix_serialpattern_id = serialpattern_id
	LEFT OUTER JOIN itemfreqcode ON item_itemfreqcode_id = itemfreqcode_id
	WHERE item_number = pItemNumber 
	AND item_active = true;

	IF _item.item_id IS NULL THEN
		RAISE EXCEPTION 'summbom: Item Number % not found in AeryonMES', pItemNumber;
	END IF;

	IF (SELECT itemrev_id
	    FROM itemrev
	    WHERE itemrev_item_id = _item.item_id
	    AND itemrev_rev = pRevision) IS NULL THEN
		RAISE EXCEPTION 'summbom: Revision % of Selected Item % Not Found in AeryonMES', pRevision, pItemNumber;
	END IF;

	RETURN QUERY (WITH RECURSIVE b(	t_bom_item_id, 
					t_bom_itemrev,
					t_bom_qtyper,
					p_bom_item_id, 
					p_bom_itemrev, 
					p_bom_qtyper,
					c_bom_item_id, 
					c_bom_itemrev,
					c_bom_qtyper) 
			AS(	SELECT	p.bom_parent_item_id 	AS t_bom_item_id,
					p.bom_parent_itemrev 	AS t_bom_itemrev,
					1::NUMERIC(20, 8)	AS t_bom_qtyper,
					p.bom_parent_item_id 	AS p_bom_item_id,
					p.bom_parent_itemrev 	AS p_bom_itemrev,
					1::NUMERIC(20, 8)	AS p_bom_qtyper,
					p.bom_item_id		AS c_bom_item_id,
					p.bom_itemrev		AS c_bom_itemrev,
					p.bom_qtyper		AS c_bom_qtyper
				FROM	bom p
				WHERE 	p.bom_parent_item_id = _item.item_id
				AND 	p.bom_parent_itemrev = pRevision
				AND 	COALESCE(p.bom_effective, now()) <= now()
				AND 	COALESCE(p.bom_expires, now()) >= now()
			UNION ALL
				SELECT 	b.t_bom_item_id 	AS t_bom_item_id,
					b.t_bom_itemrev 	AS t_bom_itemrev,
					b.t_bom_qtyper		AS t_bom_qtyper,
					b.c_bom_item_id 	AS p_bom_item_id,
					b.c_bom_itemrev 	AS p_bom_itemrev,
					b.c_bom_qtyper 		AS p_bom_qtyper,
					c.bom_item_id		AS c_bom_item_id,
					c.bom_itemrev		AS c_bom_itemrev,
					(c.bom_qtyper * b.c_bom_qtyper)::NUMERIC(20, 8)
								AS c_bom_qtyper
				FROM 	b
				LEFT OUTER JOIN bom c
					ON c.bom_parent_item_id = b.c_bom_item_id
				WHERE 	c.bom_parent_item_id = b.c_bom_item_id
				AND 	c.bom_parent_itemrev = b.c_bom_itemrev
				AND 	COALESCE(c.bom_effective, now()) <= now()
				AND 	COALESCE(c.bom_expires, now()) >= now()
			)
		SELECT 	i1.item_number AS t_item_number, 
			b.t_bom_itemrev, 
			b.t_bom_qtyper, 
			i2.item_number AS p_item_number, 
			b.p_bom_itemrev, 
			b.p_bom_qtyper, 
			i3.item_number AS c_item_number, 
			b.c_bom_itemrev, 
			b.c_bom_qtyper
		FROM 	b
		LEFT OUTER JOIN item i1
			ON b.t_bom_item_id = i1.item_id
		LEFT OUTER JOIN item i2
			ON b.p_bom_item_id = i2.item_id
		LEFT OUTER JOIN item i3
			ON b.c_bom_item_id = i3.item_id);
		  
	RETURN;
END;$_$;


ALTER FUNCTION public.summbom(text, text) OWNER TO admin;

--
-- TOC entry 439 (class 1255 OID 36875)
-- Name: summsubass(text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION summsubass(text, text, text) RETURNS TABLE(t_item_number text, t_part_rev text, t_part_serialnumber text, t_part_sequencenumber integer, t_part_parent_allocorder integer, p_item_number text, p_part_rev text, p_part_serialnumber text, p_part_sequencenumber integer, p_part_parent_allocorder integer, c_item_number text, c_part_rev text, c_part_serialnumber text, c_part_sequencenumber integer, c_part_parent_allocorder integer)
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber ALIAS FOR $1;
	pRevision ALIAS FOR $2;
	pSerialNumber ALIAS FOR $3;
	_viewpart RECORD;
  
BEGIN
	PERFORM (SELECT checkpriv('summsubass'));
	PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber, null, true));

	SELECT 	part_id, 
		item_id, 
		item_number, 
		part_serialnumber, 
		part_sequencenumber
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	RETURN QUERY (WITH RECURSIVE a(	t_part_id,
					t_part_item_id,
					t_part_rev,
					t_part_serialnumber,
					t_part_sequencenumber,
					t_part_parent_part_id,
					t_part_allocpos,
					p_part_id,
					p_part_item_id,
					p_part_rev,
					p_part_serialnumber,
					p_part_sequencenumber,
					p_part_parent_part_id,
					p_part_allocpos,
					c_part_id,
					c_part_item_id,
					c_part_rev,
					c_part_serialnumber,
					c_part_sequencenumber,
					c_part_parent_part_id,
					c_part_allocpos) 
			AS(	SELECT	p.part_id			AS t_part_id,
					p.part_item_id			AS t_part_item_id,
					p.part_rev			AS t_part_rev,
					p.part_serialnumber		AS t_part_serialnumber,
					p.part_sequencenumber		AS t_part_sequencenumber,
					p.part_parent_part_id		AS t_part_parent_part_id,
					p.part_allocpos	AS t_part_allocpos,
					p.part_id			AS p_part_id,
					p.part_item_id			AS p_part_item_id,
					p.part_rev			AS p_part_rev,
					p.part_serialnumber		AS p_part_serialnumber,
					p.part_sequencenumber		AS p_part_sequencenumber,
					p.part_parent_part_id		AS p_part_parent_part_id,
					p.part_allocpos	AS p_part_allocpos,
					c.part_id			AS c_part_id,
					c.part_item_id			AS c_part_item_id,
					c.part_rev			AS c_part_rev,
					c.part_serialnumber		AS c_part_serialnumber,
					c.part_sequencenumber		AS c_part_sequencenumber,
					c.part_parent_part_id		AS c_part_parent_part_id,
					c.part_allocpos	AS c_part_allocpos
				FROM	part p
				LEFT OUTER JOIN part c
					ON p.part_id = c.part_parent_part_id
				WHERE 	p.part_id = _viewpart.part_id
			UNION ALL
				SELECT 	a.t_part_id			AS t_part_id,
					a.t_part_item_id		AS t_part_item_id,
					a.t_part_rev			AS t_part_rev,
					a.t_part_serialnumber		AS t_part_serialnumber,
					a.t_part_sequencenumber		AS t_part_sequencenumber,
					a.t_part_parent_part_id		AS t_part_parent_part_id,
					a.t_part_allocpos	AS t_part_allocpos,
					a.c_part_id			AS p_part_id,
					a.c_part_item_id		AS p_part_item_id,
					a.c_part_rev			AS p_part_rev,
					a.c_part_serialnumber		AS p_part_serialnumber,
					a.c_part_sequencenumber		AS p_part_sequencenumber,
					a.c_part_parent_part_id		AS p_part_parent_part_id,
					a.c_part_allocpos	AS p_part_allocpos,
					c.part_id			AS c_part_id,
					c.part_item_id			AS c_part_item_id,
					c.part_rev			AS c_part_rev,
					c.part_serialnumber		AS c_part_serialnumber,
					c.part_sequencenumber		AS c_part_sequencenumber,
					c.part_parent_part_id		AS c_part_parent_part_id,
					c.part_allocpos	AS c_part_allocpos
				FROM 	a
				LEFT OUTER JOIN part c
					ON a.c_part_id = c.part_parent_part_id
				WHERE 	a.c_part_id = c.part_parent_part_id
			)
		SELECT 	i1.item_number AS t_item_number, 
			a.t_part_rev,
			a.t_part_serialnumber,
			a.t_part_sequencenumber,
			a.t_part_allocpos,
			i2.item_number AS p_item_number, 
			a.p_part_rev,
			a.p_part_serialnumber,
			a.p_part_sequencenumber,
			a.p_part_allocpos,
			i3.item_number AS c_item_number, 
			a.c_part_rev,
			a.c_part_serialnumber,
			a.c_part_sequencenumber,
			a.c_part_allocpos 
		FROM 	a
		LEFT OUTER JOIN item i1
			ON a.t_part_item_id = i1.item_id
		LEFT OUTER JOIN item i2
			ON a.p_part_item_id = i2.item_id
		LEFT OUTER JOIN item i3
			ON a.c_part_item_id = i3.item_id);
		  
	RETURN;
END;$_$;


ALTER FUNCTION public.summsubass(text, text, text) OWNER TO admin;

--
-- TOC entry 440 (class 1255 OID 36876)
-- Name: transfercustparamcombo(integer, integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION transfercustparamcombo(integer, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pOldParamId		ALIAS FOR $1;
	pNewParamId 		ALIAS FOR $2;
	_dataTypeId		INTEGER;
	_r			RECORD;
	_oldParamId		INTEGER;
	_newParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('transfercustparamcombo'));

	IF pOldParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamcombo: Custom Parameter ID cannot be null.';
	END IF;

	IF pNewParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamcombo: Custom Parameter ID cannot be null.';
	END IF;

	_oldParamId := (SELECT custparam_id FROM custparam WHERE custparam_id = pOldParamId);
	IF _oldParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamcombo: Old Custom Parameter ID cannot be found on custparam table.';
	END IF;

	_oldParamId := (SELECT custparamcombo_id FROM custparamcombo WHERE custparamcombo_custparam_id = pOldParamId);
	IF _oldParamId IS NULL THEN
		RETURN true;
	END IF;
	
	_newParamId := (SELECT custparam_id FROM custparam WHERE custparam_id = pNewParamId);
	IF _newParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamcombo: New Custom Parameter ID cannot be found on custparam table.';
	END IF;
	
	FOR _r IN
		SELECT 	custparamcombo_item_id, 
			custparamcombo_recordtype_id
		FROM custparamcombo
		WHERE custparamcombo_custparam_id = pOldParamId
	LOOP
		IF _r.custparamcombo_item_id IS NOT NULL THEN
			INSERT INTO custparamcombo
				(custparamcombo_custparam_id,
				 custparamcombo_value, 
				 custparamcombo_active)
			VALUES	(pNewParamId,
				 _r.custparamcombo_value,
				 _r.custparamcombo_active);
		END IF;
	END LOOP; 

	UPDATE custparamcombo
	SET custparamcombo_active = false
	WHERE custparamcombo_custparam_id = pOldParamId;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.transfercustparamcombo(integer, integer) OWNER TO admin;

--
-- TOC entry 441 (class 1255 OID 36877)
-- Name: transfercustparamlinkitem(integer, integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION transfercustparamlinkitem(integer, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pOldParamId		ALIAS FOR $1;
	pNewParamId 		ALIAS FOR $2;
	_dataTypeId		INTEGER;
	_r			RECORD;
	_oldParamId		INTEGER;
	_newParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('transfercustparamlinkitem'));

	IF pOldParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamlinkitem: Custom Parameter ID cannot be null.';
	END IF;

	IF pNewParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamlinkitem: Custom Parameter ID cannot be null.';
	END IF;

	_oldParamId := (SELECT custparam_id FROM custparam WHERE custparam_id = pOldParamId);
	IF _oldParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamlinkitem: Old Custom Parameter ID cannot be found on custparam table.';
	END IF;

	_oldParamId := (SELECT itemcustparamlink_id FROM itemcustparamlink WHERE itemcustparamlink_custparam_id = pOldParamId);
	IF _oldParamId IS NULL THEN
		RETURN true;
	END IF;
	
	_newParamId := (SELECT custparam_id FROM custparam WHERE custparam_id = pNewParamId);
	IF _newParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamlinkitem: New Custom Parameter ID cannot be found on custparam table.';
	END IF;
	
	FOR _r IN
		SELECT 	itemcustparamlink_item_id,
			itemcustparamlink_active
		FROM itemcustparamlink
		WHERE itemcustparamlink_custparam_id = pOldParamId
	LOOP
		IF _r.itemcustparamlink_item_id IS NOT NULL THEN
			INSERT INTO itemcustparamlink
				(itemcustparamlink_custparam_id,
				 itemcustparamlink_item_id, 
				 itemcustparamlink_active)
			VALUES	(pNewParamId,
				 _r.itemcustparamlink_item_id,
				 _r.itemcustparamlink_active);
		END IF;
	END LOOP; 

	UPDATE itemcustparamlink
	SET itemcustparamlink_active = false
	WHERE itemcustparamlink_custparam_id = pOldParamId;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.transfercustparamlinkitem(integer, integer) OWNER TO admin;

--
-- TOC entry 442 (class 1255 OID 36878)
-- Name: transfercustparamlinkrecord(integer, integer); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION transfercustparamlinkrecord(integer, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pOldParamId		ALIAS FOR $1;
	pNewParamId 		ALIAS FOR $2;
	_dataTypeId		INTEGER;
	_r			RECORD;
	_oldParamId		INTEGER;
	_newParamId		INTEGER;
  
BEGIN
	PERFORM (SELECT getusrid());
	PERFORM (SELECT checkpriv('transfercustparamlinkrecord'));

	IF pOldParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamlinkrecord: Custom Parameter ID cannot be null.';
	END IF;

	IF pNewParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamlinkrecord: Custom Parameter ID cannot be null.';
	END IF;

	_oldParamId := (SELECT custparam_id FROM custparam WHERE custparam_id = pOldParamId);
	IF _oldParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamlinkrecord: Old Custom Parameter ID cannot be found on custparam table.';
	END IF;

	_oldParamId := (SELECT recordcustparamlink_id FROM recordcustparamlink WHERE recordcustparamlink_custparam_id = pOldParamId);
	IF _oldParamId IS NULL THEN
		RETURN true;
	END IF;
	
	_newParamId := (SELECT custparam_id FROM custparam WHERE custparam_id = pNewParamId);
	IF _newParamId IS NULL THEN
		RAISE EXCEPTION 'transfercustparamlinkrecord: New Custom Parameter ID cannot be found on custparam table.';
	END IF;
	
	FOR _r IN
		SELECT 	recordcustparamlink_recordtype_id,
			recordcustparamlink_active
		FROM recordcustparamlink
		WHERE recordcustparamlink_custparam_id = pOldParamId
	LOOP
		IF _r.recordcustparamlink_recordtype_id IS NOT NULL THEN
			INSERT INTO recordcustparamlink
				(recordcustparamlink_custparam_id,
				 recordcustparamlink_recordtype_id,
				 recordcustparamlink_active)
			VALUES	(pNewParamId,
				 _r.recordcustparamlink_recordtype_id,
				 _r.recordcustparamlink_active);
		END IF;
	END LOOP; 

	UPDATE recordcustparamlink
	SET recordcustparamlink_active = false
	WHERE recordcustparamlink_custparam_id = pOldParamId;
	
	RETURN true;
END;$_$;


ALTER FUNCTION public.transfercustparamlinkrecord(integer, integer) OWNER TO admin;

--
-- TOC entry 428 (class 1255 OID 36879)
-- Name: updatebackflush(integer, text, text, text, integer, text, text, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION updatebackflush(integer, text, text, text, integer, text, text, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pBackflushId	ALIAS FOR $1;
	pItemNumber 	ALIAS FOR $2;
	pRevision 	ALIAS FOR $3;
	pSerialNumber 	ALIAS FOR $4;
	pQty 		ALIAS FOR $5;
	pDocType 	ALIAS FOR $6;
	pDocNumber 	ALIAS FOR $7;
	pLine		ALIAS FOR $8;
	pStation	ALIAS FOR $9;
	_itemId		INTEGER;
	_viewpart 	RECORD;
	_backflushCheck	RECORD;
	_backflushId	INTEGER;
	_docTypeId	INTEGER;
	_usrId 		INTEGER;
	_message 	TEXT;
  
BEGIN
	_usrId := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('updatebackflush'));


	IF pQty < 0 THEN
		RAISE EXCEPTION 'updatebackflush: Backflush Qty cannot be less than 0.';
	END IF;

	_itemId := (SELECT getitemid(pItemNumber));
	_docTypeId := (SELECT getdoctypeid(pDocType));
	
	IF pSerialNumber IS NOT NULL THEN
		PERFORM (SELECT validatepart(pItemNumber, pRevision, pSerialNumber));
	END IF;

	SELECT 	backflush_id, 
		backflush_part_id,
		item_number, 
		backflush_orig_item_id, 
		backflush_orig_rev, 
		backflush_orig_serialnumber, 
		backflush_qty, 
		doctype_name, 
		backflush_docnumber,
		backflush_void_timestamp, 
		backflush_complete_timestamp
	INTO _backflushCheck
	FROM backflush 
	LEFT OUTER JOIN item ON item_id = backflush_orig_item_id
	LEFT OUTER JOIN doctype ON doctype_id = backflush_doctype_id
	WHERE backflush_id = pBackflushId;
	
	IF _backflushCheck.backflush_id IS NULL THEN
		RAISE EXCEPTION 'updatebackflush: Backflush ID % does not exist.',
			pBackflushId;
	ELSIF _backflushCheck.backflush_void_timestamp IS NOT NULL THEN
		RAISE EXCEPTION 'updatebackflush: Backflush ID % is VOID and cannot be updated.',
			pBackflushId;
	ELSIF _backflushCheck.backflush_complete_timestamp IS NOT NULL THEN
		RAISE EXCEPTION 'updatebackflush: Backflush ID % is COMPLETE and cannot be updated.',
			pBackflushId;
	END IF;

	PERFORM (SELECT voidbackflush(pBackflushId, 'UPDATE', 'Void existing ID to insert updated backflush information.'));
	
	RETURN (SELECT enterbackflush(pItemNumber, pRevision, pSerialNumber, pQty, pDocType, pDocNumber, pLine, pStation));
END;$_$;


ALTER FUNCTION public.updatebackflush(integer, text, text, text, integer, text, text, text, text) OWNER TO admin;

--
-- TOC entry 429 (class 1255 OID 36880)
-- Name: validatepart(text, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION validatepart(text, text, text, text DEFAULT NULL::text, boolean DEFAULT false) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pItemNumber 	ALIAS FOR $1;
	pRevision 	ALIAS FOR $2;
	pSerialNumber 	ALIAS FOR $3;
	pCode		ALIAS FOR $4;
	pAllowInactive	ALIAS FOR $5;
	_viewpart	RECORD;
	_code		TEXT;
BEGIN
	PERFORM (SELECT checkpriv('validatepart'));

	SELECT 	part_id,
		part_active
	INTO _viewpart
	FROM viewpart
	WHERE item_number = pItemNumber 
	AND part_serialnumber = pSerialNumber 
	AND part_rev = pRevision;

	IF pCode IS NULL THEN
		_code := '';
	ELSE
		_code := ' ' || pCode;
	END IF;

	IF _viewpart.part_id IS NULL THEN
		RAISE EXCEPTION 'validatepart:% Item Number % Revision % Serial Number % Not Found in AeryonMES.', 
			_code,
			pItemNumber, 
			pRevision, 
			pSerialNumber;
	ELSIF _viewpart.part_active = false AND pAllowInactive = false THEN
		RAISE EXCEPTION 'validatepart:% Item Number % Revision % Serial Number % Is Inactive.', 
			_code,
			pItemNumber, 
			pRevision, 
			pSerialNumber;
	END IF;

	RETURN true;
END;

	$_$;


ALTER FUNCTION public.validatepart(text, text, text, text, boolean) OWNER TO admin;

--
-- TOC entry 435 (class 1255 OID 36881)
-- Name: voidbackflush(integer, text, text); Type: FUNCTION; Schema: public; Owner: admin
--

CREATE FUNCTION voidbackflush(integer, text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE
	pBackflushId	ALIAS FOR $1;
	pVoidType	ALIAS FOR $2;
	pVoidReason	ALIAS FOR $3;
	_backflushCheck	RECORD;
	_usrId 		INTEGER;
	_message 	TEXT;
  
BEGIN
	_usrId := (SELECT getusrid()); 
	PERFORM (SELECT checkpriv('voidbackflush'));

	SELECT 	backflush_id, 
		backflush_part_id,
		pitem.item_number AS part_item_number,
		part_rev,
		part_serialnumber,
		oitem.item_number AS orig_item_number, 
		backflush_orig_item_id, 
		backflush_orig_rev, 
		backflush_orig_serialnumber, 
		backflush_qty, 
		doctype_name, 
		backflush_docnumber,
		backflush_void_timestamp, 
		backflush_complete_timestamp
	INTO _backflushCheck
	FROM backflush 
	LEFT OUTER JOIN item AS oitem ON oitem.item_id = backflush_orig_item_id
	LEFT OUTER JOIN part ON part_id = backflush_part_id
	LEFT OUTER JOIN item AS pitem ON pitem.item_id = backflush_orig_item_id
	LEFT OUTER JOIN doctype ON doctype_id = backflush_doctype_id
	WHERE backflush_id = pBackflushId;
	
	IF _backflushCheck.backflush_id IS NULL THEN
		RAISE EXCEPTION 'voidbackflush: Backflush ID % does not exist.',
			pBackflushId;
	ELSIF _backflushCheck.backflush_void_timestamp IS NOT NULL THEN
		RAISE EXCEPTION 'voidbackflush: Backflush ID % is VOID and cannot be voided.',
			pBackflushId;
	ELSIF _backflushCheck.backflush_complete_timestamp IS NOT NULL THEN
		RAISE EXCEPTION 'voidbackflush: Backflush ID % is COMPLETE and cannot be voided.',
			pBackflushId;
	END IF;
	
	UPDATE backflush
	SET	(backflush_void_usr_id,
		 backflush_void_timestamp,
		 backflush_void_type,
		 backflush_void_reason)
	=	(_usrId,
		 now(),
		 pVoidType,
		 pVoidReason)
	WHERE backflush_id = pBackflushId;

	UPDATE part
	SET (part_backflushed) = (false)
	WHERE part_id = _backflushCheck.backflush_part_id;
	
	_message := 	'Backflush ID ' ||
			pBackflushID || ' voided: ' ||
			_backflushCheck.orig_item_number || ' ' || 
			_backflushCheck.backflush_orig_rev || ' ' || 
			_backflushCheck.backflush_orig_serialnumber || ' qty ' || 
			_backflushCheck.backflush_qty || ' on ' || 
			_backflushCheck.doctype_name || ' ' || 
			_backflushCheck.backflush_docnumber || ' - VoidType: ' ||
			pVoidType || ' - Reason: ' ||
			pVoidReason || '.';

	PERFORM (SELECT enterpartlog(	'Manufacturing'::TEXT, 
					'Void Backflush'::TEXT,
					_backflushCheck.part_item_number,
					_backflushCheck.part_rev,
					_backflushCheck.part_serialnumber,
					'Backflush ID'::TEXT,
					pBackflushId,
					_message,
					_backflushCheck.doctype_name, 
					_backflushCheck.backflush_docnumber));

	RETURN true;
END;$_$;


ALTER FUNCTION public.voidbackflush(integer, text, text) OWNER TO admin;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- TOC entry 181 (class 1259 OID 36882)
-- Name: backflush; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE backflush (
    backflush_id integer NOT NULL,
    backflush_orig_item_id integer NOT NULL,
    backflush_orig_rev text NOT NULL,
    backflush_orig_serialnumber text,
    backflush_part_id integer,
    backflush_qty integer DEFAULT 1 NOT NULL,
    backflush_doctype_id integer NOT NULL,
    backflush_docnumber text NOT NULL,
    backflush_create_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    backflush_create_usr_id integer NOT NULL,
    backflush_complete_timestamp timestamp without time zone,
    backflush_complete_usr_id integer,
    backflush_void_timestamp timestamp without time zone,
    backflush_void_usr_id integer,
    backflush_void_type text,
    backflush_void_reason text,
    backflush_line_id integer NOT NULL,
    backflush_station_id integer NOT NULL
);


ALTER TABLE backflush OWNER TO admin;

--
-- TOC entry 3234 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN backflush.backflush_orig_item_id; Type: COMMENT; Schema: public; Owner: admin
--

COMMENT ON COLUMN backflush.backflush_orig_item_id IS 'Original Item ID at time of Backflush Request';


--
-- TOC entry 3235 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN backflush.backflush_void_type; Type: COMMENT; Schema: public; Owner: admin
--

COMMENT ON COLUMN backflush.backflush_void_type IS 'UPDATE, MANUAL, REVERSE POST';


--
-- TOC entry 182 (class 1259 OID 36890)
-- Name: backflush_backflush_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE backflush_backflush_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE backflush_backflush_id_seq OWNER TO admin;

--
-- TOC entry 3237 (class 0 OID 0)
-- Dependencies: 182
-- Name: backflush_backflush_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE backflush_backflush_id_seq OWNED BY backflush.backflush_id;


--
-- TOC entry 183 (class 1259 OID 36892)
-- Name: bom; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE bom (
    bom_id integer NOT NULL,
    bom_parent_item_id integer,
    bom_parent_itemrev text,
    bom_item_id integer,
    bom_itemrev text,
    bom_qtyper numeric(20,8) NOT NULL,
    bom_effective date,
    bom_expires date,
    CONSTRAINT bom_check CHECK (((((bom_parent_item_id)::text || '-'::text) || bom_parent_itemrev) <> (((bom_item_id)::text || '-'::text) || bom_itemrev)))
);


ALTER TABLE bom OWNER TO admin;

--
-- TOC entry 184 (class 1259 OID 36899)
-- Name: bom_bom_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE bom_bom_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bom_bom_id_seq OWNER TO admin;

--
-- TOC entry 3238 (class 0 OID 0)
-- Dependencies: 184
-- Name: bom_bom_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE bom_bom_id_seq OWNED BY bom.bom_id;


--
-- TOC entry 185 (class 1259 OID 36901)
-- Name: cust; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE cust (
    cust_id integer NOT NULL,
    cust_number text NOT NULL,
    cust_name text NOT NULL,
    cust_description text,
    cust_active boolean DEFAULT true NOT NULL
);


ALTER TABLE cust OWNER TO admin;

--
-- TOC entry 186 (class 1259 OID 36908)
-- Name: cust_cust_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE cust_cust_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cust_cust_id_seq OWNER TO admin;

--
-- TOC entry 3239 (class 0 OID 0)
-- Dependencies: 186
-- Name: cust_cust_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE cust_cust_id_seq OWNED BY cust.cust_id;


--
-- TOC entry 187 (class 1259 OID 36910)
-- Name: custfiletype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE custfiletype (
    custfiletype_id integer NOT NULL,
    custfiletype_type text,
    custfiletype_active boolean DEFAULT true NOT NULL
);


ALTER TABLE custfiletype OWNER TO admin;

--
-- TOC entry 188 (class 1259 OID 36917)
-- Name: custfiletype_custfiletype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE custfiletype_custfiletype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE custfiletype_custfiletype_id_seq OWNER TO admin;

--
-- TOC entry 3240 (class 0 OID 0)
-- Dependencies: 188
-- Name: custfiletype_custfiletype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE custfiletype_custfiletype_id_seq OWNED BY custfiletype.custfiletype_id;


SET default_with_oids = false;

--
-- TOC entry 189 (class 1259 OID 36919)
-- Name: custhist; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE custhist (
    custhist_id integer NOT NULL,
    custhist_part_id integer NOT NULL,
    custhist_start_cust_id integer,
    custhist_end_cust_id integer,
    custhist_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    custhist_usr_id integer NOT NULL,
    custhist_orig_item_id integer NOT NULL,
    custhist_orig_rev text NOT NULL,
    custhist_orig_serialnumber text NOT NULL
);


ALTER TABLE custhist OWNER TO admin;

--
-- TOC entry 190 (class 1259 OID 36926)
-- Name: custhist_custhist_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE custhist_custhist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE custhist_custhist_id_seq OWNER TO admin;

--
-- TOC entry 3241 (class 0 OID 0)
-- Dependencies: 190
-- Name: custhist_custhist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE custhist_custhist_id_seq OWNED BY custhist.custhist_id;


SET default_with_oids = true;

--
-- TOC entry 191 (class 1259 OID 36928)
-- Name: custparam; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE custparam (
    custparam_id integer NOT NULL,
    custparam_type character(1) NOT NULL,
    custparam_param text NOT NULL,
    custparam_datatype_id integer NOT NULL,
    custparam_active_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    custparam_void_timestamp timestamp without time zone,
    CONSTRAINT custparam_custparam_type_check CHECK (((custparam_type = 'r'::bpchar) OR (custparam_type = 'p'::bpchar)))
);


ALTER TABLE custparam OWNER TO admin;

--
-- TOC entry 192 (class 1259 OID 36936)
-- Name: custparam_custparam_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE custparam_custparam_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE custparam_custparam_id_seq OWNER TO admin;

--
-- TOC entry 3242 (class 0 OID 0)
-- Dependencies: 192
-- Name: custparam_custparam_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE custparam_custparam_id_seq OWNED BY custparam.custparam_id;


--
-- TOC entry 193 (class 1259 OID 36938)
-- Name: custparamcombo; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE custparamcombo (
    custparamcombo_id integer NOT NULL,
    custparamcombo_custparam_id integer NOT NULL,
    custparamcombo_value text NOT NULL,
    custparamcombo_active boolean DEFAULT true NOT NULL
);


ALTER TABLE custparamcombo OWNER TO admin;

--
-- TOC entry 194 (class 1259 OID 36945)
-- Name: custparamcombo_custparamcombo_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE custparamcombo_custparamcombo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE custparamcombo_custparamcombo_id_seq OWNER TO admin;

--
-- TOC entry 3243 (class 0 OID 0)
-- Dependencies: 194
-- Name: custparamcombo_custparamcombo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE custparamcombo_custparamcombo_id_seq OWNED BY custparamcombo.custparamcombo_id;


--
-- TOC entry 195 (class 1259 OID 36947)
-- Name: custparamlink; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE custparamlink (
    custparamlink_id integer NOT NULL,
    custparamlink_custparam_id integer NOT NULL,
    custparamlink_item_id integer,
    custparamlink_recordtype_id integer,
    custparamlink_active boolean DEFAULT true NOT NULL,
    CONSTRAINT custparamlink_check CHECK ((((custparamlink_item_id IS NULL) AND (custparamlink_recordtype_id IS NOT NULL)) OR ((custparamlink_item_id IS NOT NULL) AND (custparamlink_recordtype_id IS NULL))))
);


ALTER TABLE custparamlink OWNER TO admin;

--
-- TOC entry 196 (class 1259 OID 36952)
-- Name: custparamlink_custparamlink_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE custparamlink_custparamlink_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE custparamlink_custparamlink_id_seq OWNER TO admin;

--
-- TOC entry 3244 (class 0 OID 0)
-- Dependencies: 196
-- Name: custparamlink_custparamlink_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE custparamlink_custparamlink_id_seq OWNED BY custparamlink.custparamlink_id;


--
-- TOC entry 197 (class 1259 OID 36954)
-- Name: datatype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE datatype (
    datatype_id integer NOT NULL,
    datatype_type text,
    datatype_active boolean DEFAULT true NOT NULL
);


ALTER TABLE datatype OWNER TO admin;

--
-- TOC entry 198 (class 1259 OID 36961)
-- Name: datatype_datatype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE datatype_datatype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE datatype_datatype_id_seq OWNER TO admin;

--
-- TOC entry 3245 (class 0 OID 0)
-- Dependencies: 198
-- Name: datatype_datatype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE datatype_datatype_id_seq OWNED BY datatype.datatype_id;


--
-- TOC entry 199 (class 1259 OID 36963)
-- Name: doctype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE doctype (
    doctype_id integer NOT NULL,
    doctype_name text,
    doctype_description text
);


ALTER TABLE doctype OWNER TO admin;

--
-- TOC entry 200 (class 1259 OID 36969)
-- Name: doctype_doctype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE doctype_doctype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE doctype_doctype_id_seq OWNER TO admin;

--
-- TOC entry 3246 (class 0 OID 0)
-- Dependencies: 200
-- Name: doctype_doctype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE doctype_doctype_id_seq OWNED BY doctype.doctype_id;


--
-- TOC entry 201 (class 1259 OID 36971)
-- Name: eco; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE eco (
    eco_id integer NOT NULL,
    eco_number text,
    eco_description text
);


ALTER TABLE eco OWNER TO admin;

--
-- TOC entry 202 (class 1259 OID 36977)
-- Name: eco_eco_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE eco_eco_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE eco_eco_id_seq OWNER TO admin;

--
-- TOC entry 3247 (class 0 OID 0)
-- Dependencies: 202
-- Name: eco_eco_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE eco_eco_id_seq OWNED BY eco.eco_id;


--
-- TOC entry 203 (class 1259 OID 36979)
-- Name: filetype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE filetype (
    filetype_id integer NOT NULL,
    filetype_type text,
    filetype_mediatypename text,
    filetype_active boolean DEFAULT true NOT NULL
);


ALTER TABLE filetype OWNER TO admin;

--
-- TOC entry 204 (class 1259 OID 36986)
-- Name: filetype_filetype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE filetype_filetype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE filetype_filetype_id_seq OWNER TO admin;

--
-- TOC entry 3248 (class 0 OID 0)
-- Dependencies: 204
-- Name: filetype_filetype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE filetype_filetype_id_seq OWNED BY filetype.filetype_id;


--
-- TOC entry 205 (class 1259 OID 36988)
-- Name: item; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE item (
    item_id integer NOT NULL,
    item_number text NOT NULL,
    item_description text,
    item_active boolean DEFAULT true NOT NULL,
    item_serialstream_id integer,
    item_serialprefix_id integer,
    item_itemfreqcode_id integer,
    item_printqty integer,
    item_serialized boolean DEFAULT true NOT NULL,
    item_phantom boolean DEFAULT false NOT NULL
);


ALTER TABLE item OWNER TO admin;

--
-- TOC entry 206 (class 1259 OID 36997)
-- Name: item_item_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE item_item_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE item_item_id_seq OWNER TO admin;

--
-- TOC entry 3249 (class 0 OID 0)
-- Dependencies: 206
-- Name: item_item_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE item_item_id_seq OWNED BY item.item_id;


--
-- TOC entry 207 (class 1259 OID 36999)
-- Name: itemcustparamlink; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE itemcustparamlink (
    itemcustparamlink_id integer NOT NULL,
    itemcustparamlink_custparam_id integer NOT NULL,
    itemcustparamlink_item_id integer NOT NULL,
    itemcustparamlink_active boolean DEFAULT true NOT NULL
);


ALTER TABLE itemcustparamlink OWNER TO admin;

--
-- TOC entry 208 (class 1259 OID 37003)
-- Name: itemcustparamlink_itemcustparamlink_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE itemcustparamlink_itemcustparamlink_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE itemcustparamlink_itemcustparamlink_id_seq OWNER TO admin;

--
-- TOC entry 3250 (class 0 OID 0)
-- Dependencies: 208
-- Name: itemcustparamlink_itemcustparamlink_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE itemcustparamlink_itemcustparamlink_id_seq OWNED BY itemcustparamlink.itemcustparamlink_id;


--
-- TOC entry 209 (class 1259 OID 37005)
-- Name: itemfreqcode; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE itemfreqcode (
    itemfreqcode_id integer NOT NULL,
    itemfreqcode_freqcode text NOT NULL,
    itemfreqcode_name text NOT NULL
);


ALTER TABLE itemfreqcode OWNER TO admin;

--
-- TOC entry 210 (class 1259 OID 37011)
-- Name: itemfreqcode_itemfreqcode_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE itemfreqcode_itemfreqcode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE itemfreqcode_itemfreqcode_id_seq OWNER TO admin;

--
-- TOC entry 3251 (class 0 OID 0)
-- Dependencies: 210
-- Name: itemfreqcode_itemfreqcode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE itemfreqcode_itemfreqcode_id_seq OWNED BY itemfreqcode.itemfreqcode_id;


--
-- TOC entry 211 (class 1259 OID 37013)
-- Name: itemrev; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE itemrev (
    itemrev_id integer NOT NULL,
    itemrev_item_id integer NOT NULL,
    itemrev_rev text NOT NULL,
    itemrev_npi boolean DEFAULT false NOT NULL
);


ALTER TABLE itemrev OWNER TO admin;

--
-- TOC entry 212 (class 1259 OID 37020)
-- Name: itemrevflow; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE itemrevflow (
    itemrevflow_id integer NOT NULL,
    itemrevflow_item_id integer NOT NULL,
    itemrevflow_start_rev text,
    itemrevflow_end_rev text,
    itemrevflow_npi boolean DEFAULT false NOT NULL,
    itemrevflow_eco_id integer
);


ALTER TABLE itemrevflow OWNER TO admin;

--
-- TOC entry 213 (class 1259 OID 37027)
-- Name: itemrevision_itemrevision_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE itemrevision_itemrevision_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE itemrevision_itemrevision_id_seq OWNER TO admin;

--
-- TOC entry 3252 (class 0 OID 0)
-- Dependencies: 213
-- Name: itemrevision_itemrevision_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE itemrevision_itemrevision_id_seq OWNED BY itemrev.itemrev_id;


--
-- TOC entry 214 (class 1259 OID 37029)
-- Name: itemrevisionflow_itemrevisionflow_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE itemrevisionflow_itemrevisionflow_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE itemrevisionflow_itemrevisionflow_id_seq OWNER TO admin;

--
-- TOC entry 3253 (class 0 OID 0)
-- Dependencies: 214
-- Name: itemrevisionflow_itemrevisionflow_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE itemrevisionflow_itemrevisionflow_id_seq OWNED BY itemrevflow.itemrevflow_id;


SET default_with_oids = false;

--
-- TOC entry 215 (class 1259 OID 37031)
-- Name: line; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE line (
    line_id integer NOT NULL,
    line_name text NOT NULL,
    line_description text,
    line_active boolean DEFAULT true NOT NULL
);


ALTER TABLE line OWNER TO admin;

--
-- TOC entry 216 (class 1259 OID 37038)
-- Name: line_line_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE line_line_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE line_line_id_seq OWNER TO admin;

--
-- TOC entry 3254 (class 0 OID 0)
-- Dependencies: 216
-- Name: line_line_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE line_line_id_seq OWNED BY line.line_id;


--
-- TOC entry 217 (class 1259 OID 37040)
-- Name: loc; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE loc (
    loc_id integer NOT NULL,
    loc_number text NOT NULL,
    loc_name text NOT NULL,
    loc_description text,
    loc_active boolean DEFAULT true NOT NULL
);


ALTER TABLE loc OWNER TO admin;

--
-- TOC entry 218 (class 1259 OID 37047)
-- Name: loc_loc_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE loc_loc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE loc_loc_id_seq OWNER TO admin;

--
-- TOC entry 3255 (class 0 OID 0)
-- Dependencies: 218
-- Name: loc_loc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE loc_loc_id_seq OWNED BY loc.loc_id;


--
-- TOC entry 219 (class 1259 OID 37049)
-- Name: lochist; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE lochist (
    lochist_id integer NOT NULL,
    lochist_part_id integer NOT NULL,
    lochist_start_loc_id integer NOT NULL,
    lochist_end_loc_id integer NOT NULL,
    lochist_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    lochist_usr_id integer NOT NULL,
    lochist_orig_item_id integer NOT NULL,
    lochist_orig_rev text NOT NULL,
    lochist_orig_serialnumber text NOT NULL
);


ALTER TABLE lochist OWNER TO admin;

--
-- TOC entry 220 (class 1259 OID 37056)
-- Name: lochist_lochist_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE lochist_lochist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE lochist_lochist_id_seq OWNER TO admin;

--
-- TOC entry 3256 (class 0 OID 0)
-- Dependencies: 220
-- Name: lochist_lochist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE lochist_lochist_id_seq OWNED BY lochist.lochist_id;


--
-- TOC entry 221 (class 1259 OID 37058)
-- Name: module; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE module (
    module_id integer NOT NULL,
    module_name text NOT NULL,
    module_description text
);


ALTER TABLE module OWNER TO admin;

--
-- TOC entry 222 (class 1259 OID 37064)
-- Name: module_module_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE module_module_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE module_module_id_seq OWNER TO admin;

--
-- TOC entry 3257 (class 0 OID 0)
-- Dependencies: 222
-- Name: module_module_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE module_module_id_seq OWNED BY module.module_id;


SET default_with_oids = true;

--
-- TOC entry 223 (class 1259 OID 37066)
-- Name: part; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE part (
    part_id integer NOT NULL,
    part_item_id integer NOT NULL,
    part_rev text NOT NULL,
    part_sequencenumber integer NOT NULL,
    part_serialnumber text NOT NULL,
    part_active boolean DEFAULT true NOT NULL,
    part_createdate timestamp without time zone DEFAULT now() NOT NULL,
    part_loc_id integer NOT NULL,
    part_cust_id integer,
    part_create_doctype_id integer,
    part_create_docnumber text,
    part_parent_part_id integer,
    part_allocpos integer,
    part_partstate_id integer NOT NULL,
    part_refurb boolean DEFAULT false NOT NULL,
    part_backflushed boolean DEFAULT false NOT NULL
);


ALTER TABLE part OWNER TO admin;

--
-- TOC entry 224 (class 1259 OID 37076)
-- Name: part_part_key_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE part_part_key_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE part_part_key_seq OWNER TO admin;

--
-- TOC entry 3258 (class 0 OID 0)
-- Dependencies: 224
-- Name: part_part_key_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE part_part_key_seq OWNED BY part.part_id;


--
-- TOC entry 225 (class 1259 OID 37078)
-- Name: partactivehist; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partactivehist (
    partactivehist_id integer NOT NULL,
    partactivehist_part_id integer NOT NULL,
    partactivehist_new_activestate boolean NOT NULL,
    partactivehist_usr_id integer NOT NULL,
    partactivehist_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partactivehist_orig_item_id integer NOT NULL,
    partactivehist_orig_rev text NOT NULL,
    partactivehist_orig_serialnumber text NOT NULL
);


ALTER TABLE partactivehist OWNER TO admin;

--
-- TOC entry 226 (class 1259 OID 37085)
-- Name: partactivehist_partactivehist_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partactivehist_partactivehist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partactivehist_partactivehist_id_seq OWNER TO admin;

--
-- TOC entry 3259 (class 0 OID 0)
-- Dependencies: 226
-- Name: partactivehist_partactivehist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partactivehist_partactivehist_id_seq OWNED BY partactivehist.partactivehist_id;


SET default_with_oids = false;

--
-- TOC entry 227 (class 1259 OID 37087)
-- Name: partalloccode; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partalloccode (
    partalloccode_id integer NOT NULL,
    partalloccode_code text NOT NULL,
    partalloccode_description text,
    partalloccode_alloctype character(1)
);


ALTER TABLE partalloccode OWNER TO admin;

--
-- TOC entry 228 (class 1259 OID 37093)
-- Name: partalloccode_partalloccode_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partalloccode_partalloccode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partalloccode_partalloccode_id_seq OWNER TO admin;

--
-- TOC entry 3260 (class 0 OID 0)
-- Dependencies: 228
-- Name: partalloccode_partalloccode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partalloccode_partalloccode_id_seq OWNED BY partalloccode.partalloccode_id;


SET default_with_oids = true;

--
-- TOC entry 229 (class 1259 OID 37095)
-- Name: partallochist; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partallochist (
    partallochist_id integer NOT NULL,
    partallochist_parent_part_id integer NOT NULL,
    partallochist_child_part_id integer NOT NULL,
    partallochist_allocpos integer DEFAULT 0 NOT NULL,
    partallochist_alloctype character(1) NOT NULL,
    partallochist_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partallochist_usr_id integer NOT NULL,
    partallochist_alloccode text NOT NULL,
    partallochist_parent_orig_item_id integer NOT NULL,
    partallochist_parent_orig_rev text NOT NULL,
    partallochist_parent_orig_serialnumber text NOT NULL,
    partallochist_child_orig_item_id integer NOT NULL,
    partallochist_child_orig_rev text NOT NULL,
    partallochist_child_orig_serialnumber text NOT NULL,
    partallochist_line_id integer,
    partallochist_station_id integer,
    CONSTRAINT partallochist_partallochist_alloctype_check CHECK (((partallochist_alloctype = 'a'::bpchar) OR (partallochist_alloctype = 'd'::bpchar)))
);


ALTER TABLE partallochist OWNER TO admin;

--
-- TOC entry 230 (class 1259 OID 37104)
-- Name: partallochist_partallochist_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partallochist_partallochist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partallochist_partallochist_id_seq OWNER TO admin;

--
-- TOC entry 3261 (class 0 OID 0)
-- Dependencies: 230
-- Name: partallochist_partallochist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partallochist_partallochist_id_seq OWNED BY partallochist.partallochist_id;


--
-- TOC entry 231 (class 1259 OID 37106)
-- Name: partcustparamvalue; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partcustparamvalue (
    partcustparamvalue_id integer NOT NULL,
    partcustparamvalue_custparam_id integer NOT NULL,
    partcustparamvalue_part_id integer NOT NULL,
    partcustparamvalue_value text NOT NULL,
    partcustparamvalue_submit_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partcustparamvalue_void_timestamp timestamp without time zone
);


ALTER TABLE partcustparamvalue OWNER TO admin;

--
-- TOC entry 232 (class 1259 OID 37113)
-- Name: partcustparamvalue_partcustparamvalue_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partcustparamvalue_partcustparamvalue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partcustparamvalue_partcustparamvalue_id_seq OWNER TO admin;

--
-- TOC entry 3262 (class 0 OID 0)
-- Dependencies: 232
-- Name: partcustparamvalue_partcustparamvalue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partcustparamvalue_partcustparamvalue_id_seq OWNED BY partcustparamvalue.partcustparamvalue_id;


--
-- TOC entry 233 (class 1259 OID 37115)
-- Name: partdoclink; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partdoclink (
    partdoclink_id integer NOT NULL,
    partdoclink_doctype_id integer NOT NULL,
    partdoclink_part_id integer NOT NULL,
    partdoclink_docnumber text NOT NULL,
    partdoclink_submit_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partdoclink_void_timestamp timestamp without time zone
);


ALTER TABLE partdoclink OWNER TO admin;

--
-- TOC entry 234 (class 1259 OID 37122)
-- Name: partdoclink_partdoclink_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partdoclink_partdoclink_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partdoclink_partdoclink_id_seq OWNER TO admin;

--
-- TOC entry 3263 (class 0 OID 0)
-- Dependencies: 234
-- Name: partdoclink_partdoclink_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partdoclink_partdoclink_id_seq OWNED BY partdoclink.partdoclink_id;


SET default_with_oids = false;

--
-- TOC entry 235 (class 1259 OID 37124)
-- Name: partfile; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partfile (
    partfile_id integer NOT NULL,
    partfile_part_id integer NOT NULL,
    partfile_partfiledata_id integer NOT NULL,
    partfile_partfilethumbnail_id integer,
    partfile_filename text,
    partfile_filetype_id integer NOT NULL,
    partfile_submit_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partfile_void_timestamp timestamp without time zone,
    partfile_custfiletype_id integer
);


ALTER TABLE partfile OWNER TO admin;

--
-- TOC entry 236 (class 1259 OID 37131)
-- Name: partfile_partfile_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partfile_partfile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partfile_partfile_id_seq OWNER TO admin;

--
-- TOC entry 3264 (class 0 OID 0)
-- Dependencies: 236
-- Name: partfile_partfile_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partfile_partfile_id_seq OWNED BY partfile.partfile_id;


--
-- TOC entry 237 (class 1259 OID 37133)
-- Name: partfiledata; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partfiledata (
    partfiledata_id integer NOT NULL,
    partfiledata_data bytea NOT NULL,
    partfiledata_submit_timestamp timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE partfiledata OWNER TO admin;

--
-- TOC entry 238 (class 1259 OID 37140)
-- Name: partfiledata_partfiledata_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partfiledata_partfiledata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partfiledata_partfiledata_id_seq OWNER TO admin;

--
-- TOC entry 3265 (class 0 OID 0)
-- Dependencies: 238
-- Name: partfiledata_partfiledata_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partfiledata_partfiledata_id_seq OWNED BY partfiledata.partfiledata_id;


--
-- TOC entry 239 (class 1259 OID 37142)
-- Name: partfilethumbnail; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partfilethumbnail (
    partfilethumbnail_id integer NOT NULL,
    partfilethumbnail_data bytea,
    partfilethumnail_submit_timestamp timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE partfilethumbnail OWNER TO admin;

--
-- TOC entry 240 (class 1259 OID 37149)
-- Name: partfilethumbnail_partfilethumbnail_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partfilethumbnail_partfilethumbnail_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partfilethumbnail_partfilethumbnail_id_seq OWNER TO admin;

--
-- TOC entry 3266 (class 0 OID 0)
-- Dependencies: 240
-- Name: partfilethumbnail_partfilethumbnail_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partfilethumbnail_partfilethumbnail_id_seq OWNED BY partfilethumbnail.partfilethumbnail_id;


--
-- TOC entry 241 (class 1259 OID 37151)
-- Name: partlog; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partlog (
    partlog_id integer NOT NULL,
    partlog_module_id integer NOT NULL,
    partlog_partlogaction_id integer NOT NULL,
    partlog_part_id integer NOT NULL,
    partlog_recordtype_id integer,
    partlog_record_id integer,
    partlog_doctype_id integer,
    partlog_docnumber text,
    partlog_message text NOT NULL,
    partlog_usr_id integer NOT NULL,
    partlog_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partlog_orig_item_id integer NOT NULL,
    partlog_orig_rev text NOT NULL,
    partlog_orig_serialnumber text NOT NULL,
    partlog_line_id integer,
    partlog_station_id integer
);


ALTER TABLE partlog OWNER TO admin;

--
-- TOC entry 242 (class 1259 OID 37158)
-- Name: partlog_partlog_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partlog_partlog_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partlog_partlog_id_seq OWNER TO admin;

--
-- TOC entry 3267 (class 0 OID 0)
-- Dependencies: 242
-- Name: partlog_partlog_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partlog_partlog_id_seq OWNED BY partlog.partlog_id;


SET default_with_oids = true;

--
-- TOC entry 243 (class 1259 OID 37160)
-- Name: partlogaction; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partlogaction (
    partlogaction_id integer NOT NULL,
    partlogaction_name text,
    partlogaction_description text,
    partlogaction_partlogactiontype_id integer
);


ALTER TABLE partlogaction OWNER TO admin;

--
-- TOC entry 244 (class 1259 OID 37166)
-- Name: partlogaction_partlogaction_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partlogaction_partlogaction_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partlogaction_partlogaction_id_seq OWNER TO admin;

--
-- TOC entry 3268 (class 0 OID 0)
-- Dependencies: 244
-- Name: partlogaction_partlogaction_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partlogaction_partlogaction_id_seq OWNED BY partlogaction.partlogaction_id;


--
-- TOC entry 245 (class 1259 OID 37168)
-- Name: partlogactiontype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partlogactiontype (
    partlogactiontype_id integer NOT NULL,
    partlogactiontype_name text,
    partlogactiontype_description text
);


ALTER TABLE partlogactiontype OWNER TO admin;

--
-- TOC entry 246 (class 1259 OID 37174)
-- Name: partlogactiontype_partlogactiontype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partlogactiontype_partlogactiontype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partlogactiontype_partlogactiontype_id_seq OWNER TO admin;

--
-- TOC entry 3269 (class 0 OID 0)
-- Dependencies: 246
-- Name: partlogactiontype_partlogactiontype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partlogactiontype_partlogactiontype_id_seq OWNED BY partlogactiontype.partlogactiontype_id;


--
-- TOC entry 247 (class 1259 OID 37176)
-- Name: partlogtype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partlogtype (
    partlogtype_id integer NOT NULL,
    partlogtype_name text,
    partlogtype_description text
);


ALTER TABLE partlogtype OWNER TO admin;

--
-- TOC entry 248 (class 1259 OID 37182)
-- Name: partlogtype_partlogtype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partlogtype_partlogtype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partlogtype_partlogtype_id_seq OWNER TO admin;

--
-- TOC entry 3270 (class 0 OID 0)
-- Dependencies: 248
-- Name: partlogtype_partlogtype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partlogtype_partlogtype_id_seq OWNED BY partlogtype.partlogtype_id;


--
-- TOC entry 249 (class 1259 OID 37184)
-- Name: partrefurbhist; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partrefurbhist (
    partrefurbhist_id integer NOT NULL,
    partrefurbhist_part_id integer NOT NULL,
    partrefurbhist_refurb boolean NOT NULL,
    partrefurbhist_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partrefurbhist_usr_id integer NOT NULL,
    partrefurbhist_orig_item_id integer NOT NULL,
    partrefurbhist_orig_rev text NOT NULL,
    partrefurbhist_orig_serialnumber text NOT NULL
);


ALTER TABLE partrefurbhist OWNER TO admin;

--
-- TOC entry 250 (class 1259 OID 37191)
-- Name: partrefurbhist_partrefurbhist_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partrefurbhist_partrefurbhist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partrefurbhist_partrefurbhist_id_seq OWNER TO admin;

--
-- TOC entry 3271 (class 0 OID 0)
-- Dependencies: 250
-- Name: partrefurbhist_partrefurbhist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partrefurbhist_partrefurbhist_id_seq OWNED BY partrefurbhist.partrefurbhist_id;


--
-- TOC entry 251 (class 1259 OID 37193)
-- Name: partrevhist; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partrevhist (
    partrevhist_id integer NOT NULL,
    partrevhist_part_id integer NOT NULL,
    partrevhist_start_rev text NOT NULL,
    partrevhist_end_rev text NOT NULL,
    partrevhist_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partrevhist_usr_id integer NOT NULL,
    partrevhist_orig_item_id integer NOT NULL,
    partrevhist_orig_rev text NOT NULL,
    partrevhist_orig_serialnumber text NOT NULL,
    partrevhist_line_id integer,
    partrevhist_station_id integer,
    partrevhist_doctype_id integer NOT NULL,
    partrevhist_docnumber text NOT NULL
);


ALTER TABLE partrevhist OWNER TO admin;

--
-- TOC entry 252 (class 1259 OID 37200)
-- Name: partrevisionhistory_partrevisionhistory_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partrevisionhistory_partrevisionhistory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partrevisionhistory_partrevisionhistory_id_seq OWNER TO admin;

--
-- TOC entry 3272 (class 0 OID 0)
-- Dependencies: 252
-- Name: partrevisionhistory_partrevisionhistory_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partrevisionhistory_partrevisionhistory_id_seq OWNED BY partrevhist.partrevhist_id;


--
-- TOC entry 253 (class 1259 OID 37202)
-- Name: partscrapcode; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partscrapcode (
    partscrapcode_id integer NOT NULL,
    partscrapcode_code text NOT NULL,
    partscrapcode_description text
);


ALTER TABLE partscrapcode OWNER TO admin;

--
-- TOC entry 254 (class 1259 OID 37208)
-- Name: partscrapcode_partscrapcode_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partscrapcode_partscrapcode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partscrapcode_partscrapcode_id_seq OWNER TO admin;

--
-- TOC entry 3273 (class 0 OID 0)
-- Dependencies: 254
-- Name: partscrapcode_partscrapcode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partscrapcode_partscrapcode_id_seq OWNED BY partscrapcode.partscrapcode_id;


--
-- TOC entry 255 (class 1259 OID 37210)
-- Name: partscraphist; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partscraphist (
    partscraphist_id integer NOT NULL,
    partscraphist_part_id integer NOT NULL,
    partscraphist_partscrapcode_id integer NOT NULL,
    partscraphist_description text,
    partscraphist_usr_id integer NOT NULL,
    partscraphist_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partscraphist_orig_item_id integer NOT NULL,
    partscraphist_orig_rev text NOT NULL,
    partscraphist_orig_serialnumber text NOT NULL
);


ALTER TABLE partscraphist OWNER TO admin;

--
-- TOC entry 256 (class 1259 OID 37217)
-- Name: partscraphist_partscraphist_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partscraphist_partscraphist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partscraphist_partscraphist_id_seq OWNER TO admin;

--
-- TOC entry 3274 (class 0 OID 0)
-- Dependencies: 256
-- Name: partscraphist_partscraphist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partscraphist_partscraphist_id_seq OWNED BY partscraphist.partscraphist_id;


--
-- TOC entry 257 (class 1259 OID 37219)
-- Name: partstate; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partstate (
    partstate_id integer NOT NULL,
    partstate_name text NOT NULL,
    partstate_description text,
    partstate_active boolean DEFAULT true NOT NULL
);


ALTER TABLE partstate OWNER TO admin;

--
-- TOC entry 258 (class 1259 OID 37226)
-- Name: partstate_partstate_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partstate_partstate_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partstate_partstate_id_seq OWNER TO admin;

--
-- TOC entry 3275 (class 0 OID 0)
-- Dependencies: 258
-- Name: partstate_partstate_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partstate_partstate_id_seq OWNED BY partstate.partstate_id;


SET default_with_oids = false;

--
-- TOC entry 259 (class 1259 OID 37228)
-- Name: partstatecode; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partstatecode (
    partstatecode_id integer NOT NULL,
    partstatecode_code text NOT NULL,
    partstatecode_description text
);


ALTER TABLE partstatecode OWNER TO admin;

--
-- TOC entry 260 (class 1259 OID 37234)
-- Name: partstatecode_partstatecode_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partstatecode_partstatecode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partstatecode_partstatecode_id_seq OWNER TO admin;

--
-- TOC entry 3276 (class 0 OID 0)
-- Dependencies: 260
-- Name: partstatecode_partstatecode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partstatecode_partstatecode_id_seq OWNED BY partstatecode.partstatecode_id;


SET default_with_oids = true;

--
-- TOC entry 261 (class 1259 OID 37236)
-- Name: partstateflow; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partstateflow (
    partstateflow_id integer NOT NULL,
    partstateflow_start_partstate_id integer NOT NULL,
    partstateflow_end_partstate_id integer NOT NULL,
    partstateflow_active boolean DEFAULT true NOT NULL,
    partstateflow_overridereq boolean DEFAULT false NOT NULL
);


ALTER TABLE partstateflow OWNER TO admin;

--
-- TOC entry 262 (class 1259 OID 37241)
-- Name: partstateflow_partstateflow_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partstateflow_partstateflow_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partstateflow_partstateflow_id_seq OWNER TO admin;

--
-- TOC entry 3277 (class 0 OID 0)
-- Dependencies: 262
-- Name: partstateflow_partstateflow_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partstateflow_partstateflow_id_seq OWNED BY partstateflow.partstateflow_id;


--
-- TOC entry 263 (class 1259 OID 37243)
-- Name: partstatehist; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partstatehist (
    partstatehist_id integer NOT NULL,
    partstatehist_part_id integer NOT NULL,
    partstatehist_start_partstate_id integer NOT NULL,
    partstatehist_end_partstate_id integer NOT NULL,
    partstatehist_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    partstatehist_usr_id integer NOT NULL,
    partstatehist_orig_item_id integer NOT NULL,
    partstatehist_orig_rev text NOT NULL,
    partstatehist_orig_serialnumber text NOT NULL,
    partstatehist_overridden boolean DEFAULT false NOT NULL
);


ALTER TABLE partstatehist OWNER TO admin;

--
-- TOC entry 264 (class 1259 OID 37251)
-- Name: partstatehist_partstatehist_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partstatehist_partstatehist_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partstatehist_partstatehist_id_seq OWNER TO admin;

--
-- TOC entry 3278 (class 0 OID 0)
-- Dependencies: 264
-- Name: partstatehist_partstatehist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partstatehist_partstatehist_id_seq OWNED BY partstatehist.partstatehist_id;


--
-- TOC entry 265 (class 1259 OID 37253)
-- Name: partwatcher; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE partwatcher (
    partwatcher_id integer NOT NULL,
    partwatcher_part_id integer NOT NULL,
    partwatcher_usr_id integer NOT NULL
);


ALTER TABLE partwatcher OWNER TO admin;

--
-- TOC entry 266 (class 1259 OID 37256)
-- Name: partwatcher_partwatcher_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE partwatcher_partwatcher_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE partwatcher_partwatcher_id_seq OWNER TO admin;

--
-- TOC entry 3279 (class 0 OID 0)
-- Dependencies: 266
-- Name: partwatcher_partwatcher_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE partwatcher_partwatcher_id_seq OWNED BY partwatcher.partwatcher_id;


SET default_with_oids = false;

--
-- TOC entry 267 (class 1259 OID 37258)
-- Name: priv; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE priv (
    priv_id integer NOT NULL,
    priv_module_id integer NOT NULL,
    priv_name text NOT NULL,
    priv_description text,
    priv_sequence integer DEFAULT 0 NOT NULL,
    priv_privtype_id integer
);


ALTER TABLE priv OWNER TO admin;

--
-- TOC entry 268 (class 1259 OID 37265)
-- Name: priv_priv_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE priv_priv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE priv_priv_id_seq OWNER TO admin;

--
-- TOC entry 3280 (class 0 OID 0)
-- Dependencies: 268
-- Name: priv_priv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE priv_priv_id_seq OWNED BY priv.priv_id;


SET default_with_oids = true;

--
-- TOC entry 269 (class 1259 OID 37267)
-- Name: privtype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE privtype (
    privtype_id integer NOT NULL,
    privtype_name text,
    privtype_description text
);


ALTER TABLE privtype OWNER TO admin;

--
-- TOC entry 270 (class 1259 OID 37273)
-- Name: privtype_privtype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE privtype_privtype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE privtype_privtype_id_seq OWNER TO admin;

--
-- TOC entry 3281 (class 0 OID 0)
-- Dependencies: 270
-- Name: privtype_privtype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE privtype_privtype_id_seq OWNED BY privtype.privtype_id;


--
-- TOC entry 271 (class 1259 OID 37275)
-- Name: recordcustparamlink; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordcustparamlink (
    recordcustparamlink_id integer NOT NULL,
    recordcustparamlink_custparam_id integer NOT NULL,
    recordcustparamlink_recordtype_id integer NOT NULL,
    recordcustparamlink_active boolean DEFAULT true NOT NULL
);


ALTER TABLE recordcustparamlink OWNER TO admin;

--
-- TOC entry 272 (class 1259 OID 37279)
-- Name: recordcustparamlink_recordcustparamlink_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordcustparamlink_recordcustparamlink_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordcustparamlink_recordcustparamlink_id_seq OWNER TO admin;

--
-- TOC entry 3282 (class 0 OID 0)
-- Dependencies: 272
-- Name: recordcustparamlink_recordcustparamlink_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordcustparamlink_recordcustparamlink_id_seq OWNED BY recordcustparamlink.recordcustparamlink_id;


--
-- TOC entry 273 (class 1259 OID 37281)
-- Name: recordcustparamvalue; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordcustparamvalue (
    recordcustparamvalue_id integer NOT NULL,
    recordcustparamvalue_custparam_id integer NOT NULL,
    recordcustparamvalue_recordtype_id integer NOT NULL,
    recordcustparamvalue_record_id integer NOT NULL,
    recordcustparamvalue_value text NOT NULL,
    recordcustparamvalue_submit_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    recordcustparamvalue_void_timestamp timestamp without time zone
);


ALTER TABLE recordcustparamvalue OWNER TO admin;

--
-- TOC entry 274 (class 1259 OID 37288)
-- Name: recordcustparamvalue_recordcustparamvalue_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordcustparamvalue_recordcustparamvalue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordcustparamvalue_recordcustparamvalue_id_seq OWNER TO admin;

--
-- TOC entry 3283 (class 0 OID 0)
-- Dependencies: 274
-- Name: recordcustparamvalue_recordcustparamvalue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordcustparamvalue_recordcustparamvalue_id_seq OWNED BY recordcustparamvalue.recordcustparamvalue_id;


--
-- TOC entry 275 (class 1259 OID 37290)
-- Name: recorddoclink; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recorddoclink (
    recorddoclink_id integer NOT NULL,
    recorddoclink_doctype_id integer NOT NULL,
    recorddoclink_recordtype_id integer NOT NULL,
    recorddoclink_record_id integer NOT NULL,
    recorddoclink_docnumber text NOT NULL,
    recorddoclink_submit_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    recorddoclink_void_timestamp timestamp without time zone
);


ALTER TABLE recorddoclink OWNER TO admin;

--
-- TOC entry 276 (class 1259 OID 37297)
-- Name: recorddoclink_recorddoclink_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recorddoclink_recorddoclink_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recorddoclink_recorddoclink_id_seq OWNER TO admin;

--
-- TOC entry 3284 (class 0 OID 0)
-- Dependencies: 276
-- Name: recorddoclink_recorddoclink_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recorddoclink_recorddoclink_id_seq OWNED BY recorddoclink.recorddoclink_id;


SET default_with_oids = false;

--
-- TOC entry 277 (class 1259 OID 37299)
-- Name: recordfile; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordfile (
    recordfile_id integer NOT NULL,
    recordfile_recordtype_id integer NOT NULL,
    recordfile_record_id integer NOT NULL,
    recordfile_recordfiledata_id integer NOT NULL,
    recordfile_recordfilethumbnail_id integer,
    recordfile_filename text,
    recordfile_filetype_id integer NOT NULL,
    recordfile_submit_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    recordfile_void_timestamp timestamp without time zone,
    recordfile_custfiletype_id integer
);


ALTER TABLE recordfile OWNER TO admin;

--
-- TOC entry 278 (class 1259 OID 37306)
-- Name: recordfile_recordfile_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordfile_recordfile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordfile_recordfile_id_seq OWNER TO admin;

--
-- TOC entry 3285 (class 0 OID 0)
-- Dependencies: 278
-- Name: recordfile_recordfile_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordfile_recordfile_id_seq OWNED BY recordfile.recordfile_id;


--
-- TOC entry 279 (class 1259 OID 37308)
-- Name: recordfiledata; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordfiledata (
    recordfiledata_id integer NOT NULL,
    recordfiledata_data bytea NOT NULL
);


ALTER TABLE recordfiledata OWNER TO admin;

--
-- TOC entry 280 (class 1259 OID 37314)
-- Name: recordfiledata_recordfiledata_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordfiledata_recordfiledata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordfiledata_recordfiledata_id_seq OWNER TO admin;

--
-- TOC entry 3286 (class 0 OID 0)
-- Dependencies: 280
-- Name: recordfiledata_recordfiledata_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordfiledata_recordfiledata_id_seq OWNED BY recordfiledata.recordfiledata_id;


--
-- TOC entry 281 (class 1259 OID 37316)
-- Name: recordfilethumbnail; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordfilethumbnail (
    recordfilethumbnail_id integer NOT NULL,
    recordfilethumbnail_data bytea
);


ALTER TABLE recordfilethumbnail OWNER TO admin;

--
-- TOC entry 282 (class 1259 OID 37322)
-- Name: recordfilethumbnail_recordfilethumbnail_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordfilethumbnail_recordfilethumbnail_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordfilethumbnail_recordfilethumbnail_id_seq OWNER TO admin;

--
-- TOC entry 3287 (class 0 OID 0)
-- Dependencies: 282
-- Name: recordfilethumbnail_recordfilethumbnail_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordfilethumbnail_recordfilethumbnail_id_seq OWNED BY recordfilethumbnail.recordfilethumbnail_id;


--
-- TOC entry 283 (class 1259 OID 37324)
-- Name: recordlog; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordlog (
    recordlog_id integer NOT NULL,
    recordlog_module_id integer NOT NULL,
    recordlog_recordlogaction_id integer NOT NULL,
    recordlog_recordtype_id integer NOT NULL,
    recordlog_record_id integer NOT NULL,
    recordlog_doctype_id integer,
    recordlog_docnumber text,
    recordlog_message text NOT NULL,
    recordlog_usr_id integer NOT NULL,
    recordlog_timestamp timestamp without time zone DEFAULT now() NOT NULL,
    recordlog_secondary_recordtype_id integer,
    recordlog_secondary_record_id integer
);


ALTER TABLE recordlog OWNER TO admin;

--
-- TOC entry 284 (class 1259 OID 37331)
-- Name: recordlog_recordlog_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordlog_recordlog_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordlog_recordlog_id_seq OWNER TO admin;

--
-- TOC entry 3288 (class 0 OID 0)
-- Dependencies: 284
-- Name: recordlog_recordlog_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordlog_recordlog_id_seq OWNED BY recordlog.recordlog_id;


SET default_with_oids = true;

--
-- TOC entry 285 (class 1259 OID 37333)
-- Name: recordlogaction; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordlogaction (
    recordlogaction_id integer NOT NULL,
    recordlogaction_name text,
    recordlogaction_description text,
    recordlogaction_recordlogactiontype_id integer
);


ALTER TABLE recordlogaction OWNER TO admin;

--
-- TOC entry 286 (class 1259 OID 37339)
-- Name: recordlogaction_recordlogaction_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordlogaction_recordlogaction_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordlogaction_recordlogaction_id_seq OWNER TO admin;

--
-- TOC entry 3289 (class 0 OID 0)
-- Dependencies: 286
-- Name: recordlogaction_recordlogaction_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordlogaction_recordlogaction_id_seq OWNED BY recordlogaction.recordlogaction_id;


--
-- TOC entry 287 (class 1259 OID 37341)
-- Name: recordlogactiontype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordlogactiontype (
    recordlogactiontype_id integer NOT NULL,
    recordlogactiontype_name text,
    recordlogactiontype_description text
);


ALTER TABLE recordlogactiontype OWNER TO admin;

--
-- TOC entry 288 (class 1259 OID 37347)
-- Name: recordlogactiontype_recordlogactiontype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordlogactiontype_recordlogactiontype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordlogactiontype_recordlogactiontype_id_seq OWNER TO admin;

--
-- TOC entry 3290 (class 0 OID 0)
-- Dependencies: 288
-- Name: recordlogactiontype_recordlogactiontype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordlogactiontype_recordlogactiontype_id_seq OWNED BY recordlogactiontype.recordlogactiontype_id;


--
-- TOC entry 289 (class 1259 OID 37349)
-- Name: recordtype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordtype (
    recordtype_id integer NOT NULL,
    recordtype_name text NOT NULL,
    recordtype_description text,
    recordtype_prefix text NOT NULL,
    recordtype_padlen integer NOT NULL
);


ALTER TABLE recordtype OWNER TO admin;

--
-- TOC entry 290 (class 1259 OID 37355)
-- Name: recordtype_recordtype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordtype_recordtype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordtype_recordtype_id_seq OWNER TO admin;

--
-- TOC entry 3291 (class 0 OID 0)
-- Dependencies: 290
-- Name: recordtype_recordtype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordtype_recordtype_id_seq OWNED BY recordtype.recordtype_id;


--
-- TOC entry 291 (class 1259 OID 37357)
-- Name: recordwatcher; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE recordwatcher (
    recordwatcher_id integer NOT NULL,
    recordwatcher_recordtype_id integer NOT NULL,
    recordwatcher_record_id integer NOT NULL,
    recordwatcher_usr_id integer NOT NULL
);


ALTER TABLE recordwatcher OWNER TO admin;

--
-- TOC entry 292 (class 1259 OID 37360)
-- Name: recordwatcher_recordwatcher_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE recordwatcher_recordwatcher_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE recordwatcher_recordwatcher_id_seq OWNER TO admin;

--
-- TOC entry 3292 (class 0 OID 0)
-- Dependencies: 292
-- Name: recordwatcher_recordwatcher_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE recordwatcher_recordwatcher_id_seq OWNED BY recordwatcher.recordwatcher_id;


SET default_with_oids = false;

--
-- TOC entry 293 (class 1259 OID 37362)
-- Name: role; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE role (
    role_id integer NOT NULL,
    role_name text,
    role_description text,
    role_active boolean DEFAULT true NOT NULL
);


ALTER TABLE role OWNER TO admin;

--
-- TOC entry 294 (class 1259 OID 37369)
-- Name: role_role_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE role_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE role_role_id_seq OWNER TO admin;

--
-- TOC entry 3293 (class 0 OID 0)
-- Dependencies: 294
-- Name: role_role_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE role_role_id_seq OWNED BY role.role_id;


SET default_with_oids = true;

--
-- TOC entry 295 (class 1259 OID 37371)
-- Name: rolepriv; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE rolepriv (
    rolepriv_id integer NOT NULL,
    rolepriv_role_id integer NOT NULL,
    rolepriv_priv_id integer NOT NULL
);


ALTER TABLE rolepriv OWNER TO admin;

--
-- TOC entry 296 (class 1259 OID 37374)
-- Name: rolepriv_rolepriv_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE rolepriv_rolepriv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE rolepriv_rolepriv_id_seq OWNER TO admin;

--
-- TOC entry 3294 (class 0 OID 0)
-- Dependencies: 296
-- Name: rolepriv_rolepriv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE rolepriv_rolepriv_id_seq OWNED BY rolepriv.rolepriv_id;


--
-- TOC entry 297 (class 1259 OID 37376)
-- Name: serialpattern; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE serialpattern (
    serialpattern_id integer NOT NULL,
    serialpattern_name text NOT NULL,
    serialpattern_pattern text NOT NULL
);


ALTER TABLE serialpattern OWNER TO admin;

--
-- TOC entry 298 (class 1259 OID 37382)
-- Name: serialpattern_serialpattern_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE serialpattern_serialpattern_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE serialpattern_serialpattern_id_seq OWNER TO admin;

--
-- TOC entry 3295 (class 0 OID 0)
-- Dependencies: 298
-- Name: serialpattern_serialpattern_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE serialpattern_serialpattern_id_seq OWNED BY serialpattern.serialpattern_id;


--
-- TOC entry 299 (class 1259 OID 37384)
-- Name: serialprefix; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE serialprefix (
    serialprefix_id integer NOT NULL,
    serialprefix_name text,
    serialprefix_prefix text,
    serialprefix_serialpattern_id integer
);


ALTER TABLE serialprefix OWNER TO admin;

--
-- TOC entry 300 (class 1259 OID 37390)
-- Name: serialprefix_serialprefix_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE serialprefix_serialprefix_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE serialprefix_serialprefix_id_seq OWNER TO admin;

--
-- TOC entry 3296 (class 0 OID 0)
-- Dependencies: 300
-- Name: serialprefix_serialprefix_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE serialprefix_serialprefix_id_seq OWNED BY serialprefix.serialprefix_id;


--
-- TOC entry 301 (class 1259 OID 37392)
-- Name: serialstream; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE serialstream (
    serialstream_id integer NOT NULL,
    serialstream_name text
);


ALTER TABLE serialstream OWNER TO admin;

--
-- TOC entry 302 (class 1259 OID 37398)
-- Name: serialstream_serialstream_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE serialstream_serialstream_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE serialstream_serialstream_id_seq OWNER TO admin;

--
-- TOC entry 3297 (class 0 OID 0)
-- Dependencies: 302
-- Name: serialstream_serialstream_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE serialstream_serialstream_id_seq OWNED BY serialstream.serialstream_id;


--
-- TOC entry 303 (class 1259 OID 37400)
-- Name: station; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE station (
    station_id integer NOT NULL,
    station_name text NOT NULL,
    station_description text,
    station_active boolean DEFAULT true NOT NULL,
    station_stationtype_id integer
);


ALTER TABLE station OWNER TO admin;

--
-- TOC entry 304 (class 1259 OID 37407)
-- Name: station_station_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE station_station_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE station_station_id_seq OWNER TO admin;

--
-- TOC entry 3298 (class 0 OID 0)
-- Dependencies: 304
-- Name: station_station_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE station_station_id_seq OWNED BY station.station_id;


--
-- TOC entry 305 (class 1259 OID 37409)
-- Name: stationtype; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE stationtype (
    stationtype_id integer NOT NULL,
    stationtype_name text NOT NULL,
    stationtype_description text,
    stationtype_active boolean DEFAULT true NOT NULL
);


ALTER TABLE stationtype OWNER TO admin;

--
-- TOC entry 306 (class 1259 OID 37416)
-- Name: stationtype_stationtype_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE stationtype_stationtype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stationtype_stationtype_id_seq OWNER TO admin;

--
-- TOC entry 3299 (class 0 OID 0)
-- Dependencies: 306
-- Name: stationtype_stationtype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE stationtype_stationtype_id_seq OWNED BY stationtype.stationtype_id;


--
-- TOC entry 307 (class 1259 OID 37418)
-- Name: usr; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE usr (
    usr_id integer NOT NULL,
    usr_username text NOT NULL,
    usr_name text NOT NULL,
    usr_email text NOT NULL,
    usr_active boolean DEFAULT true NOT NULL
);


ALTER TABLE usr OWNER TO admin;

--
-- TOC entry 308 (class 1259 OID 37425)
-- Name: user_user_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE user_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_user_id_seq OWNER TO admin;

--
-- TOC entry 3300 (class 0 OID 0)
-- Dependencies: 308
-- Name: user_user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE user_user_id_seq OWNED BY usr.usr_id;


--
-- TOC entry 309 (class 1259 OID 37427)
-- Name: usrpriv; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE usrpriv (
    usrpriv_id integer NOT NULL,
    usrpriv_usr_id integer NOT NULL,
    usrpriv_priv_id integer NOT NULL
);


ALTER TABLE usrpriv OWNER TO admin;

--
-- TOC entry 310 (class 1259 OID 37430)
-- Name: userpriv_userpriv_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE userpriv_userpriv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE userpriv_userpriv_id_seq OWNER TO admin;

--
-- TOC entry 3301 (class 0 OID 0)
-- Dependencies: 310
-- Name: userpriv_userpriv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE userpriv_userpriv_id_seq OWNED BY usrpriv.usrpriv_id;


--
-- TOC entry 311 (class 1259 OID 37432)
-- Name: usrrole; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE usrrole (
    usrrole_id integer NOT NULL,
    usrrole_usr_id integer NOT NULL,
    usrrole_role_id integer NOT NULL
);


ALTER TABLE usrrole OWNER TO admin;

--
-- TOC entry 312 (class 1259 OID 37435)
-- Name: userrole_userrole_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

CREATE SEQUENCE userrole_userrole_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE userrole_userrole_id_seq OWNER TO admin;

--
-- TOC entry 3302 (class 0 OID 0)
-- Dependencies: 312
-- Name: userrole_userrole_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: admin
--

ALTER SEQUENCE userrole_userrole_id_seq OWNED BY usrrole.usrrole_id;


--
-- TOC entry 313 (class 1259 OID 37437)
-- Name: viewbackflush; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewbackflush AS
 SELECT backflush.backflush_id,
    backflush.backflush_orig_item_id,
    oitem.item_number AS orig_item_number,
    oitem.item_description AS orig_item_description,
    backflush.backflush_orig_rev,
    backflush.backflush_orig_serialnumber,
    backflush.backflush_part_id,
    part.part_item_id,
    pitem.item_number,
    pitem.item_description,
    part.part_rev,
    part.part_serialnumber,
    backflush.backflush_qty,
    backflush.backflush_doctype_id,
    doctype.doctype_name,
    backflush.backflush_docnumber,
    backflush.backflush_create_timestamp,
    backflush.backflush_create_usr_id,
    cusr.usr_username AS create_usr_username,
    backflush.backflush_complete_timestamp,
    backflush.backflush_complete_usr_id,
    busr.usr_username AS complete_usr_username,
    backflush.backflush_void_timestamp,
    backflush.backflush_void_usr_id,
    vusr.usr_username AS void_usr_username,
    backflush.backflush_void_type,
    backflush.backflush_void_reason,
    backflush.backflush_line_id,
    line.line_name,
    backflush.backflush_station_id,
    station.station_name
   FROM (((((((((backflush
     LEFT JOIN part ON ((part.part_id = backflush.backflush_part_id)))
     LEFT JOIN item pitem ON ((pitem.item_id = part.part_item_id)))
     LEFT JOIN item oitem ON ((oitem.item_id = backflush.backflush_orig_item_id)))
     LEFT JOIN doctype ON ((doctype.doctype_id = backflush.backflush_doctype_id)))
     LEFT JOIN usr cusr ON ((cusr.usr_id = backflush.backflush_create_usr_id)))
     LEFT JOIN usr busr ON ((busr.usr_id = backflush.backflush_complete_usr_id)))
     LEFT JOIN usr vusr ON ((vusr.usr_id = backflush.backflush_void_usr_id)))
     LEFT JOIN line ON ((line.line_id = backflush.backflush_line_id)))
     LEFT JOIN station ON ((station.station_id = backflush.backflush_station_id)));


ALTER TABLE viewbackflush OWNER TO admin;

--
-- TOC entry 314 (class 1259 OID 37442)
-- Name: viewitem; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewitem AS
 SELECT item.item_id,
    item.item_number,
    item.item_description,
    item.item_active,
    serialstream.serialstream_name,
    serialprefix.serialprefix_prefix,
    serialpattern.serialpattern_pattern,
    itemfreqcode.itemfreqcode_freqcode
   FROM ((((item
     LEFT JOIN serialstream ON ((serialstream.serialstream_id = item.item_serialstream_id)))
     LEFT JOIN serialprefix ON ((serialprefix.serialprefix_id = item.item_serialprefix_id)))
     LEFT JOIN serialpattern ON ((serialpattern.serialpattern_id = serialprefix.serialprefix_serialpattern_id)))
     LEFT JOIN itemfreqcode ON ((itemfreqcode.itemfreqcode_id = item.item_itemfreqcode_id)));


ALTER TABLE viewitem OWNER TO admin;

--
-- TOC entry 315 (class 1259 OID 37447)
-- Name: viewitemcustparamlink; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewitemcustparamlink AS
 SELECT custparam.custparam_id,
    custparam.custparam_param,
    custparam.custparam_active_timestamp,
    custparam.custparam_void_timestamp,
    datatype.datatype_id,
    datatype.datatype_type,
    itemcustparamlink.itemcustparamlink_id,
    item.item_id,
    item.item_number,
    itemcustparamlink.itemcustparamlink_active
   FROM (((itemcustparamlink
     LEFT JOIN custparam ON ((custparam.custparam_id = itemcustparamlink.itemcustparamlink_custparam_id)))
     LEFT JOIN datatype ON ((datatype.datatype_id = custparam.custparam_datatype_id)))
     LEFT JOIN item ON ((item.item_id = itemcustparamlink.itemcustparamlink_item_id)));


ALTER TABLE viewitemcustparamlink OWNER TO admin;

--
-- TOC entry 316 (class 1259 OID 37452)
-- Name: viewitemrev; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewitemrev AS
 SELECT itemrev.itemrev_id,
    itemrev.itemrev_rev,
    itemrev.itemrev_npi,
    itemrev.itemrev_item_id,
    item.item_number,
    item.item_description,
    item.item_active
   FROM (itemrev
     LEFT JOIN item ON ((item.item_id = itemrev.itemrev_item_id)));


ALTER TABLE viewitemrev OWNER TO admin;

--
-- TOC entry 317 (class 1259 OID 37456)
-- Name: viewpart; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewpart AS
 SELECT item.item_number,
    item.item_description,
    part.part_rev,
    part.part_serialnumber,
    part.part_sequencenumber,
    part.part_active,
    part.part_refurb,
    partstate.partstate_name,
    part.part_createdate,
    doctype.doctype_name,
    part.part_create_docnumber,
    part.part_loc_id,
    loc.loc_number,
    loc.loc_name,
    part.part_cust_id,
    cust.cust_number,
    cust.cust_name,
    part.part_allocpos,
    part.part_id,
    item.item_id,
    part.part_partstate_id,
    part.part_backflushed,
    parentitem.item_number AS parent_item_number,
    parentpart.part_rev AS parent_part_rev,
    parentpart.part_serialnumber AS parent_part_serialnumber,
    parentpart.part_sequencenumber AS parent_part_sequencenumber,
    parentpart.part_active AS parent_part_active,
    part.part_parent_part_id AS parent_part_id,
    parentitem.item_id AS parent_item_id,
    parentpart.part_partstate_id AS parent_part_partstate_id,
    parentpart.part_loc_id AS parent_part_loc_id,
    parentpart.part_cust_id AS parent_part_cust_id
   FROM (((((((part
     LEFT JOIN item ON ((item.item_id = part.part_item_id)))
     LEFT JOIN partstate ON ((partstate.partstate_id = part.part_partstate_id)))
     LEFT JOIN loc ON ((loc.loc_id = part.part_loc_id)))
     LEFT JOIN cust ON ((cust.cust_id = part.part_cust_id)))
     LEFT JOIN doctype ON ((doctype.doctype_id = part.part_create_doctype_id)))
     LEFT JOIN part parentpart ON ((parentpart.part_id = part.part_parent_part_id)))
     LEFT JOIN item parentitem ON ((parentitem.item_id = parentpart.part_item_id)))
  ORDER BY item.item_number, part.part_sequencenumber, part.part_serialnumber;


ALTER TABLE viewpart OWNER TO admin;

--
-- TOC entry 318 (class 1259 OID 37461)
-- Name: viewpartcustparamvalue; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewpartcustparamvalue AS
 SELECT custparam.custparam_id,
    custparam.custparam_param,
    custparam.custparam_active_timestamp,
    custparam.custparam_void_timestamp,
    partcustparamvalue.partcustparamvalue_value,
    datatype.datatype_id,
    datatype.datatype_type,
    part.part_id,
    item.item_id,
    item.item_number,
    part.part_rev,
    part.part_serialnumber,
    partcustparamvalue.partcustparamvalue_submit_timestamp,
    partcustparamvalue.partcustparamvalue_void_timestamp
   FROM ((((partcustparamvalue
     LEFT JOIN custparam ON ((custparam.custparam_id = partcustparamvalue.partcustparamvalue_custparam_id)))
     LEFT JOIN datatype ON ((datatype.datatype_id = custparam.custparam_datatype_id)))
     LEFT JOIN part ON ((part.part_id = partcustparamvalue.partcustparamvalue_part_id)))
     LEFT JOIN item ON ((item.item_id = part.part_item_id)));


ALTER TABLE viewpartcustparamvalue OWNER TO admin;

--
-- TOC entry 319 (class 1259 OID 37466)
-- Name: viewpartdoclink; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewpartdoclink AS
 SELECT partdoclink.partdoclink_id,
    doctype.doctype_id,
    doctype.doctype_name,
    doctype.doctype_description,
    partdoclink.partdoclink_docnumber,
    part.part_id,
    item.item_id,
    item.item_number,
    part.part_rev,
    part.part_serialnumber,
    partdoclink.partdoclink_submit_timestamp,
    partdoclink.partdoclink_void_timestamp
   FROM (((partdoclink
     LEFT JOIN doctype ON ((doctype.doctype_id = partdoclink.partdoclink_doctype_id)))
     LEFT JOIN part ON ((part.part_id = partdoclink.partdoclink_part_id)))
     LEFT JOIN item ON ((item.item_id = part.part_item_id)));


ALTER TABLE viewpartdoclink OWNER TO admin;

--
-- TOC entry 320 (class 1259 OID 37471)
-- Name: viewpartlog; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewpartlog AS
 SELECT partlog.partlog_id,
    part.part_id,
    part.part_item_id,
    pitem.item_number,
    part.part_rev,
    part.part_serialnumber,
    part.part_sequencenumber,
    partlog.partlog_orig_item_id,
    oitem.item_number AS partlog_orig_item_number,
    partlog.partlog_orig_rev,
    partlog.partlog_orig_serialnumber,
    module.module_name,
    partlogaction.partlogaction_name,
    partlogactiontype.partlogactiontype_name,
    partlog.partlog_message,
    recordtype.recordtype_name,
    partlog.partlog_record_id,
    doctype.doctype_name,
    partlog.partlog_docnumber,
    partlog.partlog_usr_id,
    usr.usr_username,
    partlog.partlog_timestamp
   FROM (((((((((partlog
     LEFT JOIN part ON ((part.part_id = partlog.partlog_part_id)))
     LEFT JOIN item pitem ON ((pitem.item_id = part.part_item_id)))
     LEFT JOIN item oitem ON ((oitem.item_id = partlog.partlog_orig_item_id)))
     LEFT JOIN module ON ((module.module_id = partlog.partlog_module_id)))
     LEFT JOIN partlogaction ON ((partlogaction.partlogaction_id = partlog.partlog_partlogaction_id)))
     LEFT JOIN partlogactiontype ON ((partlogactiontype.partlogactiontype_id = partlogaction.partlogaction_partlogactiontype_id)))
     LEFT JOIN recordtype ON ((recordtype.recordtype_id = partlog.partlog_recordtype_id)))
     LEFT JOIN doctype ON ((doctype.doctype_id = partlog.partlog_doctype_id)))
     LEFT JOIN usr ON ((usr.usr_id = partlog.partlog_usr_id)))
  ORDER BY partlog.partlog_id;


ALTER TABLE viewpartlog OWNER TO admin;

--
-- TOC entry 321 (class 1259 OID 37476)
-- Name: viewpartstateflow; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewpartstateflow AS
 SELECT sps.partstate_id AS start_partstate_id,
    sps.partstate_name AS start_partstate_name,
    sps.partstate_active AS start_partstate_active,
    eps.partstate_id AS end_partstate_id,
    eps.partstate_name AS end_partstate_name,
    eps.partstate_active AS end_partstate_active,
    partstateflow.partstateflow_id,
    partstateflow.partstateflow_active,
    partstateflow.partstateflow_overridereq
   FROM ((partstateflow
     LEFT JOIN partstate sps ON ((sps.partstate_id = partstateflow.partstateflow_start_partstate_id)))
     LEFT JOIN partstate eps ON ((eps.partstate_id = partstateflow.partstateflow_end_partstate_id)));


ALTER TABLE viewpartstateflow OWNER TO admin;

--
-- TOC entry 322 (class 1259 OID 37480)
-- Name: viewpartwatcher; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewpartwatcher AS
 SELECT item.item_number,
    part.part_rev,
    part.part_serialnumber,
    part.part_sequencenumber,
    part.part_active,
    part.part_refurb,
    usr.usr_username,
    usr.usr_name,
    usr.usr_email,
    usr.usr_active
   FROM (((partwatcher
     LEFT JOIN part ON ((part.part_id = partwatcher.partwatcher_part_id)))
     LEFT JOIN item ON ((item.item_id = part.part_item_id)))
     LEFT JOIN usr ON ((usr.usr_id = partwatcher.partwatcher_usr_id)))
  ORDER BY item.item_number, part.part_sequencenumber, part.part_serialnumber, usr.usr_username;


ALTER TABLE viewpartwatcher OWNER TO admin;

--
-- TOC entry 323 (class 1259 OID 37485)
-- Name: viewprivgranted; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewprivgranted AS
 SELECT usr.usr_username,
    priv.priv_name,
    module.module_name,
    true AS priv_granted
   FROM (((usrpriv
     LEFT JOIN usr ON ((usr.usr_id = usrpriv.usrpriv_usr_id)))
     LEFT JOIN priv ON ((priv.priv_id = usrpriv.usrpriv_priv_id)))
     LEFT JOIN module ON ((module.module_id = priv.priv_module_id)))
UNION
 SELECT usr.usr_username,
    priv.priv_name,
    module.module_name,
    true AS priv_granted
   FROM (((((rolepriv
     LEFT JOIN role ON ((role.role_id = rolepriv.rolepriv_role_id)))
     LEFT JOIN usrrole ON ((usrrole.usrrole_role_id = role.role_id)))
     LEFT JOIN usr ON ((usr.usr_id = usrrole.usrrole_usr_id)))
     LEFT JOIN priv ON ((priv.priv_id = rolepriv.rolepriv_priv_id)))
     LEFT JOIN module ON ((module.module_id = priv.priv_module_id)));


ALTER TABLE viewprivgranted OWNER TO admin;

--
-- TOC entry 324 (class 1259 OID 37490)
-- Name: viewrecordcustparamlink; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewrecordcustparamlink AS
 SELECT custparam.custparam_id,
    custparam.custparam_param,
    custparam.custparam_active_timestamp,
    custparam.custparam_void_timestamp,
    datatype.datatype_id,
    datatype.datatype_type,
    recordcustparamlink.recordcustparamlink_id,
    recordtype.recordtype_id,
    recordtype.recordtype_name,
    recordcustparamlink.recordcustparamlink_active
   FROM (((recordcustparamlink
     LEFT JOIN custparam ON ((custparam.custparam_id = recordcustparamlink.recordcustparamlink_custparam_id)))
     LEFT JOIN datatype ON ((datatype.datatype_id = custparam.custparam_datatype_id)))
     LEFT JOIN recordtype ON ((recordtype.recordtype_id = recordcustparamlink.recordcustparamlink_recordtype_id)));


ALTER TABLE viewrecordcustparamlink OWNER TO admin;

--
-- TOC entry 325 (class 1259 OID 37495)
-- Name: viewrecordcustparamvalue; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewrecordcustparamvalue AS
 SELECT custparam.custparam_id,
    custparam.custparam_param,
    custparam.custparam_active_timestamp,
    custparam.custparam_void_timestamp,
    recordcustparamvalue.recordcustparamvalue_value,
    datatype.datatype_id,
    datatype.datatype_type,
    recordtype.recordtype_id,
    recordtype.recordtype_name,
    recordcustparamvalue.recordcustparamvalue_record_id,
    recordcustparamvalue.recordcustparamvalue_submit_timestamp,
    recordcustparamvalue.recordcustparamvalue_void_timestamp
   FROM (((recordcustparamvalue
     LEFT JOIN custparam ON ((custparam.custparam_id = recordcustparamvalue.recordcustparamvalue_custparam_id)))
     LEFT JOIN datatype ON ((datatype.datatype_id = custparam.custparam_datatype_id)))
     LEFT JOIN recordtype ON ((recordtype.recordtype_id = recordcustparamvalue.recordcustparamvalue_recordtype_id)));


ALTER TABLE viewrecordcustparamvalue OWNER TO admin;

--
-- TOC entry 326 (class 1259 OID 37500)
-- Name: viewrecorddoclink; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewrecorddoclink AS
 SELECT recorddoclink.recorddoclink_id,
    doctype.doctype_id,
    doctype.doctype_name,
    doctype.doctype_description,
    recorddoclink.recorddoclink_docnumber,
    recordtype.recordtype_name,
    recorddoclink.recorddoclink_record_id,
    recorddoclink.recorddoclink_submit_timestamp,
    recorddoclink.recorddoclink_void_timestamp
   FROM ((recorddoclink
     LEFT JOIN doctype ON ((doctype.doctype_id = recorddoclink.recorddoclink_doctype_id)))
     LEFT JOIN recordtype ON ((recordtype.recordtype_id = recorddoclink.recorddoclink_recordtype_id)));


ALTER TABLE viewrecorddoclink OWNER TO admin;

--
-- TOC entry 327 (class 1259 OID 37504)
-- Name: viewrecordwatcher; Type: VIEW; Schema: public; Owner: admin
--

CREATE VIEW viewrecordwatcher AS
 SELECT recordtype.recordtype_name,
    recordwatcher.recordwatcher_record_id,
    usr.usr_username,
    usr.usr_name,
    usr.usr_email,
    usr.usr_active
   FROM ((recordwatcher
     LEFT JOIN recordtype ON ((recordtype.recordtype_id = recordwatcher.recordwatcher_recordtype_id)))
     LEFT JOIN usr ON ((usr.usr_id = recordwatcher.recordwatcher_usr_id)))
  ORDER BY recordtype.recordtype_name, recordwatcher.recordwatcher_record_id, usr.usr_username;


ALTER TABLE viewrecordwatcher OWNER TO admin;

--
-- TOC entry 2629 (class 2604 OID 37508)
-- Name: backflush_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush ALTER COLUMN backflush_id SET DEFAULT nextval('backflush_backflush_id_seq'::regclass);


--
-- TOC entry 2630 (class 2604 OID 37509)
-- Name: bom_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY bom ALTER COLUMN bom_id SET DEFAULT nextval('bom_bom_id_seq'::regclass);


--
-- TOC entry 2633 (class 2604 OID 37510)
-- Name: cust_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY cust ALTER COLUMN cust_id SET DEFAULT nextval('cust_cust_id_seq'::regclass);


--
-- TOC entry 2635 (class 2604 OID 37511)
-- Name: custfiletype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custfiletype ALTER COLUMN custfiletype_id SET DEFAULT nextval('custfiletype_custfiletype_id_seq'::regclass);


--
-- TOC entry 2637 (class 2604 OID 37512)
-- Name: custhist_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custhist ALTER COLUMN custhist_id SET DEFAULT nextval('custhist_custhist_id_seq'::regclass);


--
-- TOC entry 2639 (class 2604 OID 37513)
-- Name: custparam_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparam ALTER COLUMN custparam_id SET DEFAULT nextval('custparam_custparam_id_seq'::regclass);


--
-- TOC entry 2642 (class 2604 OID 37514)
-- Name: custparamcombo_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamcombo ALTER COLUMN custparamcombo_id SET DEFAULT nextval('custparamcombo_custparamcombo_id_seq'::regclass);


--
-- TOC entry 2644 (class 2604 OID 37515)
-- Name: custparamlink_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamlink ALTER COLUMN custparamlink_id SET DEFAULT nextval('custparamlink_custparamlink_id_seq'::regclass);


--
-- TOC entry 2647 (class 2604 OID 37516)
-- Name: datatype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY datatype ALTER COLUMN datatype_id SET DEFAULT nextval('datatype_datatype_id_seq'::regclass);


--
-- TOC entry 2648 (class 2604 OID 37517)
-- Name: doctype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY doctype ALTER COLUMN doctype_id SET DEFAULT nextval('doctype_doctype_id_seq'::regclass);


--
-- TOC entry 2649 (class 2604 OID 37518)
-- Name: eco_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY eco ALTER COLUMN eco_id SET DEFAULT nextval('eco_eco_id_seq'::regclass);


--
-- TOC entry 2651 (class 2604 OID 37519)
-- Name: filetype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY filetype ALTER COLUMN filetype_id SET DEFAULT nextval('filetype_filetype_id_seq'::regclass);


--
-- TOC entry 2655 (class 2604 OID 37520)
-- Name: item_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY item ALTER COLUMN item_id SET DEFAULT nextval('item_item_id_seq'::regclass);


--
-- TOC entry 2657 (class 2604 OID 37521)
-- Name: itemcustparamlink_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemcustparamlink ALTER COLUMN itemcustparamlink_id SET DEFAULT nextval('itemcustparamlink_itemcustparamlink_id_seq'::regclass);


--
-- TOC entry 2658 (class 2604 OID 37522)
-- Name: itemfreqcode_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemfreqcode ALTER COLUMN itemfreqcode_id SET DEFAULT nextval('itemfreqcode_itemfreqcode_id_seq'::regclass);


--
-- TOC entry 2660 (class 2604 OID 37523)
-- Name: itemrev_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrev ALTER COLUMN itemrev_id SET DEFAULT nextval('itemrevision_itemrevision_id_seq'::regclass);


--
-- TOC entry 2662 (class 2604 OID 37524)
-- Name: itemrevflow_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrevflow ALTER COLUMN itemrevflow_id SET DEFAULT nextval('itemrevisionflow_itemrevisionflow_id_seq'::regclass);


--
-- TOC entry 2664 (class 2604 OID 37525)
-- Name: line_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY line ALTER COLUMN line_id SET DEFAULT nextval('line_line_id_seq'::regclass);


--
-- TOC entry 2666 (class 2604 OID 37526)
-- Name: loc_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY loc ALTER COLUMN loc_id SET DEFAULT nextval('loc_loc_id_seq'::regclass);


--
-- TOC entry 2668 (class 2604 OID 37527)
-- Name: lochist_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY lochist ALTER COLUMN lochist_id SET DEFAULT nextval('lochist_lochist_id_seq'::regclass);


--
-- TOC entry 2669 (class 2604 OID 37528)
-- Name: module_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY module ALTER COLUMN module_id SET DEFAULT nextval('module_module_id_seq'::regclass);


--
-- TOC entry 2674 (class 2604 OID 37529)
-- Name: part_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part ALTER COLUMN part_id SET DEFAULT nextval('part_part_key_seq'::regclass);


--
-- TOC entry 2676 (class 2604 OID 37530)
-- Name: partactivehist_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partactivehist ALTER COLUMN partactivehist_id SET DEFAULT nextval('partactivehist_partactivehist_id_seq'::regclass);


--
-- TOC entry 2677 (class 2604 OID 37531)
-- Name: partalloccode_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partalloccode ALTER COLUMN partalloccode_id SET DEFAULT nextval('partalloccode_partalloccode_id_seq'::regclass);


--
-- TOC entry 2680 (class 2604 OID 37532)
-- Name: partallochist_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist ALTER COLUMN partallochist_id SET DEFAULT nextval('partallochist_partallochist_id_seq'::regclass);


--
-- TOC entry 2683 (class 2604 OID 37533)
-- Name: partcustparamvalue_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partcustparamvalue ALTER COLUMN partcustparamvalue_id SET DEFAULT nextval('partcustparamvalue_partcustparamvalue_id_seq'::regclass);


--
-- TOC entry 2685 (class 2604 OID 37534)
-- Name: partdoclink_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partdoclink ALTER COLUMN partdoclink_id SET DEFAULT nextval('partdoclink_partdoclink_id_seq'::regclass);


--
-- TOC entry 2687 (class 2604 OID 37535)
-- Name: partfile_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfile ALTER COLUMN partfile_id SET DEFAULT nextval('partfile_partfile_id_seq'::regclass);


--
-- TOC entry 2689 (class 2604 OID 37536)
-- Name: partfiledata_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfiledata ALTER COLUMN partfiledata_id SET DEFAULT nextval('partfiledata_partfiledata_id_seq'::regclass);


--
-- TOC entry 2691 (class 2604 OID 37537)
-- Name: partfilethumbnail_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfilethumbnail ALTER COLUMN partfilethumbnail_id SET DEFAULT nextval('partfilethumbnail_partfilethumbnail_id_seq'::regclass);


--
-- TOC entry 2693 (class 2604 OID 37538)
-- Name: partlog_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog ALTER COLUMN partlog_id SET DEFAULT nextval('partlog_partlog_id_seq'::regclass);


--
-- TOC entry 2694 (class 2604 OID 37539)
-- Name: partlogaction_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogaction ALTER COLUMN partlogaction_id SET DEFAULT nextval('partlogaction_partlogaction_id_seq'::regclass);


--
-- TOC entry 2695 (class 2604 OID 37540)
-- Name: partlogactiontype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogactiontype ALTER COLUMN partlogactiontype_id SET DEFAULT nextval('partlogactiontype_partlogactiontype_id_seq'::regclass);


--
-- TOC entry 2696 (class 2604 OID 37541)
-- Name: partlogtype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogtype ALTER COLUMN partlogtype_id SET DEFAULT nextval('partlogtype_partlogtype_id_seq'::regclass);


--
-- TOC entry 2698 (class 2604 OID 37542)
-- Name: partrefurbhist_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrefurbhist ALTER COLUMN partrefurbhist_id SET DEFAULT nextval('partrefurbhist_partrefurbhist_id_seq'::regclass);


--
-- TOC entry 2700 (class 2604 OID 37543)
-- Name: partrevhist_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist ALTER COLUMN partrevhist_id SET DEFAULT nextval('partrevisionhistory_partrevisionhistory_id_seq'::regclass);


--
-- TOC entry 2701 (class 2604 OID 37544)
-- Name: partscrapcode_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partscrapcode ALTER COLUMN partscrapcode_id SET DEFAULT nextval('partscrapcode_partscrapcode_id_seq'::regclass);


--
-- TOC entry 2703 (class 2604 OID 37545)
-- Name: partscraphist_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partscraphist ALTER COLUMN partscraphist_id SET DEFAULT nextval('partscraphist_partscraphist_id_seq'::regclass);


--
-- TOC entry 2705 (class 2604 OID 37546)
-- Name: partstate_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstate ALTER COLUMN partstate_id SET DEFAULT nextval('partstate_partstate_id_seq'::regclass);


--
-- TOC entry 2706 (class 2604 OID 37547)
-- Name: partstatecode_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatecode ALTER COLUMN partstatecode_id SET DEFAULT nextval('partstatecode_partstatecode_id_seq'::regclass);


--
-- TOC entry 2709 (class 2604 OID 37548)
-- Name: partstateflow_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstateflow ALTER COLUMN partstateflow_id SET DEFAULT nextval('partstateflow_partstateflow_id_seq'::regclass);


--
-- TOC entry 2712 (class 2604 OID 37549)
-- Name: partstatehist_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatehist ALTER COLUMN partstatehist_id SET DEFAULT nextval('partstatehist_partstatehist_id_seq'::regclass);


--
-- TOC entry 2713 (class 2604 OID 37550)
-- Name: partwatcher_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partwatcher ALTER COLUMN partwatcher_id SET DEFAULT nextval('partwatcher_partwatcher_id_seq'::regclass);


--
-- TOC entry 2715 (class 2604 OID 37551)
-- Name: priv_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY priv ALTER COLUMN priv_id SET DEFAULT nextval('priv_priv_id_seq'::regclass);


--
-- TOC entry 2716 (class 2604 OID 37552)
-- Name: privtype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY privtype ALTER COLUMN privtype_id SET DEFAULT nextval('privtype_privtype_id_seq'::regclass);


--
-- TOC entry 2718 (class 2604 OID 37553)
-- Name: recordcustparamlink_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamlink ALTER COLUMN recordcustparamlink_id SET DEFAULT nextval('recordcustparamlink_recordcustparamlink_id_seq'::regclass);


--
-- TOC entry 2720 (class 2604 OID 37554)
-- Name: recordcustparamvalue_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamvalue ALTER COLUMN recordcustparamvalue_id SET DEFAULT nextval('recordcustparamvalue_recordcustparamvalue_id_seq'::regclass);


--
-- TOC entry 2722 (class 2604 OID 37555)
-- Name: recorddoclink_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recorddoclink ALTER COLUMN recorddoclink_id SET DEFAULT nextval('recorddoclink_recorddoclink_id_seq'::regclass);


--
-- TOC entry 2724 (class 2604 OID 37556)
-- Name: recordfile_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfile ALTER COLUMN recordfile_id SET DEFAULT nextval('recordfile_recordfile_id_seq'::regclass);


--
-- TOC entry 2725 (class 2604 OID 37557)
-- Name: recordfiledata_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfiledata ALTER COLUMN recordfiledata_id SET DEFAULT nextval('recordfiledata_recordfiledata_id_seq'::regclass);


--
-- TOC entry 2726 (class 2604 OID 37558)
-- Name: recordfilethumbnail_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfilethumbnail ALTER COLUMN recordfilethumbnail_id SET DEFAULT nextval('recordfilethumbnail_recordfilethumbnail_id_seq'::regclass);


--
-- TOC entry 2728 (class 2604 OID 37559)
-- Name: recordlog_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlog ALTER COLUMN recordlog_id SET DEFAULT nextval('recordlog_recordlog_id_seq'::regclass);


--
-- TOC entry 2729 (class 2604 OID 37560)
-- Name: recordlogaction_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlogaction ALTER COLUMN recordlogaction_id SET DEFAULT nextval('recordlogaction_recordlogaction_id_seq'::regclass);


--
-- TOC entry 2730 (class 2604 OID 37561)
-- Name: recordlogactiontype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlogactiontype ALTER COLUMN recordlogactiontype_id SET DEFAULT nextval('recordlogactiontype_recordlogactiontype_id_seq'::regclass);


--
-- TOC entry 2731 (class 2604 OID 37562)
-- Name: recordtype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordtype ALTER COLUMN recordtype_id SET DEFAULT nextval('recordtype_recordtype_id_seq'::regclass);


--
-- TOC entry 2732 (class 2604 OID 37563)
-- Name: recordwatcher_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordwatcher ALTER COLUMN recordwatcher_id SET DEFAULT nextval('recordwatcher_recordwatcher_id_seq'::regclass);


--
-- TOC entry 2734 (class 2604 OID 37564)
-- Name: role_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY role ALTER COLUMN role_id SET DEFAULT nextval('role_role_id_seq'::regclass);


--
-- TOC entry 2735 (class 2604 OID 37565)
-- Name: rolepriv_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY rolepriv ALTER COLUMN rolepriv_id SET DEFAULT nextval('rolepriv_rolepriv_id_seq'::regclass);


--
-- TOC entry 2736 (class 2604 OID 37566)
-- Name: serialpattern_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialpattern ALTER COLUMN serialpattern_id SET DEFAULT nextval('serialpattern_serialpattern_id_seq'::regclass);


--
-- TOC entry 2737 (class 2604 OID 37567)
-- Name: serialprefix_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialprefix ALTER COLUMN serialprefix_id SET DEFAULT nextval('serialprefix_serialprefix_id_seq'::regclass);


--
-- TOC entry 2738 (class 2604 OID 37568)
-- Name: serialstream_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialstream ALTER COLUMN serialstream_id SET DEFAULT nextval('serialstream_serialstream_id_seq'::regclass);


--
-- TOC entry 2740 (class 2604 OID 37569)
-- Name: station_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY station ALTER COLUMN station_id SET DEFAULT nextval('station_station_id_seq'::regclass);


--
-- TOC entry 2742 (class 2604 OID 37570)
-- Name: stationtype_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY stationtype ALTER COLUMN stationtype_id SET DEFAULT nextval('stationtype_stationtype_id_seq'::regclass);


--
-- TOC entry 2744 (class 2604 OID 37571)
-- Name: usr_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usr ALTER COLUMN usr_id SET DEFAULT nextval('user_user_id_seq'::regclass);


--
-- TOC entry 2745 (class 2604 OID 37572)
-- Name: usrpriv_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrpriv ALTER COLUMN usrpriv_id SET DEFAULT nextval('userpriv_userpriv_id_seq'::regclass);


--
-- TOC entry 2746 (class 2604 OID 37573)
-- Name: usrrole_id; Type: DEFAULT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrrole ALTER COLUMN usrrole_id SET DEFAULT nextval('userrole_userrole_id_seq'::regclass);


--
-- TOC entry 2748 (class 2606 OID 56307)
-- Name: backflush_id_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_id_pkey PRIMARY KEY (backflush_id);


--
-- TOC entry 2750 (class 2606 OID 56309)
-- Name: bom_id_pk; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY bom
    ADD CONSTRAINT bom_id_pk PRIMARY KEY (bom_id);


--
-- TOC entry 2752 (class 2606 OID 56311)
-- Name: cust_cust_number_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY cust
    ADD CONSTRAINT cust_cust_number_key UNIQUE (cust_number);


--
-- TOC entry 2754 (class 2606 OID 56313)
-- Name: cust_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY cust
    ADD CONSTRAINT cust_pkey PRIMARY KEY (cust_id);


--
-- TOC entry 2756 (class 2606 OID 56315)
-- Name: custfiletype_custfiletype_type_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custfiletype
    ADD CONSTRAINT custfiletype_custfiletype_type_key UNIQUE (custfiletype_type);


--
-- TOC entry 2758 (class 2606 OID 56317)
-- Name: custfiletype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custfiletype
    ADD CONSTRAINT custfiletype_pkey PRIMARY KEY (custfiletype_id);


--
-- TOC entry 2760 (class 2606 OID 56319)
-- Name: custhist_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custhist
    ADD CONSTRAINT custhist_pkey PRIMARY KEY (custhist_id);


--
-- TOC entry 2762 (class 2606 OID 56321)
-- Name: custparam_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparam
    ADD CONSTRAINT custparam_pkey PRIMARY KEY (custparam_id);


--
-- TOC entry 2764 (class 2606 OID 56323)
-- Name: custparamcombo_custparamcombo_custparam_id_custparamcombo_v_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamcombo
    ADD CONSTRAINT custparamcombo_custparamcombo_custparam_id_custparamcombo_v_key UNIQUE (custparamcombo_custparam_id, custparamcombo_value);


--
-- TOC entry 2766 (class 2606 OID 56325)
-- Name: custparamcombo_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamcombo
    ADD CONSTRAINT custparamcombo_pkey PRIMARY KEY (custparamcombo_id);


--
-- TOC entry 2768 (class 2606 OID 56327)
-- Name: custparamlink_custparamlink_custparam_id_custparamlink_item_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamlink
    ADD CONSTRAINT custparamlink_custparamlink_custparam_id_custparamlink_item_key UNIQUE (custparamlink_custparam_id, custparamlink_item_id);


--
-- TOC entry 2770 (class 2606 OID 56329)
-- Name: custparamlink_custparamlink_custparam_id_custparamlink_reco_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamlink
    ADD CONSTRAINT custparamlink_custparamlink_custparam_id_custparamlink_reco_key UNIQUE (custparamlink_custparam_id, custparamlink_recordtype_id);


--
-- TOC entry 2772 (class 2606 OID 56331)
-- Name: custparamlink_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamlink
    ADD CONSTRAINT custparamlink_pkey PRIMARY KEY (custparamlink_id);


--
-- TOC entry 2774 (class 2606 OID 56333)
-- Name: datatype_datatype_type_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY datatype
    ADD CONSTRAINT datatype_datatype_type_key UNIQUE (datatype_type);


--
-- TOC entry 2776 (class 2606 OID 56335)
-- Name: datatype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY datatype
    ADD CONSTRAINT datatype_pkey PRIMARY KEY (datatype_id);


--
-- TOC entry 2778 (class 2606 OID 56337)
-- Name: doctype_doctype_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY doctype
    ADD CONSTRAINT doctype_doctype_name_key UNIQUE (doctype_name);


--
-- TOC entry 2780 (class 2606 OID 56339)
-- Name: doctype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY doctype
    ADD CONSTRAINT doctype_pkey PRIMARY KEY (doctype_id);


--
-- TOC entry 2782 (class 2606 OID 56341)
-- Name: eco_eco_number_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY eco
    ADD CONSTRAINT eco_eco_number_key UNIQUE (eco_number);


--
-- TOC entry 2784 (class 2606 OID 56343)
-- Name: eco_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY eco
    ADD CONSTRAINT eco_pkey PRIMARY KEY (eco_id);


--
-- TOC entry 2786 (class 2606 OID 56345)
-- Name: filetype_filetype_mediatypename_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY filetype
    ADD CONSTRAINT filetype_filetype_mediatypename_key UNIQUE (filetype_mediatypename);


--
-- TOC entry 2788 (class 2606 OID 56347)
-- Name: filetype_filetype_type_filetype_mediatypename_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY filetype
    ADD CONSTRAINT filetype_filetype_type_filetype_mediatypename_key UNIQUE (filetype_type, filetype_mediatypename);


--
-- TOC entry 2790 (class 2606 OID 56349)
-- Name: filetype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY filetype
    ADD CONSTRAINT filetype_pkey PRIMARY KEY (filetype_id);


--
-- TOC entry 2792 (class 2606 OID 56351)
-- Name: item_id_pk; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY item
    ADD CONSTRAINT item_id_pk PRIMARY KEY (item_id);


--
-- TOC entry 2794 (class 2606 OID 56353)
-- Name: item_item_number_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY item
    ADD CONSTRAINT item_item_number_key UNIQUE (item_number);


--
-- TOC entry 2796 (class 2606 OID 56355)
-- Name: itemcustparamlink_itemcustparamlink_custparam_id_itemcustparaml; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemcustparamlink
    ADD CONSTRAINT itemcustparamlink_itemcustparamlink_custparam_id_itemcustparaml UNIQUE (itemcustparamlink_custparam_id, itemcustparamlink_item_id);


--
-- TOC entry 2798 (class 2606 OID 56357)
-- Name: itemcustparamlink_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemcustparamlink
    ADD CONSTRAINT itemcustparamlink_pkey PRIMARY KEY (itemcustparamlink_id);


--
-- TOC entry 2800 (class 2606 OID 56359)
-- Name: itemfreqcode_itemfreqcode_freqcode_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemfreqcode
    ADD CONSTRAINT itemfreqcode_itemfreqcode_freqcode_key UNIQUE (itemfreqcode_freqcode);


--
-- TOC entry 2802 (class 2606 OID 56361)
-- Name: itemfreqcode_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemfreqcode
    ADD CONSTRAINT itemfreqcode_pkey PRIMARY KEY (itemfreqcode_id);


--
-- TOC entry 2804 (class 2606 OID 56363)
-- Name: itemrevision_id_pk; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrev
    ADD CONSTRAINT itemrevision_id_pk PRIMARY KEY (itemrev_id);


--
-- TOC entry 2806 (class 2606 OID 56365)
-- Name: itemrevision_item_id_itemrevision_revision_unique; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrev
    ADD CONSTRAINT itemrevision_item_id_itemrevision_revision_unique UNIQUE (itemrev_item_id, itemrev_rev);


--
-- TOC entry 2808 (class 2606 OID 56367)
-- Name: itemrevisionflow_itemrevisionflow_item_id_itemrevisionflow__key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrevflow
    ADD CONSTRAINT itemrevisionflow_itemrevisionflow_item_id_itemrevisionflow__key UNIQUE (itemrevflow_item_id, itemrevflow_start_rev, itemrevflow_npi);


--
-- TOC entry 2810 (class 2606 OID 56369)
-- Name: itemrevisionflow_itemrevisionflow_item_id_itemrevisionflow_key1; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrevflow
    ADD CONSTRAINT itemrevisionflow_itemrevisionflow_item_id_itemrevisionflow_key1 UNIQUE (itemrevflow_item_id, itemrevflow_end_rev, itemrevflow_npi);


--
-- TOC entry 2812 (class 2606 OID 56371)
-- Name: itemrevisionflow_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrevflow
    ADD CONSTRAINT itemrevisionflow_pkey PRIMARY KEY (itemrevflow_id);


--
-- TOC entry 2814 (class 2606 OID 56373)
-- Name: line_line_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY line
    ADD CONSTRAINT line_line_name_key UNIQUE (line_name);


--
-- TOC entry 2816 (class 2606 OID 56375)
-- Name: line_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY line
    ADD CONSTRAINT line_pkey PRIMARY KEY (line_id);


--
-- TOC entry 2818 (class 2606 OID 56377)
-- Name: loc_loc_number_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY loc
    ADD CONSTRAINT loc_loc_number_key UNIQUE (loc_number);


--
-- TOC entry 2820 (class 2606 OID 56379)
-- Name: loc_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY loc
    ADD CONSTRAINT loc_pkey PRIMARY KEY (loc_id);


--
-- TOC entry 2822 (class 2606 OID 56381)
-- Name: lochist_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY lochist
    ADD CONSTRAINT lochist_pkey PRIMARY KEY (lochist_id);


--
-- TOC entry 2824 (class 2606 OID 56383)
-- Name: module_module_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY module
    ADD CONSTRAINT module_module_name_key UNIQUE (module_name);


--
-- TOC entry 2826 (class 2606 OID 56385)
-- Name: module_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY module
    ADD CONSTRAINT module_pkey PRIMARY KEY (module_id);


--
-- TOC entry 2829 (class 2606 OID 56387)
-- Name: part_item_id_part_sequencenumber_unique; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part
    ADD CONSTRAINT part_item_id_part_sequencenumber_unique UNIQUE (part_item_id, part_sequencenumber);


--
-- TOC entry 2831 (class 2606 OID 56389)
-- Name: part_item_id_part_serialnumber_unique; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part
    ADD CONSTRAINT part_item_id_part_serialnumber_unique UNIQUE (part_item_id, part_serialnumber);


--
-- TOC entry 2833 (class 2606 OID 56391)
-- Name: part_key_pk; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part
    ADD CONSTRAINT part_key_pk PRIMARY KEY (part_id);


--
-- TOC entry 2836 (class 2606 OID 56393)
-- Name: partactivehist_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partactivehist
    ADD CONSTRAINT partactivehist_pkey PRIMARY KEY (partactivehist_id);


--
-- TOC entry 2838 (class 2606 OID 56395)
-- Name: partalloccode_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partalloccode
    ADD CONSTRAINT partalloccode_pkey PRIMARY KEY (partalloccode_id);


--
-- TOC entry 2840 (class 2606 OID 56397)
-- Name: partallochist_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_pkey PRIMARY KEY (partallochist_id);


--
-- TOC entry 2842 (class 2606 OID 56399)
-- Name: partcustparamvalue_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partcustparamvalue
    ADD CONSTRAINT partcustparamvalue_pkey PRIMARY KEY (partcustparamvalue_id);


--
-- TOC entry 2844 (class 2606 OID 56401)
-- Name: partdoclink_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partdoclink
    ADD CONSTRAINT partdoclink_pkey PRIMARY KEY (partdoclink_id);


--
-- TOC entry 2846 (class 2606 OID 56403)
-- Name: partfile_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfile
    ADD CONSTRAINT partfile_pkey PRIMARY KEY (partfile_id);


--
-- TOC entry 2848 (class 2606 OID 56405)
-- Name: partfiledata_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfiledata
    ADD CONSTRAINT partfiledata_pkey PRIMARY KEY (partfiledata_id);


--
-- TOC entry 2850 (class 2606 OID 56407)
-- Name: partfilethumbnail_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfilethumbnail
    ADD CONSTRAINT partfilethumbnail_pkey PRIMARY KEY (partfilethumbnail_id);


--
-- TOC entry 2852 (class 2606 OID 56409)
-- Name: partlog_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_pkey PRIMARY KEY (partlog_id);


--
-- TOC entry 2854 (class 2606 OID 56411)
-- Name: partlogaction_partlogaction_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogaction
    ADD CONSTRAINT partlogaction_partlogaction_name_key UNIQUE (partlogaction_name);


--
-- TOC entry 2856 (class 2606 OID 56413)
-- Name: partlogaction_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogaction
    ADD CONSTRAINT partlogaction_pkey PRIMARY KEY (partlogaction_id);


--
-- TOC entry 2858 (class 2606 OID 56415)
-- Name: partlogactiontype_partlogactiontype_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogactiontype
    ADD CONSTRAINT partlogactiontype_partlogactiontype_name_key UNIQUE (partlogactiontype_name);


--
-- TOC entry 2860 (class 2606 OID 56417)
-- Name: partlogactiontype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogactiontype
    ADD CONSTRAINT partlogactiontype_pkey PRIMARY KEY (partlogactiontype_id);


--
-- TOC entry 2862 (class 2606 OID 56419)
-- Name: partlogtype_partlogtype_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogtype
    ADD CONSTRAINT partlogtype_partlogtype_name_key UNIQUE (partlogtype_name);


--
-- TOC entry 2864 (class 2606 OID 56421)
-- Name: partlogtype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogtype
    ADD CONSTRAINT partlogtype_pkey PRIMARY KEY (partlogtype_id);


--
-- TOC entry 2866 (class 2606 OID 56423)
-- Name: partrefurbhist_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrefurbhist
    ADD CONSTRAINT partrefurbhist_pkey PRIMARY KEY (partrefurbhist_id);


--
-- TOC entry 2868 (class 2606 OID 56425)
-- Name: partrevisionhistory_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist
    ADD CONSTRAINT partrevisionhistory_pkey PRIMARY KEY (partrevhist_id);


--
-- TOC entry 2870 (class 2606 OID 56427)
-- Name: partscrapcode_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partscrapcode
    ADD CONSTRAINT partscrapcode_pkey PRIMARY KEY (partscrapcode_id);


--
-- TOC entry 2872 (class 2606 OID 56429)
-- Name: partscraphist_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partscraphist
    ADD CONSTRAINT partscraphist_pkey PRIMARY KEY (partscraphist_id);


--
-- TOC entry 2874 (class 2606 OID 56431)
-- Name: partstate_id_pk; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstate
    ADD CONSTRAINT partstate_id_pk PRIMARY KEY (partstate_id);


--
-- TOC entry 2876 (class 2606 OID 56433)
-- Name: partstate_partstate_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstate
    ADD CONSTRAINT partstate_partstate_name_key UNIQUE (partstate_name);


--
-- TOC entry 2878 (class 2606 OID 56435)
-- Name: partstatecode_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatecode
    ADD CONSTRAINT partstatecode_pkey PRIMARY KEY (partstatecode_id);


--
-- TOC entry 2880 (class 2606 OID 56437)
-- Name: partstateflow_partstateflow_start_partstate_id_partstateflo_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstateflow
    ADD CONSTRAINT partstateflow_partstateflow_start_partstate_id_partstateflo_key UNIQUE (partstateflow_start_partstate_id, partstateflow_end_partstate_id);


--
-- TOC entry 2882 (class 2606 OID 56439)
-- Name: partstateflow_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstateflow
    ADD CONSTRAINT partstateflow_pkey PRIMARY KEY (partstateflow_id);


--
-- TOC entry 2884 (class 2606 OID 56441)
-- Name: partstatehist_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatehist
    ADD CONSTRAINT partstatehist_pkey PRIMARY KEY (partstatehist_id);


--
-- TOC entry 2886 (class 2606 OID 56443)
-- Name: partwatcher_partwatcher_part_id_partwatcher_usr_id_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partwatcher
    ADD CONSTRAINT partwatcher_partwatcher_part_id_partwatcher_usr_id_key UNIQUE (partwatcher_part_id, partwatcher_usr_id);


--
-- TOC entry 2888 (class 2606 OID 56445)
-- Name: partwatcher_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partwatcher
    ADD CONSTRAINT partwatcher_pkey PRIMARY KEY (partwatcher_id);


--
-- TOC entry 2890 (class 2606 OID 56447)
-- Name: priv_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY priv
    ADD CONSTRAINT priv_pkey PRIMARY KEY (priv_id);


--
-- TOC entry 2892 (class 2606 OID 56449)
-- Name: priv_priv_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY priv
    ADD CONSTRAINT priv_priv_name_key UNIQUE (priv_name);


--
-- TOC entry 2894 (class 2606 OID 56451)
-- Name: privtype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY privtype
    ADD CONSTRAINT privtype_pkey PRIMARY KEY (privtype_id);


--
-- TOC entry 2896 (class 2606 OID 56453)
-- Name: recordcustparamlink_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamlink
    ADD CONSTRAINT recordcustparamlink_pkey PRIMARY KEY (recordcustparamlink_id);


--
-- TOC entry 2898 (class 2606 OID 56455)
-- Name: recordcustparamlink_recordcustparamlink_custparam_id_recordcust; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamlink
    ADD CONSTRAINT recordcustparamlink_recordcustparamlink_custparam_id_recordcust UNIQUE (recordcustparamlink_custparam_id, recordcustparamlink_recordtype_id);


--
-- TOC entry 2900 (class 2606 OID 56457)
-- Name: recordcustparamvalue_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamvalue
    ADD CONSTRAINT recordcustparamvalue_pkey PRIMARY KEY (recordcustparamvalue_id);


--
-- TOC entry 2902 (class 2606 OID 56459)
-- Name: recorddoclink_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recorddoclink
    ADD CONSTRAINT recorddoclink_pkey PRIMARY KEY (recorddoclink_id);


--
-- TOC entry 2904 (class 2606 OID 56461)
-- Name: recordfile_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfile
    ADD CONSTRAINT recordfile_pkey PRIMARY KEY (recordfile_id);


--
-- TOC entry 2906 (class 2606 OID 56463)
-- Name: recordfiledata_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfiledata
    ADD CONSTRAINT recordfiledata_pkey PRIMARY KEY (recordfiledata_id);


--
-- TOC entry 2908 (class 2606 OID 56465)
-- Name: recordfilethumbnail_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfilethumbnail
    ADD CONSTRAINT recordfilethumbnail_pkey PRIMARY KEY (recordfilethumbnail_id);


--
-- TOC entry 2910 (class 2606 OID 56467)
-- Name: recordlog_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlog
    ADD CONSTRAINT recordlog_pkey PRIMARY KEY (recordlog_id);


--
-- TOC entry 2912 (class 2606 OID 56469)
-- Name: recordlogaction_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlogaction
    ADD CONSTRAINT recordlogaction_pkey PRIMARY KEY (recordlogaction_id);


--
-- TOC entry 2914 (class 2606 OID 56471)
-- Name: recordlogaction_recordlogaction_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlogaction
    ADD CONSTRAINT recordlogaction_recordlogaction_name_key UNIQUE (recordlogaction_name);


--
-- TOC entry 2916 (class 2606 OID 56473)
-- Name: recordlogactiontype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlogactiontype
    ADD CONSTRAINT recordlogactiontype_pkey PRIMARY KEY (recordlogactiontype_id);


--
-- TOC entry 2918 (class 2606 OID 56475)
-- Name: recordlogactiontype_recordlogactiontype_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlogactiontype
    ADD CONSTRAINT recordlogactiontype_recordlogactiontype_name_key UNIQUE (recordlogactiontype_name);


--
-- TOC entry 2920 (class 2606 OID 56477)
-- Name: recordtype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordtype
    ADD CONSTRAINT recordtype_pkey PRIMARY KEY (recordtype_id);


--
-- TOC entry 2922 (class 2606 OID 56479)
-- Name: recordtype_recordtype_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordtype
    ADD CONSTRAINT recordtype_recordtype_name_key UNIQUE (recordtype_name);


--
-- TOC entry 2924 (class 2606 OID 56481)
-- Name: recordtype_recordtype_prefix_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordtype
    ADD CONSTRAINT recordtype_recordtype_prefix_key UNIQUE (recordtype_prefix);


--
-- TOC entry 2926 (class 2606 OID 56483)
-- Name: recordwatcher_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordwatcher
    ADD CONSTRAINT recordwatcher_pkey PRIMARY KEY (recordwatcher_id);


--
-- TOC entry 2928 (class 2606 OID 56485)
-- Name: recordwatcher_recordwatcher_recordtype_id_recordwatcher_rec_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordwatcher
    ADD CONSTRAINT recordwatcher_recordwatcher_recordtype_id_recordwatcher_rec_key UNIQUE (recordwatcher_recordtype_id, recordwatcher_record_id, recordwatcher_usr_id);


--
-- TOC entry 2930 (class 2606 OID 56487)
-- Name: role_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY role
    ADD CONSTRAINT role_pkey PRIMARY KEY (role_id);


--
-- TOC entry 2932 (class 2606 OID 56489)
-- Name: role_role_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY role
    ADD CONSTRAINT role_role_name_key UNIQUE (role_name);


--
-- TOC entry 2934 (class 2606 OID 56491)
-- Name: rolepriv_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY rolepriv
    ADD CONSTRAINT rolepriv_pkey PRIMARY KEY (rolepriv_id);


--
-- TOC entry 2936 (class 2606 OID 56493)
-- Name: rolepriv_rolepriv_role_id_rolepriv_priv_id_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY rolepriv
    ADD CONSTRAINT rolepriv_rolepriv_role_id_rolepriv_priv_id_key UNIQUE (rolepriv_role_id, rolepriv_priv_id);


--
-- TOC entry 2938 (class 2606 OID 56495)
-- Name: serialpattern_id_pk; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialpattern
    ADD CONSTRAINT serialpattern_id_pk PRIMARY KEY (serialpattern_id);


--
-- TOC entry 2940 (class 2606 OID 56497)
-- Name: serialpattern_serialpattern_pattern_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialpattern
    ADD CONSTRAINT serialpattern_serialpattern_pattern_key UNIQUE (serialpattern_pattern);


--
-- TOC entry 2942 (class 2606 OID 56499)
-- Name: serialprefix_id_pk; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialprefix
    ADD CONSTRAINT serialprefix_id_pk PRIMARY KEY (serialprefix_id);


--
-- TOC entry 2944 (class 2606 OID 56501)
-- Name: serialprefix_prefix_serialprefix_serialpattern_id_unique; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialprefix
    ADD CONSTRAINT serialprefix_prefix_serialprefix_serialpattern_id_unique UNIQUE (serialprefix_prefix, serialprefix_serialpattern_id);


--
-- TOC entry 2946 (class 2606 OID 56503)
-- Name: serialstream_id_pk; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialstream
    ADD CONSTRAINT serialstream_id_pk PRIMARY KEY (serialstream_id);


--
-- TOC entry 2948 (class 2606 OID 56505)
-- Name: serialstream_serialstream_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialstream
    ADD CONSTRAINT serialstream_serialstream_name_key UNIQUE (serialstream_name);


--
-- TOC entry 2950 (class 2606 OID 56507)
-- Name: station_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY station
    ADD CONSTRAINT station_pkey PRIMARY KEY (station_id);


--
-- TOC entry 2952 (class 2606 OID 56509)
-- Name: station_station_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY station
    ADD CONSTRAINT station_station_name_key UNIQUE (station_name);


--
-- TOC entry 2954 (class 2606 OID 56511)
-- Name: stationtype_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY stationtype
    ADD CONSTRAINT stationtype_pkey PRIMARY KEY (stationtype_id);


--
-- TOC entry 2956 (class 2606 OID 56513)
-- Name: stationtype_stationtype_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY stationtype
    ADD CONSTRAINT stationtype_stationtype_name_key UNIQUE (stationtype_name);


--
-- TOC entry 2958 (class 2606 OID 56515)
-- Name: user_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usr
    ADD CONSTRAINT user_pkey PRIMARY KEY (usr_id);


--
-- TOC entry 2960 (class 2606 OID 56517)
-- Name: user_user_username_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usr
    ADD CONSTRAINT user_user_username_key UNIQUE (usr_username);


--
-- TOC entry 2962 (class 2606 OID 56519)
-- Name: userpriv_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrpriv
    ADD CONSTRAINT userpriv_pkey PRIMARY KEY (usrpriv_id);


--
-- TOC entry 2964 (class 2606 OID 56521)
-- Name: userpriv_userpriv_user_id_userpriv_priv_id_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrpriv
    ADD CONSTRAINT userpriv_userpriv_user_id_userpriv_priv_id_key UNIQUE (usrpriv_usr_id, usrpriv_priv_id);


--
-- TOC entry 2966 (class 2606 OID 56523)
-- Name: userrole_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrrole
    ADD CONSTRAINT userrole_pkey PRIMARY KEY (usrrole_id);


--
-- TOC entry 2968 (class 2606 OID 56525)
-- Name: userrole_userrole_user_id_userrole_role_id_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrrole
    ADD CONSTRAINT userrole_userrole_user_id_userrole_role_id_key UNIQUE (usrrole_usr_id, usrrole_role_id);


--
-- TOC entry 2827 (class 1259 OID 56526)
-- Name: part_item_id_part_sequencenumber_index; Type: INDEX; Schema: public; Owner: admin
--

CREATE UNIQUE INDEX part_item_id_part_sequencenumber_index ON part USING btree (part_item_id, part_sequencenumber);


--
-- TOC entry 2834 (class 1259 OID 56527)
-- Name: part_part_item_id_part_serialnumber_idx; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX part_part_item_id_part_serialnumber_idx ON part USING btree (part_item_id, part_serialnumber);


--
-- TOC entry 2969 (class 2606 OID 56528)
-- Name: backflush_backflush_complete_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_complete_usr_id_fkey FOREIGN KEY (backflush_complete_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 2970 (class 2606 OID 56533)
-- Name: backflush_backflush_create_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_create_usr_id_fkey FOREIGN KEY (backflush_create_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 2971 (class 2606 OID 56538)
-- Name: backflush_backflush_doctype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_doctype_id_fkey FOREIGN KEY (backflush_doctype_id) REFERENCES doctype(doctype_id);


--
-- TOC entry 2972 (class 2606 OID 56543)
-- Name: backflush_backflush_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_item_id_fkey FOREIGN KEY (backflush_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 2973 (class 2606 OID 56548)
-- Name: backflush_backflush_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_item_id_fkey1 FOREIGN KEY (backflush_orig_item_id, backflush_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 2974 (class 2606 OID 56553)
-- Name: backflush_backflush_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_line_id_fkey FOREIGN KEY (backflush_line_id) REFERENCES line(line_id);


--
-- TOC entry 2975 (class 2606 OID 56558)
-- Name: backflush_backflush_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_part_id_fkey FOREIGN KEY (backflush_part_id) REFERENCES part(part_id);


--
-- TOC entry 2976 (class 2606 OID 56563)
-- Name: backflush_backflush_station_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_station_id_fkey FOREIGN KEY (backflush_station_id) REFERENCES station(station_id);


--
-- TOC entry 2977 (class 2606 OID 56568)
-- Name: backflush_backflush_void_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY backflush
    ADD CONSTRAINT backflush_backflush_void_usr_id_fkey FOREIGN KEY (backflush_void_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 2978 (class 2606 OID 56573)
-- Name: bom_item_id_bom_itemrevision_itemrevision_item_id_itemrevision_; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY bom
    ADD CONSTRAINT bom_item_id_bom_itemrevision_itemrevision_item_id_itemrevision_ FOREIGN KEY (bom_item_id, bom_itemrev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 2979 (class 2606 OID 56578)
-- Name: bom_item_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY bom
    ADD CONSTRAINT bom_item_id_fk FOREIGN KEY (bom_item_id) REFERENCES item(item_id);


--
-- TOC entry 2980 (class 2606 OID 56583)
-- Name: bom_parent_item_id_bom_parent_itemrevision_itemrevision_item_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY bom
    ADD CONSTRAINT bom_parent_item_id_bom_parent_itemrevision_itemrevision_item_id FOREIGN KEY (bom_parent_item_id, bom_parent_itemrev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 2981 (class 2606 OID 56588)
-- Name: bom_parent_item_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY bom
    ADD CONSTRAINT bom_parent_item_id_fk FOREIGN KEY (bom_parent_item_id) REFERENCES item(item_id);


--
-- TOC entry 2982 (class 2606 OID 56593)
-- Name: custhist_custhist_end_cust_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custhist
    ADD CONSTRAINT custhist_custhist_end_cust_id_fkey FOREIGN KEY (custhist_end_cust_id) REFERENCES cust(cust_id);


--
-- TOC entry 2983 (class 2606 OID 56598)
-- Name: custhist_custhist_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custhist
    ADD CONSTRAINT custhist_custhist_orig_item_id_fkey FOREIGN KEY (custhist_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 2984 (class 2606 OID 56603)
-- Name: custhist_custhist_orig_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custhist
    ADD CONSTRAINT custhist_custhist_orig_item_id_fkey1 FOREIGN KEY (custhist_orig_item_id, custhist_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 2985 (class 2606 OID 56608)
-- Name: custhist_custhist_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custhist
    ADD CONSTRAINT custhist_custhist_part_id_fkey FOREIGN KEY (custhist_part_id) REFERENCES part(part_id);


--
-- TOC entry 2986 (class 2606 OID 56613)
-- Name: custhist_custhist_start_cust_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custhist
    ADD CONSTRAINT custhist_custhist_start_cust_id_fkey FOREIGN KEY (custhist_start_cust_id) REFERENCES cust(cust_id);


--
-- TOC entry 2987 (class 2606 OID 56618)
-- Name: custhist_custhist_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custhist
    ADD CONSTRAINT custhist_custhist_usr_id_fkey FOREIGN KEY (custhist_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 2988 (class 2606 OID 56623)
-- Name: custparam_custparam_datatype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparam
    ADD CONSTRAINT custparam_custparam_datatype_id_fkey FOREIGN KEY (custparam_datatype_id) REFERENCES datatype(datatype_id);


--
-- TOC entry 2989 (class 2606 OID 56628)
-- Name: custparamcombo_custparamcombo_custparam_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamcombo
    ADD CONSTRAINT custparamcombo_custparamcombo_custparam_id_fkey FOREIGN KEY (custparamcombo_custparam_id) REFERENCES custparam(custparam_id);


--
-- TOC entry 2990 (class 2606 OID 56633)
-- Name: custparamlink_custparamlink_custparam_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamlink
    ADD CONSTRAINT custparamlink_custparamlink_custparam_id_fkey FOREIGN KEY (custparamlink_custparam_id) REFERENCES custparam(custparam_id);


--
-- TOC entry 2991 (class 2606 OID 56638)
-- Name: custparamlink_custparamlink_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamlink
    ADD CONSTRAINT custparamlink_custparamlink_item_id_fkey FOREIGN KEY (custparamlink_item_id) REFERENCES item(item_id);


--
-- TOC entry 2992 (class 2606 OID 56643)
-- Name: custparamlink_custparamlink_recordtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY custparamlink
    ADD CONSTRAINT custparamlink_custparamlink_recordtype_id_fkey FOREIGN KEY (custparamlink_recordtype_id) REFERENCES recordtype(recordtype_id);


--
-- TOC entry 2993 (class 2606 OID 57168)
-- Name: item_item_itemfreqcode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY item
    ADD CONSTRAINT item_item_itemfreqcode_id_fkey FOREIGN KEY (item_itemfreqcode_id) REFERENCES itemfreqcode(itemfreqcode_id);


--
-- TOC entry 2994 (class 2606 OID 57163)
-- Name: item_item_serialprefix_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY item
    ADD CONSTRAINT item_item_serialprefix_id_fkey FOREIGN KEY (item_serialprefix_id) REFERENCES serialprefix(serialprefix_id);


--
-- TOC entry 2995 (class 2606 OID 57158)
-- Name: item_item_serialstream_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY item
    ADD CONSTRAINT item_item_serialstream_id_fkey FOREIGN KEY (item_serialstream_id) REFERENCES serialstream(serialstream_id);


--
-- TOC entry 2996 (class 2606 OID 56648)
-- Name: itemcustparamlink_itemcustparamlink_custparam_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemcustparamlink
    ADD CONSTRAINT itemcustparamlink_itemcustparamlink_custparam_id_fkey FOREIGN KEY (itemcustparamlink_custparam_id) REFERENCES custparam(custparam_id);


--
-- TOC entry 2997 (class 2606 OID 56653)
-- Name: itemcustparamlink_itemcustparamlink_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemcustparamlink
    ADD CONSTRAINT itemcustparamlink_itemcustparamlink_item_id_fkey FOREIGN KEY (itemcustparamlink_item_id) REFERENCES item(item_id);


--
-- TOC entry 2998 (class 2606 OID 56658)
-- Name: itemrevision_item_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrev
    ADD CONSTRAINT itemrevision_item_id_fk FOREIGN KEY (itemrev_item_id) REFERENCES item(item_id);


--
-- TOC entry 2999 (class 2606 OID 56663)
-- Name: itemrevisionflow_itemrevisionflow_eco_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrevflow
    ADD CONSTRAINT itemrevisionflow_itemrevisionflow_eco_id_fkey FOREIGN KEY (itemrevflow_eco_id) REFERENCES eco(eco_id);


--
-- TOC entry 3000 (class 2606 OID 56668)
-- Name: itemrevisionflow_itemrevisionflow_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrevflow
    ADD CONSTRAINT itemrevisionflow_itemrevisionflow_item_id_fkey FOREIGN KEY (itemrevflow_item_id) REFERENCES item(item_id);


--
-- TOC entry 3001 (class 2606 OID 56673)
-- Name: itemrevisionflow_itemrevisionflow_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrevflow
    ADD CONSTRAINT itemrevisionflow_itemrevisionflow_item_id_fkey1 FOREIGN KEY (itemrevflow_item_id, itemrevflow_start_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3002 (class 2606 OID 56678)
-- Name: itemrevisionflow_itemrevisionflow_item_id_fkey2; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY itemrevflow
    ADD CONSTRAINT itemrevisionflow_itemrevisionflow_item_id_fkey2 FOREIGN KEY (itemrevflow_item_id, itemrevflow_end_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3003 (class 2606 OID 56683)
-- Name: lochist_lochist_end_loc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY lochist
    ADD CONSTRAINT lochist_lochist_end_loc_id_fkey FOREIGN KEY (lochist_end_loc_id) REFERENCES loc(loc_id);


--
-- TOC entry 3004 (class 2606 OID 56688)
-- Name: lochist_lochist_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY lochist
    ADD CONSTRAINT lochist_lochist_orig_item_id_fkey FOREIGN KEY (lochist_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3005 (class 2606 OID 56693)
-- Name: lochist_lochist_orig_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY lochist
    ADD CONSTRAINT lochist_lochist_orig_item_id_fkey1 FOREIGN KEY (lochist_orig_item_id, lochist_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3006 (class 2606 OID 56698)
-- Name: lochist_lochist_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY lochist
    ADD CONSTRAINT lochist_lochist_part_id_fkey FOREIGN KEY (lochist_part_id) REFERENCES part(part_id);


--
-- TOC entry 3007 (class 2606 OID 56703)
-- Name: lochist_lochist_start_loc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY lochist
    ADD CONSTRAINT lochist_lochist_start_loc_id_fkey FOREIGN KEY (lochist_start_loc_id) REFERENCES loc(loc_id);


--
-- TOC entry 3008 (class 2606 OID 56708)
-- Name: lochist_lochist_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY lochist
    ADD CONSTRAINT lochist_lochist_usr_id_fkey FOREIGN KEY (lochist_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3009 (class 2606 OID 56713)
-- Name: part_item_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part
    ADD CONSTRAINT part_item_id_fk FOREIGN KEY (part_item_id) REFERENCES item(item_id) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 3010 (class 2606 OID 56718)
-- Name: part_part_cust_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part
    ADD CONSTRAINT part_part_cust_id_fkey FOREIGN KEY (part_cust_id) REFERENCES cust(cust_id);


--
-- TOC entry 3011 (class 2606 OID 56723)
-- Name: part_part_loc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part
    ADD CONSTRAINT part_part_loc_id_fkey FOREIGN KEY (part_loc_id) REFERENCES loc(loc_id);


--
-- TOC entry 3012 (class 2606 OID 56728)
-- Name: part_partstate_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part
    ADD CONSTRAINT part_partstate_id_fk FOREIGN KEY (part_partstate_id) REFERENCES partstate(partstate_id);


--
-- TOC entry 3013 (class 2606 OID 56733)
-- Name: part_revision_part_item_id_itemrevision_revision_itemrevision_i; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY part
    ADD CONSTRAINT part_revision_part_item_id_itemrevision_revision_itemrevision_i FOREIGN KEY (part_item_id, part_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3014 (class 2606 OID 56738)
-- Name: partactivehist_partactivehist_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partactivehist
    ADD CONSTRAINT partactivehist_partactivehist_orig_item_id_fkey FOREIGN KEY (partactivehist_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3015 (class 2606 OID 56743)
-- Name: partactivehist_partactivehist_orig_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partactivehist
    ADD CONSTRAINT partactivehist_partactivehist_orig_item_id_fkey1 FOREIGN KEY (partactivehist_orig_item_id, partactivehist_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3016 (class 2606 OID 56748)
-- Name: partactivehist_partactivehist_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partactivehist
    ADD CONSTRAINT partactivehist_partactivehist_part_id_fkey FOREIGN KEY (partactivehist_part_id) REFERENCES part(part_id);


--
-- TOC entry 3017 (class 2606 OID 56753)
-- Name: partactivehist_partactivehist_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partactivehist
    ADD CONSTRAINT partactivehist_partactivehist_usr_id_fkey FOREIGN KEY (partactivehist_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3018 (class 2606 OID 56758)
-- Name: partallochist_partallochist_child_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_child_orig_item_id_fkey FOREIGN KEY (partallochist_child_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3019 (class 2606 OID 56763)
-- Name: partallochist_partallochist_child_orig_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_child_orig_item_id_fkey1 FOREIGN KEY (partallochist_child_orig_item_id, partallochist_child_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3020 (class 2606 OID 56768)
-- Name: partallochist_partallochist_child_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_child_part_id_fkey FOREIGN KEY (partallochist_child_part_id) REFERENCES part(part_id);


--
-- TOC entry 3021 (class 2606 OID 56773)
-- Name: partallochist_partallochist_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_line_id_fkey FOREIGN KEY (partallochist_line_id) REFERENCES line(line_id);


--
-- TOC entry 3022 (class 2606 OID 56778)
-- Name: partallochist_partallochist_parent_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_parent_orig_item_id_fkey FOREIGN KEY (partallochist_parent_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3023 (class 2606 OID 56783)
-- Name: partallochist_partallochist_parent_orig_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_parent_orig_item_id_fkey1 FOREIGN KEY (partallochist_parent_orig_item_id, partallochist_parent_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3024 (class 2606 OID 56788)
-- Name: partallochist_partallochist_parent_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_parent_part_id_fkey FOREIGN KEY (partallochist_parent_part_id) REFERENCES part(part_id);


--
-- TOC entry 3025 (class 2606 OID 56793)
-- Name: partallochist_partallochist_station_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_station_id_fkey FOREIGN KEY (partallochist_station_id) REFERENCES station(station_id);


--
-- TOC entry 3026 (class 2606 OID 56798)
-- Name: partallochist_partallochist_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partallochist
    ADD CONSTRAINT partallochist_partallochist_usr_id_fkey FOREIGN KEY (partallochist_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3027 (class 2606 OID 56803)
-- Name: partcustparamvalue_partcustparamvalue_custparam_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partcustparamvalue
    ADD CONSTRAINT partcustparamvalue_partcustparamvalue_custparam_id_fkey FOREIGN KEY (partcustparamvalue_custparam_id) REFERENCES custparam(custparam_id);


--
-- TOC entry 3028 (class 2606 OID 56808)
-- Name: partcustparamvalue_partcustparamvalue_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partcustparamvalue
    ADD CONSTRAINT partcustparamvalue_partcustparamvalue_item_id_fkey FOREIGN KEY (partcustparamvalue_part_id) REFERENCES part(part_id);


--
-- TOC entry 3029 (class 2606 OID 56813)
-- Name: partdoclink_partdoclink_doctype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partdoclink
    ADD CONSTRAINT partdoclink_partdoclink_doctype_id_fkey FOREIGN KEY (partdoclink_doctype_id) REFERENCES doctype(doctype_id);


--
-- TOC entry 3030 (class 2606 OID 56818)
-- Name: partdoclink_partdoclink_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partdoclink
    ADD CONSTRAINT partdoclink_partdoclink_part_id_fkey FOREIGN KEY (partdoclink_part_id) REFERENCES part(part_id);


--
-- TOC entry 3031 (class 2606 OID 56823)
-- Name: partfile_partfile_custfiletype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfile
    ADD CONSTRAINT partfile_partfile_custfiletype_id_fkey FOREIGN KEY (partfile_custfiletype_id) REFERENCES custfiletype(custfiletype_id);


--
-- TOC entry 3032 (class 2606 OID 56828)
-- Name: partfile_partfile_filetype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfile
    ADD CONSTRAINT partfile_partfile_filetype_id_fkey FOREIGN KEY (partfile_filetype_id) REFERENCES filetype(filetype_id);


--
-- TOC entry 3033 (class 2606 OID 56833)
-- Name: partfile_partfile_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfile
    ADD CONSTRAINT partfile_partfile_part_id_fkey FOREIGN KEY (partfile_part_id) REFERENCES part(part_id);


--
-- TOC entry 3034 (class 2606 OID 56838)
-- Name: partfile_partfile_partfiledata_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfile
    ADD CONSTRAINT partfile_partfile_partfiledata_id_fkey FOREIGN KEY (partfile_partfiledata_id) REFERENCES partfiledata(partfiledata_id);


--
-- TOC entry 3035 (class 2606 OID 56843)
-- Name: partfile_partfile_partfilethumbnail_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partfile
    ADD CONSTRAINT partfile_partfile_partfilethumbnail_id_fkey FOREIGN KEY (partfile_partfilethumbnail_id) REFERENCES partfilethumbnail(partfilethumbnail_id);


--
-- TOC entry 3036 (class 2606 OID 56848)
-- Name: partlog_partlog_doctype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_doctype_id_fkey FOREIGN KEY (partlog_doctype_id) REFERENCES doctype(doctype_id);


--
-- TOC entry 3037 (class 2606 OID 56853)
-- Name: partlog_partlog_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_item_id_fkey FOREIGN KEY (partlog_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3038 (class 2606 OID 56858)
-- Name: partlog_partlog_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_item_id_fkey1 FOREIGN KEY (partlog_orig_item_id, partlog_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3039 (class 2606 OID 56863)
-- Name: partlog_partlog_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_line_id_fkey FOREIGN KEY (partlog_line_id) REFERENCES line(line_id);


--
-- TOC entry 3040 (class 2606 OID 56868)
-- Name: partlog_partlog_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_part_id_fkey FOREIGN KEY (partlog_part_id) REFERENCES part(part_id);


--
-- TOC entry 3041 (class 2606 OID 56873)
-- Name: partlog_partlog_partlogaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_partlogaction_id_fkey FOREIGN KEY (partlog_partlogaction_id) REFERENCES partlogaction(partlogaction_id);


--
-- TOC entry 3042 (class 2606 OID 56878)
-- Name: partlog_partlog_recordtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_recordtype_id_fkey FOREIGN KEY (partlog_recordtype_id) REFERENCES recordtype(recordtype_id);


--
-- TOC entry 3043 (class 2606 OID 56883)
-- Name: partlog_partlog_station_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_station_id_fkey FOREIGN KEY (partlog_station_id) REFERENCES station(station_id);


--
-- TOC entry 3044 (class 2606 OID 56888)
-- Name: partlog_partlog_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlog
    ADD CONSTRAINT partlog_partlog_user_id_fkey FOREIGN KEY (partlog_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3045 (class 2606 OID 56893)
-- Name: partlogaction_partlogaction_partlogactiontype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partlogaction
    ADD CONSTRAINT partlogaction_partlogaction_partlogactiontype_id_fkey FOREIGN KEY (partlogaction_partlogactiontype_id) REFERENCES partlogactiontype(partlogactiontype_id);


--
-- TOC entry 3046 (class 2606 OID 56898)
-- Name: partrefurbhist_partrefurbhist_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrefurbhist
    ADD CONSTRAINT partrefurbhist_partrefurbhist_orig_item_id_fkey FOREIGN KEY (partrefurbhist_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3047 (class 2606 OID 56903)
-- Name: partrefurbhist_partrefurbhist_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrefurbhist
    ADD CONSTRAINT partrefurbhist_partrefurbhist_part_id_fkey FOREIGN KEY (partrefurbhist_part_id) REFERENCES part(part_id);


--
-- TOC entry 3048 (class 2606 OID 56908)
-- Name: partrefurbhist_partrefurbhist_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrefurbhist
    ADD CONSTRAINT partrefurbhist_partrefurbhist_usr_id_fkey FOREIGN KEY (partrefurbhist_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3049 (class 2606 OID 56913)
-- Name: partrevhist_partrevhist_doctype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist
    ADD CONSTRAINT partrevhist_partrevhist_doctype_id_fkey FOREIGN KEY (partrevhist_doctype_id) REFERENCES doctype(doctype_id);


--
-- TOC entry 3050 (class 2606 OID 56918)
-- Name: partrevhist_partrevhist_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist
    ADD CONSTRAINT partrevhist_partrevhist_line_id_fkey FOREIGN KEY (partrevhist_line_id) REFERENCES line(line_id);


--
-- TOC entry 3051 (class 2606 OID 56923)
-- Name: partrevhist_partrevhist_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist
    ADD CONSTRAINT partrevhist_partrevhist_orig_item_id_fkey FOREIGN KEY (partrevhist_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3052 (class 2606 OID 56928)
-- Name: partrevhist_partrevhist_orig_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist
    ADD CONSTRAINT partrevhist_partrevhist_orig_item_id_fkey1 FOREIGN KEY (partrevhist_orig_item_id, partrevhist_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3053 (class 2606 OID 56933)
-- Name: partrevhist_partrevhist_station_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist
    ADD CONSTRAINT partrevhist_partrevhist_station_id_fkey FOREIGN KEY (partrevhist_station_id) REFERENCES station(station_id);


--
-- TOC entry 3054 (class 2606 OID 56938)
-- Name: partrevhist_partrevhist_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist
    ADD CONSTRAINT partrevhist_partrevhist_usr_id_fkey FOREIGN KEY (partrevhist_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3055 (class 2606 OID 56943)
-- Name: partrevisionhistory_partrevisionhistory_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partrevhist
    ADD CONSTRAINT partrevisionhistory_partrevisionhistory_part_id_fkey FOREIGN KEY (partrevhist_part_id) REFERENCES part(part_id);


--
-- TOC entry 3056 (class 2606 OID 56948)
-- Name: partscraphist_partscraphist_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partscraphist
    ADD CONSTRAINT partscraphist_partscraphist_orig_item_id_fkey FOREIGN KEY (partscraphist_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3057 (class 2606 OID 56953)
-- Name: partscraphist_partscraphist_orig_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partscraphist
    ADD CONSTRAINT partscraphist_partscraphist_orig_item_id_fkey1 FOREIGN KEY (partscraphist_orig_item_id, partscraphist_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3058 (class 2606 OID 56958)
-- Name: partscraphist_partscraphist_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partscraphist
    ADD CONSTRAINT partscraphist_partscraphist_part_id_fkey FOREIGN KEY (partscraphist_part_id) REFERENCES part(part_id);


--
-- TOC entry 3059 (class 2606 OID 56963)
-- Name: partscraphist_partscraphist_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partscraphist
    ADD CONSTRAINT partscraphist_partscraphist_usr_id_fkey FOREIGN KEY (partscraphist_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3060 (class 2606 OID 56968)
-- Name: partstateflow_partstateflow_end_partstate_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstateflow
    ADD CONSTRAINT partstateflow_partstateflow_end_partstate_id_fkey FOREIGN KEY (partstateflow_end_partstate_id) REFERENCES partstate(partstate_id);


--
-- TOC entry 3061 (class 2606 OID 56973)
-- Name: partstateflow_partstateflow_start_partstate_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstateflow
    ADD CONSTRAINT partstateflow_partstateflow_start_partstate_id_fkey FOREIGN KEY (partstateflow_start_partstate_id) REFERENCES partstate(partstate_id);


--
-- TOC entry 3062 (class 2606 OID 56978)
-- Name: partstatehist_partstatehist_end_partstate_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatehist
    ADD CONSTRAINT partstatehist_partstatehist_end_partstate_id_fkey FOREIGN KEY (partstatehist_end_partstate_id) REFERENCES partstate(partstate_id);


--
-- TOC entry 3063 (class 2606 OID 56983)
-- Name: partstatehist_partstatehist_orig_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatehist
    ADD CONSTRAINT partstatehist_partstatehist_orig_item_id_fkey FOREIGN KEY (partstatehist_orig_item_id) REFERENCES item(item_id);


--
-- TOC entry 3064 (class 2606 OID 56988)
-- Name: partstatehist_partstatehist_orig_item_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatehist
    ADD CONSTRAINT partstatehist_partstatehist_orig_item_id_fkey1 FOREIGN KEY (partstatehist_orig_item_id, partstatehist_orig_rev) REFERENCES itemrev(itemrev_item_id, itemrev_rev);


--
-- TOC entry 3065 (class 2606 OID 56993)
-- Name: partstatehist_partstatehist_start_partstate_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatehist
    ADD CONSTRAINT partstatehist_partstatehist_start_partstate_id_fkey FOREIGN KEY (partstatehist_start_partstate_id) REFERENCES partstate(partstate_id);


--
-- TOC entry 3066 (class 2606 OID 56998)
-- Name: partstatehist_partstatehist_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partstatehist
    ADD CONSTRAINT partstatehist_partstatehist_usr_id_fkey FOREIGN KEY (partstatehist_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3067 (class 2606 OID 57003)
-- Name: partwatcher_partwatcher_part_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partwatcher
    ADD CONSTRAINT partwatcher_partwatcher_part_id_fkey FOREIGN KEY (partwatcher_part_id) REFERENCES part(part_id);


--
-- TOC entry 3068 (class 2606 OID 57008)
-- Name: partwatcher_partwatcher_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY partwatcher
    ADD CONSTRAINT partwatcher_partwatcher_usr_id_fkey FOREIGN KEY (partwatcher_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3069 (class 2606 OID 57013)
-- Name: priv_priv_module_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY priv
    ADD CONSTRAINT priv_priv_module_id_fkey FOREIGN KEY (priv_module_id) REFERENCES module(module_id);


--
-- TOC entry 3070 (class 2606 OID 57018)
-- Name: priv_priv_privtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY priv
    ADD CONSTRAINT priv_priv_privtype_id_fkey FOREIGN KEY (priv_privtype_id) REFERENCES privtype(privtype_id);


--
-- TOC entry 3071 (class 2606 OID 57023)
-- Name: recordcustparamlink_recordcustparamlink_custparam_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamlink
    ADD CONSTRAINT recordcustparamlink_recordcustparamlink_custparam_id_fkey FOREIGN KEY (recordcustparamlink_custparam_id) REFERENCES custparam(custparam_id);


--
-- TOC entry 3072 (class 2606 OID 57028)
-- Name: recordcustparamlink_recordcustparamlink_recordtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamlink
    ADD CONSTRAINT recordcustparamlink_recordcustparamlink_recordtype_id_fkey FOREIGN KEY (recordcustparamlink_recordtype_id) REFERENCES recordtype(recordtype_id);


--
-- TOC entry 3073 (class 2606 OID 57033)
-- Name: recordcustparamvalue_recordcustparamvalue_custparam_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamvalue
    ADD CONSTRAINT recordcustparamvalue_recordcustparamvalue_custparam_id_fkey FOREIGN KEY (recordcustparamvalue_custparam_id) REFERENCES custparam(custparam_id);


--
-- TOC entry 3074 (class 2606 OID 57038)
-- Name: recordcustparamvalue_recordcustparamvalue_recordtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordcustparamvalue
    ADD CONSTRAINT recordcustparamvalue_recordcustparamvalue_recordtype_id_fkey FOREIGN KEY (recordcustparamvalue_recordtype_id) REFERENCES recordtype(recordtype_id);


--
-- TOC entry 3075 (class 2606 OID 57043)
-- Name: recorddoclink_recorddoclink_doctype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recorddoclink
    ADD CONSTRAINT recorddoclink_recorddoclink_doctype_id_fkey FOREIGN KEY (recorddoclink_doctype_id) REFERENCES doctype(doctype_id);


--
-- TOC entry 3076 (class 2606 OID 57048)
-- Name: recorddoclink_recorddoclink_recordtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recorddoclink
    ADD CONSTRAINT recorddoclink_recorddoclink_recordtype_id_fkey FOREIGN KEY (recorddoclink_recordtype_id) REFERENCES recordtype(recordtype_id);


--
-- TOC entry 3077 (class 2606 OID 57053)
-- Name: recordfile_recordfile_custfiletype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfile
    ADD CONSTRAINT recordfile_recordfile_custfiletype_id_fkey FOREIGN KEY (recordfile_custfiletype_id) REFERENCES custfiletype(custfiletype_id);


--
-- TOC entry 3078 (class 2606 OID 57058)
-- Name: recordfile_recordfile_filetype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfile
    ADD CONSTRAINT recordfile_recordfile_filetype_id_fkey FOREIGN KEY (recordfile_filetype_id) REFERENCES filetype(filetype_id);


--
-- TOC entry 3079 (class 2606 OID 57063)
-- Name: recordfile_recordfile_recordfiledata_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfile
    ADD CONSTRAINT recordfile_recordfile_recordfiledata_id_fkey FOREIGN KEY (recordfile_recordfiledata_id) REFERENCES recordfiledata(recordfiledata_id);


--
-- TOC entry 3080 (class 2606 OID 57068)
-- Name: recordfile_recordfile_recordfilethumbnail_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfile
    ADD CONSTRAINT recordfile_recordfile_recordfilethumbnail_id_fkey FOREIGN KEY (recordfile_recordfilethumbnail_id) REFERENCES recordfilethumbnail(recordfilethumbnail_id);


--
-- TOC entry 3081 (class 2606 OID 57073)
-- Name: recordfile_recordfile_recordtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordfile
    ADD CONSTRAINT recordfile_recordfile_recordtype_id_fkey FOREIGN KEY (recordfile_recordtype_id) REFERENCES recordtype(recordtype_id);


--
-- TOC entry 3082 (class 2606 OID 57078)
-- Name: recordlog_recordlog_doctype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlog
    ADD CONSTRAINT recordlog_recordlog_doctype_id_fkey FOREIGN KEY (recordlog_doctype_id) REFERENCES doctype(doctype_id);


--
-- TOC entry 3083 (class 2606 OID 57083)
-- Name: recordlog_recordlog_recordlogaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlog
    ADD CONSTRAINT recordlog_recordlog_recordlogaction_id_fkey FOREIGN KEY (recordlog_recordlogaction_id) REFERENCES recordlogaction(recordlogaction_id);


--
-- TOC entry 3084 (class 2606 OID 57088)
-- Name: recordlog_recordlog_recordtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlog
    ADD CONSTRAINT recordlog_recordlog_recordtype_id_fkey FOREIGN KEY (recordlog_recordtype_id) REFERENCES recordtype(recordtype_id);


--
-- TOC entry 3085 (class 2606 OID 57093)
-- Name: recordlog_recordlog_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlog
    ADD CONSTRAINT recordlog_recordlog_user_id_fkey FOREIGN KEY (recordlog_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3086 (class 2606 OID 57098)
-- Name: recordlogaction_recordlogaction_recordlogactiontype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordlogaction
    ADD CONSTRAINT recordlogaction_recordlogaction_recordlogactiontype_id_fkey FOREIGN KEY (recordlogaction_recordlogactiontype_id) REFERENCES recordlogactiontype(recordlogactiontype_id);


--
-- TOC entry 3087 (class 2606 OID 57103)
-- Name: recordwatcher_recordwatcher_recordtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordwatcher
    ADD CONSTRAINT recordwatcher_recordwatcher_recordtype_id_fkey FOREIGN KEY (recordwatcher_recordtype_id) REFERENCES recordtype(recordtype_id);


--
-- TOC entry 3088 (class 2606 OID 57108)
-- Name: recordwatcher_recordwatcher_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY recordwatcher
    ADD CONSTRAINT recordwatcher_recordwatcher_usr_id_fkey FOREIGN KEY (recordwatcher_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3089 (class 2606 OID 57113)
-- Name: rolepriv_rolepriv_priv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY rolepriv
    ADD CONSTRAINT rolepriv_rolepriv_priv_id_fkey FOREIGN KEY (rolepriv_priv_id) REFERENCES priv(priv_id);


--
-- TOC entry 3090 (class 2606 OID 57118)
-- Name: rolepriv_rolepriv_role_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY rolepriv
    ADD CONSTRAINT rolepriv_rolepriv_role_id_fkey FOREIGN KEY (rolepriv_role_id) REFERENCES role(role_id);


--
-- TOC entry 3091 (class 2606 OID 57123)
-- Name: serialprefix_serialpattern_id_serialpattern_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY serialprefix
    ADD CONSTRAINT serialprefix_serialpattern_id_serialpattern_id_fk FOREIGN KEY (serialprefix_serialpattern_id) REFERENCES serialpattern(serialpattern_id);


--
-- TOC entry 3092 (class 2606 OID 57128)
-- Name: station_station_stationtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY station
    ADD CONSTRAINT station_station_stationtype_id_fkey FOREIGN KEY (station_stationtype_id) REFERENCES stationtype(stationtype_id);


--
-- TOC entry 3093 (class 2606 OID 57133)
-- Name: userpriv_userpriv_priv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrpriv
    ADD CONSTRAINT userpriv_userpriv_priv_id_fkey FOREIGN KEY (usrpriv_priv_id) REFERENCES priv(priv_id);


--
-- TOC entry 3094 (class 2606 OID 57138)
-- Name: userpriv_userpriv_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrpriv
    ADD CONSTRAINT userpriv_userpriv_user_id_fkey FOREIGN KEY (usrpriv_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3095 (class 2606 OID 57143)
-- Name: userrole_userrole_role_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrrole
    ADD CONSTRAINT userrole_userrole_role_id_fkey FOREIGN KEY (usrrole_role_id) REFERENCES role(role_id);


--
-- TOC entry 3096 (class 2606 OID 57148)
-- Name: userrole_userrole_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY usrrole
    ADD CONSTRAINT userrole_userrole_user_id_fkey FOREIGN KEY (usrrole_usr_id) REFERENCES usr(usr_id);


--
-- TOC entry 3232 (class 0 OID 0)
-- Dependencies: 7
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- TOC entry 3236 (class 0 OID 0)
-- Dependencies: 181
-- Name: backflush; Type: ACL; Schema: public; Owner: admin
--

REVOKE ALL ON TABLE backflush FROM PUBLIC;
REVOKE ALL ON TABLE backflush FROM admin;
GRANT ALL ON TABLE backflush TO admin;


-- Completed on 2017-03-28 10:07:15

--
-- PostgreSQL database dump complete
--

